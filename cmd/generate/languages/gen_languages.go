//go:generate go run .

package main

import (
	"os"
	"os/exec"
	"path"
	"runtime"
	"strings"
	"text/template"

	"github.com/duckbrain/ldss/lib/sources/ldsorg"

	"context"
)

var tmpl = template.Must(template.New("").Funcs(template.FuncMap{
	"lower": strings.ToLower,
}).Parse(`// DO NOT EDIT: This file is generated by ./cmd/generate/languages

package lib

var Languages = []Lang{
	{{- range .Languages }}
	"{{ .Code }}",
	{{- end }}
}

var languageAliases = map[string]Lang{
	"":        "en", // Default language
	{{ range $key, $val := .Aliases -}}
	"{{ $key }}": "{{ $val }}",
	{{ end }}
}

var languageDescs = map[Lang]langDesc{
	{{- range .Languages }}
	"{{ .Code }}": {"{{ .Name }}", "{{ .EnglishName }}", "{{ .GlCode }}"},
	{{- end }}
}
`))

func main() {
	langs, err := ldsorg.Default.Languages(context.Background())
	if err != nil {
		panic(err)
	}

	type desc struct{ Name, EnglishName, GLCode string }
	var data struct {
		Languages []ldsorg.Lang
		Aliases   map[string]string
	}
	data.Aliases = make(map[string]string)

	for _, l := range langs {
		data.Aliases[strings.ToLower(l.Name)] = l.Code
		data.Aliases[strings.ToLower(l.EnglishName)] = l.Code
		data.Aliases[strings.ToLower(l.Code)] = l.Code
		data.Aliases[strings.ToLower(l.GlCode)] = l.Code
	}
	data.Languages = langs

	_, filename, _, _ := runtime.Caller(0)
	file, err := os.Create(path.Join(path.Dir(filename), "..", "..", "..", "lib", "languages_gen.go"))
	if err != nil {
		panic(err)
	}

	err = tmpl.Execute(file, data)
	if err != nil {
		panic(err)
	}

	err = file.Close()
	if err != nil {
		panic(err)
	}

	err = exec.Command("go", "fmt", file.Name()).Run()
	if err != nil {
		panic(err)
	}
}
