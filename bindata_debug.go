// Code generated by go-bindata.
// sources:
// data/help/config
// data/help/download
// data/help/help
// data/reference/eng
// data/reference/example
// data/web/static/css/stylesheet.css
// data/web/static/favicon.ico
// data/web/static/svg/account-login.svg
// data/web/static/svg/account-logout.svg
// data/web/static/svg/action-redo.svg
// data/web/static/svg/action-undo.svg
// data/web/static/svg/align-center.svg
// data/web/static/svg/align-left.svg
// data/web/static/svg/align-right.svg
// data/web/static/svg/aperture.svg
// data/web/static/svg/arrow-bottom.svg
// data/web/static/svg/arrow-circle-bottom.svg
// data/web/static/svg/arrow-circle-left.svg
// data/web/static/svg/arrow-circle-right.svg
// data/web/static/svg/arrow-circle-top.svg
// data/web/static/svg/arrow-left.svg
// data/web/static/svg/arrow-right.svg
// data/web/static/svg/arrow-thick-bottom.svg
// data/web/static/svg/arrow-thick-left.svg
// data/web/static/svg/arrow-thick-right.svg
// data/web/static/svg/arrow-thick-top.svg
// data/web/static/svg/arrow-top.svg
// data/web/static/svg/audio-spectrum.svg
// data/web/static/svg/audio.svg
// data/web/static/svg/badge.svg
// data/web/static/svg/ban.svg
// data/web/static/svg/bar-chart.svg
// data/web/static/svg/basket.svg
// data/web/static/svg/battery-empty.svg
// data/web/static/svg/battery-full.svg
// data/web/static/svg/beaker.svg
// data/web/static/svg/bell.svg
// data/web/static/svg/bluetooth.svg
// data/web/static/svg/bold.svg
// data/web/static/svg/bolt.svg
// data/web/static/svg/book.svg
// data/web/static/svg/bookmark.svg
// data/web/static/svg/box.svg
// data/web/static/svg/briefcase.svg
// data/web/static/svg/british-pound.svg
// data/web/static/svg/browser.svg
// data/web/static/svg/brush.svg
// data/web/static/svg/bug.svg
// data/web/static/svg/bullhorn.svg
// data/web/static/svg/calculator.svg
// data/web/static/svg/calendar.svg
// data/web/static/svg/camera-slr.svg
// data/web/static/svg/caret-bottom.svg
// data/web/static/svg/caret-left.svg
// data/web/static/svg/caret-right.svg
// data/web/static/svg/caret-top.svg
// data/web/static/svg/cart.svg
// data/web/static/svg/chat.svg
// data/web/static/svg/check.svg
// data/web/static/svg/chevron-bottom.svg
// data/web/static/svg/chevron-left.svg
// data/web/static/svg/chevron-right.svg
// data/web/static/svg/chevron-top.svg
// data/web/static/svg/circle-check.svg
// data/web/static/svg/circle-x.svg
// data/web/static/svg/clipboard.svg
// data/web/static/svg/clock.svg
// data/web/static/svg/cloud-download.svg
// data/web/static/svg/cloud-upload.svg
// data/web/static/svg/cloud.svg
// data/web/static/svg/cloudy.svg
// data/web/static/svg/code.svg
// data/web/static/svg/cog.svg
// data/web/static/svg/collapse-down.svg
// data/web/static/svg/collapse-left.svg
// data/web/static/svg/collapse-right.svg
// data/web/static/svg/collapse-up.svg
// data/web/static/svg/command.svg
// data/web/static/svg/comment-square.svg
// data/web/static/svg/compass.svg
// data/web/static/svg/contrast.svg
// data/web/static/svg/copywriting.svg
// data/web/static/svg/credit-card.svg
// data/web/static/svg/crop.svg
// data/web/static/svg/dashboard.svg
// data/web/static/svg/data-transfer-download.svg
// data/web/static/svg/data-transfer-upload.svg
// data/web/static/svg/delete.svg
// data/web/static/svg/dial.svg
// data/web/static/svg/document.svg
// data/web/static/svg/dollar.svg
// data/web/static/svg/double-quote-sans-left.svg
// data/web/static/svg/double-quote-sans-right.svg
// data/web/static/svg/double-quote-serif-left.svg
// data/web/static/svg/double-quote-serif-right.svg
// data/web/static/svg/droplet.svg
// data/web/static/svg/eject.svg
// data/web/static/svg/elevator.svg
// data/web/static/svg/ellipses.svg
// data/web/static/svg/envelope-closed.svg
// data/web/static/svg/envelope-open.svg
// data/web/static/svg/euro.svg
// data/web/static/svg/excerpt.svg
// data/web/static/svg/expand-down.svg
// data/web/static/svg/expand-left.svg
// data/web/static/svg/expand-right.svg
// data/web/static/svg/expand-up.svg
// data/web/static/svg/external-link.svg
// data/web/static/svg/eye.svg
// data/web/static/svg/eyedropper.svg
// data/web/static/svg/file.svg
// data/web/static/svg/fire.svg
// data/web/static/svg/flag.svg
// data/web/static/svg/flash.svg
// data/web/static/svg/folder.svg
// data/web/static/svg/fork.svg
// data/web/static/svg/fullscreen-enter.svg
// data/web/static/svg/fullscreen-exit.svg
// data/web/static/svg/globe.svg
// data/web/static/svg/graph.svg
// data/web/static/svg/grid-four-up.svg
// data/web/static/svg/grid-three-up.svg
// data/web/static/svg/grid-two-up.svg
// data/web/static/svg/hard-drive.svg
// data/web/static/svg/header.svg
// data/web/static/svg/headphones.svg
// data/web/static/svg/heart.svg
// data/web/static/svg/home.svg
// data/web/static/svg/image.svg
// data/web/static/svg/inbox.svg
// data/web/static/svg/infinity.svg
// data/web/static/svg/info.svg
// data/web/static/svg/italic.svg
// data/web/static/svg/justify-center.svg
// data/web/static/svg/justify-left.svg
// data/web/static/svg/justify-right.svg
// data/web/static/svg/key.svg
// data/web/static/svg/laptop.svg
// data/web/static/svg/layers.svg
// data/web/static/svg/lightbulb.svg
// data/web/static/svg/link-broken.svg
// data/web/static/svg/link-intact.svg
// data/web/static/svg/list-rich.svg
// data/web/static/svg/list.svg
// data/web/static/svg/location.svg
// data/web/static/svg/lock-locked.svg
// data/web/static/svg/lock-unlocked.svg
// data/web/static/svg/loop-circular.svg
// data/web/static/svg/loop-square.svg
// data/web/static/svg/loop.svg
// data/web/static/svg/magnifying-glass.svg
// data/web/static/svg/map-marker.svg
// data/web/static/svg/map.svg
// data/web/static/svg/media-pause.svg
// data/web/static/svg/media-play.svg
// data/web/static/svg/media-record.svg
// data/web/static/svg/media-skip-backward.svg
// data/web/static/svg/media-skip-forward.svg
// data/web/static/svg/media-step-backward.svg
// data/web/static/svg/media-step-forward.svg
// data/web/static/svg/media-stop.svg
// data/web/static/svg/medical-cross.svg
// data/web/static/svg/menu.svg
// data/web/static/svg/microphone.svg
// data/web/static/svg/minus.svg
// data/web/static/svg/monitor.svg
// data/web/static/svg/moon.svg
// data/web/static/svg/move.svg
// data/web/static/svg/musical-note.svg
// data/web/static/svg/paperclip.svg
// data/web/static/svg/pencil.svg
// data/web/static/svg/people.svg
// data/web/static/svg/person.svg
// data/web/static/svg/phone.svg
// data/web/static/svg/pie-chart.svg
// data/web/static/svg/pin.svg
// data/web/static/svg/play-circle.svg
// data/web/static/svg/plus.svg
// data/web/static/svg/power-standby.svg
// data/web/static/svg/print.svg
// data/web/static/svg/project.svg
// data/web/static/svg/pulse.svg
// data/web/static/svg/puzzle-piece.svg
// data/web/static/svg/question-mark.svg
// data/web/static/svg/rain.svg
// data/web/static/svg/random.svg
// data/web/static/svg/reload.svg
// data/web/static/svg/resize-both.svg
// data/web/static/svg/resize-height.svg
// data/web/static/svg/resize-width.svg
// data/web/static/svg/rss-alt.svg
// data/web/static/svg/rss.svg
// data/web/static/svg/script.svg
// data/web/static/svg/share-boxed.svg
// data/web/static/svg/share.svg
// data/web/static/svg/shield.svg
// data/web/static/svg/signal.svg
// data/web/static/svg/signpost.svg
// data/web/static/svg/sort-ascending.svg
// data/web/static/svg/sort-descending.svg
// data/web/static/svg/spreadsheet.svg
// data/web/static/svg/star.svg
// data/web/static/svg/sun.svg
// data/web/static/svg/tablet.svg
// data/web/static/svg/tag.svg
// data/web/static/svg/tags.svg
// data/web/static/svg/target.svg
// data/web/static/svg/task.svg
// data/web/static/svg/terminal.svg
// data/web/static/svg/text.svg
// data/web/static/svg/thumb-down.svg
// data/web/static/svg/thumb-up.svg
// data/web/static/svg/timer.svg
// data/web/static/svg/transfer.svg
// data/web/static/svg/trash.svg
// data/web/static/svg/underline.svg
// data/web/static/svg/vertical-align-bottom.svg
// data/web/static/svg/vertical-align-center.svg
// data/web/static/svg/vertical-align-top.svg
// data/web/static/svg/video.svg
// data/web/static/svg/volume-high.svg
// data/web/static/svg/volume-low.svg
// data/web/static/svg/volume-off.svg
// data/web/static/svg/warning.svg
// data/web/static/svg/wifi.svg
// data/web/static/svg/wrench.svg
// data/web/static/svg/x.svg
// data/web/static/svg/yen.svg
// data/web/static/svg/zoom-in.svg
// data/web/static/svg/zoom-out.svg
// data/web/static/webp/account-login-2x.webp
// data/web/static/webp/account-login-3x.webp
// data/web/static/webp/account-login-4x.webp
// data/web/static/webp/account-login-6x.webp
// data/web/static/webp/account-login-8x.webp
// data/web/static/webp/account-login.webp
// data/web/static/webp/account-logout-2x.webp
// data/web/static/webp/account-logout-3x.webp
// data/web/static/webp/account-logout-4x.webp
// data/web/static/webp/account-logout-6x.webp
// data/web/static/webp/account-logout-8x.webp
// data/web/static/webp/account-logout.webp
// data/web/static/webp/action-redo-2x.webp
// data/web/static/webp/action-redo-3x.webp
// data/web/static/webp/action-redo-4x.webp
// data/web/static/webp/action-redo-6x.webp
// data/web/static/webp/action-redo-8x.webp
// data/web/static/webp/action-redo.webp
// data/web/static/webp/action-undo-2x.webp
// data/web/static/webp/action-undo-3x.webp
// data/web/static/webp/action-undo-4x.webp
// data/web/static/webp/action-undo-6x.webp
// data/web/static/webp/action-undo-8x.webp
// data/web/static/webp/action-undo.webp
// data/web/static/webp/align-center-2x.webp
// data/web/static/webp/align-center-3x.webp
// data/web/static/webp/align-center-4x.webp
// data/web/static/webp/align-center-6x.webp
// data/web/static/webp/align-center-8x.webp
// data/web/static/webp/align-center.webp
// data/web/static/webp/align-left-2x.webp
// data/web/static/webp/align-left-3x.webp
// data/web/static/webp/align-left-4x.webp
// data/web/static/webp/align-left-6x.webp
// data/web/static/webp/align-left-8x.webp
// data/web/static/webp/align-left.webp
// data/web/static/webp/align-right-2x.webp
// data/web/static/webp/align-right-3x.webp
// data/web/static/webp/align-right-4x.webp
// data/web/static/webp/align-right-6x.webp
// data/web/static/webp/align-right-8x.webp
// data/web/static/webp/align-right.webp
// data/web/static/webp/aperture-2x.webp
// data/web/static/webp/aperture-3x.webp
// data/web/static/webp/aperture-4x.webp
// data/web/static/webp/aperture-6x.webp
// data/web/static/webp/aperture-8x.webp
// data/web/static/webp/aperture.webp
// data/web/static/webp/arrow-bottom-2x.webp
// data/web/static/webp/arrow-bottom-3x.webp
// data/web/static/webp/arrow-bottom-4x.webp
// data/web/static/webp/arrow-bottom-6x.webp
// data/web/static/webp/arrow-bottom-8x.webp
// data/web/static/webp/arrow-bottom.webp
// data/web/static/webp/arrow-circle-bottom-2x.webp
// data/web/static/webp/arrow-circle-bottom-3x.webp
// data/web/static/webp/arrow-circle-bottom-4x.webp
// data/web/static/webp/arrow-circle-bottom-6x.webp
// data/web/static/webp/arrow-circle-bottom-8x.webp
// data/web/static/webp/arrow-circle-bottom.webp
// data/web/static/webp/arrow-circle-left-2x.webp
// data/web/static/webp/arrow-circle-left-3x.webp
// data/web/static/webp/arrow-circle-left-4x.webp
// data/web/static/webp/arrow-circle-left-6x.webp
// data/web/static/webp/arrow-circle-left-8x.webp
// data/web/static/webp/arrow-circle-left.webp
// data/web/static/webp/arrow-circle-right-2x.webp
// data/web/static/webp/arrow-circle-right-3x.webp
// data/web/static/webp/arrow-circle-right-4x.webp
// data/web/static/webp/arrow-circle-right-6x.webp
// data/web/static/webp/arrow-circle-right-8x.webp
// data/web/static/webp/arrow-circle-right.webp
// data/web/static/webp/arrow-circle-top-2x.webp
// data/web/static/webp/arrow-circle-top-3x.webp
// data/web/static/webp/arrow-circle-top-4x.webp
// data/web/static/webp/arrow-circle-top-6x.webp
// data/web/static/webp/arrow-circle-top-8x.webp
// data/web/static/webp/arrow-circle-top.webp
// data/web/static/webp/arrow-left-2x.webp
// data/web/static/webp/arrow-left-3x.webp
// data/web/static/webp/arrow-left-4x.webp
// data/web/static/webp/arrow-left-6x.webp
// data/web/static/webp/arrow-left-8x.webp
// data/web/static/webp/arrow-left.webp
// data/web/static/webp/arrow-right-2x.webp
// data/web/static/webp/arrow-right-3x.webp
// data/web/static/webp/arrow-right-4x.webp
// data/web/static/webp/arrow-right-6x.webp
// data/web/static/webp/arrow-right-8x.webp
// data/web/static/webp/arrow-right.webp
// data/web/static/webp/arrow-thick-bottom-2x.webp
// data/web/static/webp/arrow-thick-bottom-3x.webp
// data/web/static/webp/arrow-thick-bottom-4x.webp
// data/web/static/webp/arrow-thick-bottom-6x.webp
// data/web/static/webp/arrow-thick-bottom-8x.webp
// data/web/static/webp/arrow-thick-bottom.webp
// data/web/static/webp/arrow-thick-left-2x.webp
// data/web/static/webp/arrow-thick-left-3x.webp
// data/web/static/webp/arrow-thick-left-4x.webp
// data/web/static/webp/arrow-thick-left-6x.webp
// data/web/static/webp/arrow-thick-left-8x.webp
// data/web/static/webp/arrow-thick-left.webp
// data/web/static/webp/arrow-thick-right-2x.webp
// data/web/static/webp/arrow-thick-right-3x.webp
// data/web/static/webp/arrow-thick-right-4x.webp
// data/web/static/webp/arrow-thick-right-6x.webp
// data/web/static/webp/arrow-thick-right-8x.webp
// data/web/static/webp/arrow-thick-right.webp
// data/web/static/webp/arrow-thick-top-2x.webp
// data/web/static/webp/arrow-thick-top-3x.webp
// data/web/static/webp/arrow-thick-top-4x.webp
// data/web/static/webp/arrow-thick-top-6x.webp
// data/web/static/webp/arrow-thick-top-8x.webp
// data/web/static/webp/arrow-thick-top.webp
// data/web/static/webp/arrow-top-2x.webp
// data/web/static/webp/arrow-top-3x.webp
// data/web/static/webp/arrow-top-4x.webp
// data/web/static/webp/arrow-top-6x.webp
// data/web/static/webp/arrow-top-8x.webp
// data/web/static/webp/arrow-top.webp
// data/web/static/webp/audio-2x.webp
// data/web/static/webp/audio-3x.webp
// data/web/static/webp/audio-4x.webp
// data/web/static/webp/audio-6x.webp
// data/web/static/webp/audio-8x.webp
// data/web/static/webp/audio-spectrum-2x.webp
// data/web/static/webp/audio-spectrum-3x.webp
// data/web/static/webp/audio-spectrum-4x.webp
// data/web/static/webp/audio-spectrum-6x.webp
// data/web/static/webp/audio-spectrum-8x.webp
// data/web/static/webp/audio-spectrum.webp
// data/web/static/webp/audio.webp
// data/web/static/webp/badge-2x.webp
// data/web/static/webp/badge-3x.webp
// data/web/static/webp/badge-4x.webp
// data/web/static/webp/badge-6x.webp
// data/web/static/webp/badge-8x.webp
// data/web/static/webp/badge.webp
// data/web/static/webp/ban-2x.webp
// data/web/static/webp/ban-3x.webp
// data/web/static/webp/ban-4x.webp
// data/web/static/webp/ban-6x.webp
// data/web/static/webp/ban-8x.webp
// data/web/static/webp/ban.webp
// data/web/static/webp/bar-chart-2x.webp
// data/web/static/webp/bar-chart-3x.webp
// data/web/static/webp/bar-chart-4x.webp
// data/web/static/webp/bar-chart-6x.webp
// data/web/static/webp/bar-chart-8x.webp
// data/web/static/webp/bar-chart.webp
// data/web/static/webp/basket-2x.webp
// data/web/static/webp/basket-3x.webp
// data/web/static/webp/basket-4x.webp
// data/web/static/webp/basket-6x.webp
// data/web/static/webp/basket-8x.webp
// data/web/static/webp/basket.webp
// data/web/static/webp/battery-empty-2x.webp
// data/web/static/webp/battery-empty-3x.webp
// data/web/static/webp/battery-empty-4x.webp
// data/web/static/webp/battery-empty-6x.webp
// data/web/static/webp/battery-empty-8x.webp
// data/web/static/webp/battery-empty.webp
// data/web/static/webp/battery-full-2x.webp
// data/web/static/webp/battery-full-3x.webp
// data/web/static/webp/battery-full-4x.webp
// data/web/static/webp/battery-full-6x.webp
// data/web/static/webp/battery-full-8x.webp
// data/web/static/webp/battery-full.webp
// data/web/static/webp/beaker-2x.webp
// data/web/static/webp/beaker-3x.webp
// data/web/static/webp/beaker-4x.webp
// data/web/static/webp/beaker-6x.webp
// data/web/static/webp/beaker-8x.webp
// data/web/static/webp/beaker.webp
// data/web/static/webp/bell-2x.webp
// data/web/static/webp/bell-3x.webp
// data/web/static/webp/bell-4x.webp
// data/web/static/webp/bell-6x.webp
// data/web/static/webp/bell-8x.webp
// data/web/static/webp/bell.webp
// data/web/static/webp/bluetooth-2x.webp
// data/web/static/webp/bluetooth-3x.webp
// data/web/static/webp/bluetooth-4x.webp
// data/web/static/webp/bluetooth-6x.webp
// data/web/static/webp/bluetooth-8x.webp
// data/web/static/webp/bluetooth.webp
// data/web/static/webp/bold-2x.webp
// data/web/static/webp/bold-3x.webp
// data/web/static/webp/bold-4x.webp
// data/web/static/webp/bold-6x.webp
// data/web/static/webp/bold-8x.webp
// data/web/static/webp/bold.webp
// data/web/static/webp/bolt-2x.webp
// data/web/static/webp/bolt-3x.webp
// data/web/static/webp/bolt-4x.webp
// data/web/static/webp/bolt-6x.webp
// data/web/static/webp/bolt-8x.webp
// data/web/static/webp/bolt.webp
// data/web/static/webp/book-2x.webp
// data/web/static/webp/book-3x.webp
// data/web/static/webp/book-4x.webp
// data/web/static/webp/book-6x.webp
// data/web/static/webp/book-8x.webp
// data/web/static/webp/book.webp
// data/web/static/webp/bookmark-2x.webp
// data/web/static/webp/bookmark-3x.webp
// data/web/static/webp/bookmark-4x.webp
// data/web/static/webp/bookmark-6x.webp
// data/web/static/webp/bookmark-8x.webp
// data/web/static/webp/bookmark.webp
// data/web/static/webp/box-2x.webp
// data/web/static/webp/box-3x.webp
// data/web/static/webp/box-4x.webp
// data/web/static/webp/box-6x.webp
// data/web/static/webp/box-8x.webp
// data/web/static/webp/box.webp
// data/web/static/webp/briefcase-2x.webp
// data/web/static/webp/briefcase-3x.webp
// data/web/static/webp/briefcase-4x.webp
// data/web/static/webp/briefcase-6x.webp
// data/web/static/webp/briefcase-8x.webp
// data/web/static/webp/briefcase.webp
// data/web/static/webp/british-pound-2x.webp
// data/web/static/webp/british-pound-3x.webp
// data/web/static/webp/british-pound-4x.webp
// data/web/static/webp/british-pound-6x.webp
// data/web/static/webp/british-pound-8x.webp
// data/web/static/webp/british-pound.webp
// data/web/static/webp/browser-2x.webp
// data/web/static/webp/browser-3x.webp
// data/web/static/webp/browser-4x.webp
// data/web/static/webp/browser-6x.webp
// data/web/static/webp/browser-8x.webp
// data/web/static/webp/browser.webp
// data/web/static/webp/brush-2x.webp
// data/web/static/webp/brush-3x.webp
// data/web/static/webp/brush-4x.webp
// data/web/static/webp/brush-6x.webp
// data/web/static/webp/brush-8x.webp
// data/web/static/webp/brush.webp
// data/web/static/webp/bug-2x.webp
// data/web/static/webp/bug-3x.webp
// data/web/static/webp/bug-4x.webp
// data/web/static/webp/bug-6x.webp
// data/web/static/webp/bug-8x.webp
// data/web/static/webp/bug.webp
// data/web/static/webp/bullhorn-2x.webp
// data/web/static/webp/bullhorn-3x.webp
// data/web/static/webp/bullhorn-4x.webp
// data/web/static/webp/bullhorn-6x.webp
// data/web/static/webp/bullhorn-8x.webp
// data/web/static/webp/bullhorn.webp
// data/web/static/webp/calculator-2x.webp
// data/web/static/webp/calculator-3x.webp
// data/web/static/webp/calculator-4x.webp
// data/web/static/webp/calculator-6x.webp
// data/web/static/webp/calculator-8x.webp
// data/web/static/webp/calculator.webp
// data/web/static/webp/calendar-2x.webp
// data/web/static/webp/calendar-3x.webp
// data/web/static/webp/calendar-4x.webp
// data/web/static/webp/calendar-6x.webp
// data/web/static/webp/calendar-8x.webp
// data/web/static/webp/calendar.webp
// data/web/static/webp/camera-slr-2x.webp
// data/web/static/webp/camera-slr-3x.webp
// data/web/static/webp/camera-slr-4x.webp
// data/web/static/webp/camera-slr-6x.webp
// data/web/static/webp/camera-slr-8x.webp
// data/web/static/webp/camera-slr.webp
// data/web/static/webp/caret-bottom-2x.webp
// data/web/static/webp/caret-bottom-3x.webp
// data/web/static/webp/caret-bottom-4x.webp
// data/web/static/webp/caret-bottom-6x.webp
// data/web/static/webp/caret-bottom-8x.webp
// data/web/static/webp/caret-bottom.webp
// data/web/static/webp/caret-left-2x.webp
// data/web/static/webp/caret-left-3x.webp
// data/web/static/webp/caret-left-4x.webp
// data/web/static/webp/caret-left-6x.webp
// data/web/static/webp/caret-left-8x.webp
// data/web/static/webp/caret-left.webp
// data/web/static/webp/caret-right-2x.webp
// data/web/static/webp/caret-right-3x.webp
// data/web/static/webp/caret-right-4x.webp
// data/web/static/webp/caret-right-6x.webp
// data/web/static/webp/caret-right-8x.webp
// data/web/static/webp/caret-right.webp
// data/web/static/webp/caret-top-2x.webp
// data/web/static/webp/caret-top-3x.webp
// data/web/static/webp/caret-top-4x.webp
// data/web/static/webp/caret-top-6x.webp
// data/web/static/webp/caret-top-8x.webp
// data/web/static/webp/caret-top.webp
// data/web/static/webp/cart-2x.webp
// data/web/static/webp/cart-3x.webp
// data/web/static/webp/cart-4x.webp
// data/web/static/webp/cart-6x.webp
// data/web/static/webp/cart-8x.webp
// data/web/static/webp/cart.webp
// data/web/static/webp/chat-2x.webp
// data/web/static/webp/chat-3x.webp
// data/web/static/webp/chat-4x.webp
// data/web/static/webp/chat-6x.webp
// data/web/static/webp/chat-8x.webp
// data/web/static/webp/chat.webp
// data/web/static/webp/check-2x.webp
// data/web/static/webp/check-3x.webp
// data/web/static/webp/check-4x.webp
// data/web/static/webp/check-6x.webp
// data/web/static/webp/check-8x.webp
// data/web/static/webp/check.webp
// data/web/static/webp/chevron-bottom-2x.webp
// data/web/static/webp/chevron-bottom-3x.webp
// data/web/static/webp/chevron-bottom-4x.webp
// data/web/static/webp/chevron-bottom-6x.webp
// data/web/static/webp/chevron-bottom-8x.webp
// data/web/static/webp/chevron-bottom.webp
// data/web/static/webp/chevron-left-2x.webp
// data/web/static/webp/chevron-left-3x.webp
// data/web/static/webp/chevron-left-4x.webp
// data/web/static/webp/chevron-left-6x.webp
// data/web/static/webp/chevron-left-8x.webp
// data/web/static/webp/chevron-left.webp
// data/web/static/webp/chevron-right-2x.webp
// data/web/static/webp/chevron-right-3x.webp
// data/web/static/webp/chevron-right-4x.webp
// data/web/static/webp/chevron-right-6x.webp
// data/web/static/webp/chevron-right-8x.webp
// data/web/static/webp/chevron-right.webp
// data/web/static/webp/chevron-top-2x.webp
// data/web/static/webp/chevron-top-3x.webp
// data/web/static/webp/chevron-top-4x.webp
// data/web/static/webp/chevron-top-6x.webp
// data/web/static/webp/chevron-top-8x.webp
// data/web/static/webp/chevron-top.webp
// data/web/static/webp/circle-check-2x.webp
// data/web/static/webp/circle-check-3x.webp
// data/web/static/webp/circle-check-4x.webp
// data/web/static/webp/circle-check-6x.webp
// data/web/static/webp/circle-check-8x.webp
// data/web/static/webp/circle-check.webp
// data/web/static/webp/circle-x-2x.webp
// data/web/static/webp/circle-x-3x.webp
// data/web/static/webp/circle-x-4x.webp
// data/web/static/webp/circle-x-6x.webp
// data/web/static/webp/circle-x-8x.webp
// data/web/static/webp/circle-x.webp
// data/web/static/webp/clipboard-2x.webp
// data/web/static/webp/clipboard-3x.webp
// data/web/static/webp/clipboard-4x.webp
// data/web/static/webp/clipboard-6x.webp
// data/web/static/webp/clipboard-8x.webp
// data/web/static/webp/clipboard.webp
// data/web/static/webp/clock-2x.webp
// data/web/static/webp/clock-3x.webp
// data/web/static/webp/clock-4x.webp
// data/web/static/webp/clock-6x.webp
// data/web/static/webp/clock-8x.webp
// data/web/static/webp/clock.webp
// data/web/static/webp/cloud-2x.webp
// data/web/static/webp/cloud-3x.webp
// data/web/static/webp/cloud-4x.webp
// data/web/static/webp/cloud-6x.webp
// data/web/static/webp/cloud-8x.webp
// data/web/static/webp/cloud-download-2x.webp
// data/web/static/webp/cloud-download-3x.webp
// data/web/static/webp/cloud-download-4x.webp
// data/web/static/webp/cloud-download-6x.webp
// data/web/static/webp/cloud-download-8x.webp
// data/web/static/webp/cloud-download.webp
// data/web/static/webp/cloud-upload-2x.webp
// data/web/static/webp/cloud-upload-3x.webp
// data/web/static/webp/cloud-upload-4x.webp
// data/web/static/webp/cloud-upload-6x.webp
// data/web/static/webp/cloud-upload-8x.webp
// data/web/static/webp/cloud-upload.webp
// data/web/static/webp/cloud.webp
// data/web/static/webp/cloudy-2x.webp
// data/web/static/webp/cloudy-3x.webp
// data/web/static/webp/cloudy-4x.webp
// data/web/static/webp/cloudy-6x.webp
// data/web/static/webp/cloudy-8x.webp
// data/web/static/webp/cloudy.webp
// data/web/static/webp/code-2x.webp
// data/web/static/webp/code-3x.webp
// data/web/static/webp/code-4x.webp
// data/web/static/webp/code-6x.webp
// data/web/static/webp/code-8x.webp
// data/web/static/webp/code.webp
// data/web/static/webp/cog-2x.webp
// data/web/static/webp/cog-3x.webp
// data/web/static/webp/cog-4x.webp
// data/web/static/webp/cog-6x.webp
// data/web/static/webp/cog-8x.webp
// data/web/static/webp/cog.webp
// data/web/static/webp/collapse-down-2x.webp
// data/web/static/webp/collapse-down-3x.webp
// data/web/static/webp/collapse-down-4x.webp
// data/web/static/webp/collapse-down-6x.webp
// data/web/static/webp/collapse-down-8x.webp
// data/web/static/webp/collapse-down.webp
// data/web/static/webp/collapse-left-2x.webp
// data/web/static/webp/collapse-left-3x.webp
// data/web/static/webp/collapse-left-4x.webp
// data/web/static/webp/collapse-left-6x.webp
// data/web/static/webp/collapse-left-8x.webp
// data/web/static/webp/collapse-left.webp
// data/web/static/webp/collapse-right-2x.webp
// data/web/static/webp/collapse-right-3x.webp
// data/web/static/webp/collapse-right-4x.webp
// data/web/static/webp/collapse-right-6x.webp
// data/web/static/webp/collapse-right-8x.webp
// data/web/static/webp/collapse-right.webp
// data/web/static/webp/collapse-up-2x.webp
// data/web/static/webp/collapse-up-3x.webp
// data/web/static/webp/collapse-up-4x.webp
// data/web/static/webp/collapse-up-6x.webp
// data/web/static/webp/collapse-up-8x.webp
// data/web/static/webp/collapse-up.webp
// data/web/static/webp/command-2x.webp
// data/web/static/webp/command-3x.webp
// data/web/static/webp/command-4x.webp
// data/web/static/webp/command-6x.webp
// data/web/static/webp/command-8x.webp
// data/web/static/webp/command.webp
// data/web/static/webp/comment-square-2x.webp
// data/web/static/webp/comment-square-3x.webp
// data/web/static/webp/comment-square-4x.webp
// data/web/static/webp/comment-square-6x.webp
// data/web/static/webp/comment-square-8x.webp
// data/web/static/webp/comment-square.webp
// data/web/static/webp/compass-2x.webp
// data/web/static/webp/compass-3x.webp
// data/web/static/webp/compass-4x.webp
// data/web/static/webp/compass-6x.webp
// data/web/static/webp/compass-8x.webp
// data/web/static/webp/compass.webp
// data/web/static/webp/contrast-2x.webp
// data/web/static/webp/contrast-3x.webp
// data/web/static/webp/contrast-4x.webp
// data/web/static/webp/contrast-6x.webp
// data/web/static/webp/contrast-8x.webp
// data/web/static/webp/contrast.webp
// data/web/static/webp/copywriting-2x.webp
// data/web/static/webp/copywriting-3x.webp
// data/web/static/webp/copywriting-4x.webp
// data/web/static/webp/copywriting-6x.webp
// data/web/static/webp/copywriting-8x.webp
// data/web/static/webp/copywriting.webp
// data/web/static/webp/credit-card-2x.webp
// data/web/static/webp/credit-card-3x.webp
// data/web/static/webp/credit-card-4x.webp
// data/web/static/webp/credit-card-6x.webp
// data/web/static/webp/credit-card-8x.webp
// data/web/static/webp/credit-card.webp
// data/web/static/webp/crop-2x.webp
// data/web/static/webp/crop-3x.webp
// data/web/static/webp/crop-4x.webp
// data/web/static/webp/crop-6x.webp
// data/web/static/webp/crop-8x.webp
// data/web/static/webp/crop.webp
// data/web/static/webp/dashboard-2x.webp
// data/web/static/webp/dashboard-3x.webp
// data/web/static/webp/dashboard-4x.webp
// data/web/static/webp/dashboard-6x.webp
// data/web/static/webp/dashboard-8x.webp
// data/web/static/webp/dashboard.webp
// data/web/static/webp/data-transfer-download-2x.webp
// data/web/static/webp/data-transfer-download-3x.webp
// data/web/static/webp/data-transfer-download-4x.webp
// data/web/static/webp/data-transfer-download-6x.webp
// data/web/static/webp/data-transfer-download-8x.webp
// data/web/static/webp/data-transfer-download.webp
// data/web/static/webp/data-transfer-upload-2x.webp
// data/web/static/webp/data-transfer-upload-3x.webp
// data/web/static/webp/data-transfer-upload-4x.webp
// data/web/static/webp/data-transfer-upload-6x.webp
// data/web/static/webp/data-transfer-upload-8x.webp
// data/web/static/webp/data-transfer-upload.webp
// data/web/static/webp/delete-2x.webp
// data/web/static/webp/delete-3x.webp
// data/web/static/webp/delete-4x.webp
// data/web/static/webp/delete-6x.webp
// data/web/static/webp/delete-8x.webp
// data/web/static/webp/delete.webp
// data/web/static/webp/dial-2x.webp
// data/web/static/webp/dial-3x.webp
// data/web/static/webp/dial-4x.webp
// data/web/static/webp/dial-6x.webp
// data/web/static/webp/dial-8x.webp
// data/web/static/webp/dial.webp
// data/web/static/webp/document-2x.webp
// data/web/static/webp/document-3x.webp
// data/web/static/webp/document-4x.webp
// data/web/static/webp/document-6x.webp
// data/web/static/webp/document-8x.webp
// data/web/static/webp/document.webp
// data/web/static/webp/dollar-2x.webp
// data/web/static/webp/dollar-3x.webp
// data/web/static/webp/dollar-4x.webp
// data/web/static/webp/dollar-6x.webp
// data/web/static/webp/dollar-8x.webp
// data/web/static/webp/dollar.webp
// data/web/static/webp/double-quote-sans-left-2x.webp
// data/web/static/webp/double-quote-sans-left-3x.webp
// data/web/static/webp/double-quote-sans-left-4x.webp
// data/web/static/webp/double-quote-sans-left-6x.webp
// data/web/static/webp/double-quote-sans-left-8x.webp
// data/web/static/webp/double-quote-sans-left.webp
// data/web/static/webp/double-quote-sans-right-2x.webp
// data/web/static/webp/double-quote-sans-right-3x.webp
// data/web/static/webp/double-quote-sans-right-4x.webp
// data/web/static/webp/double-quote-sans-right-6x.webp
// data/web/static/webp/double-quote-sans-right-8x.webp
// data/web/static/webp/double-quote-sans-right.webp
// data/web/static/webp/double-quote-serif-left-2x.webp
// data/web/static/webp/double-quote-serif-left-3x.webp
// data/web/static/webp/double-quote-serif-left-4x.webp
// data/web/static/webp/double-quote-serif-left-6x.webp
// data/web/static/webp/double-quote-serif-left-8x.webp
// data/web/static/webp/double-quote-serif-left.webp
// data/web/static/webp/double-quote-serif-right-2x.webp
// data/web/static/webp/double-quote-serif-right-3x.webp
// data/web/static/webp/double-quote-serif-right-4x.webp
// data/web/static/webp/double-quote-serif-right-6x.webp
// data/web/static/webp/double-quote-serif-right-8x.webp
// data/web/static/webp/double-quote-serif-right.webp
// data/web/static/webp/droplet-2x.webp
// data/web/static/webp/droplet-3x.webp
// data/web/static/webp/droplet-4x.webp
// data/web/static/webp/droplet-6x.webp
// data/web/static/webp/droplet-8x.webp
// data/web/static/webp/droplet.webp
// data/web/static/webp/eject-2x.webp
// data/web/static/webp/eject-3x.webp
// data/web/static/webp/eject-4x.webp
// data/web/static/webp/eject-6x.webp
// data/web/static/webp/eject-8x.webp
// data/web/static/webp/eject.webp
// data/web/static/webp/elevator-2x.webp
// data/web/static/webp/elevator-3x.webp
// data/web/static/webp/elevator-4x.webp
// data/web/static/webp/elevator-6x.webp
// data/web/static/webp/elevator-8x.webp
// data/web/static/webp/elevator.webp
// data/web/static/webp/ellipses-2x.webp
// data/web/static/webp/ellipses-3x.webp
// data/web/static/webp/ellipses-4x.webp
// data/web/static/webp/ellipses-6x.webp
// data/web/static/webp/ellipses-8x.webp
// data/web/static/webp/ellipses.webp
// data/web/static/webp/envelope-closed-2x.webp
// data/web/static/webp/envelope-closed-3x.webp
// data/web/static/webp/envelope-closed-4x.webp
// data/web/static/webp/envelope-closed-6x.webp
// data/web/static/webp/envelope-closed-8x.webp
// data/web/static/webp/envelope-closed.webp
// data/web/static/webp/envelope-open-2x.webp
// data/web/static/webp/envelope-open-3x.webp
// data/web/static/webp/envelope-open-4x.webp
// data/web/static/webp/envelope-open-6x.webp
// data/web/static/webp/envelope-open-8x.webp
// data/web/static/webp/envelope-open.webp
// data/web/static/webp/euro-2x.webp
// data/web/static/webp/euro-3x.webp
// data/web/static/webp/euro-4x.webp
// data/web/static/webp/euro-6x.webp
// data/web/static/webp/euro-8x.webp
// data/web/static/webp/euro.webp
// data/web/static/webp/excerpt-2x.webp
// data/web/static/webp/excerpt-3x.webp
// data/web/static/webp/excerpt-4x.webp
// data/web/static/webp/excerpt-6x.webp
// data/web/static/webp/excerpt-8x.webp
// data/web/static/webp/excerpt.webp
// data/web/static/webp/expand-down-2x.webp
// data/web/static/webp/expand-down-3x.webp
// data/web/static/webp/expand-down-4x.webp
// data/web/static/webp/expand-down-6x.webp
// data/web/static/webp/expand-down-8x.webp
// data/web/static/webp/expand-down.webp
// data/web/static/webp/expand-left-2x.webp
// data/web/static/webp/expand-left-3x.webp
// data/web/static/webp/expand-left-4x.webp
// data/web/static/webp/expand-left-6x.webp
// data/web/static/webp/expand-left-8x.webp
// data/web/static/webp/expand-left.webp
// data/web/static/webp/expand-right-2x.webp
// data/web/static/webp/expand-right-3x.webp
// data/web/static/webp/expand-right-4x.webp
// data/web/static/webp/expand-right-6x.webp
// data/web/static/webp/expand-right-8x.webp
// data/web/static/webp/expand-right.webp
// data/web/static/webp/expand-up-2x.webp
// data/web/static/webp/expand-up-3x.webp
// data/web/static/webp/expand-up-4x.webp
// data/web/static/webp/expand-up-6x.webp
// data/web/static/webp/expand-up-8x.webp
// data/web/static/webp/expand-up.webp
// data/web/static/webp/external-link-2x.webp
// data/web/static/webp/external-link-3x.webp
// data/web/static/webp/external-link-4x.webp
// data/web/static/webp/external-link-6x.webp
// data/web/static/webp/external-link-8x.webp
// data/web/static/webp/external-link.webp
// data/web/static/webp/eye-2x.webp
// data/web/static/webp/eye-3x.webp
// data/web/static/webp/eye-4x.webp
// data/web/static/webp/eye-6x.webp
// data/web/static/webp/eye-8x.webp
// data/web/static/webp/eye.webp
// data/web/static/webp/eyedropper-2x.webp
// data/web/static/webp/eyedropper-3x.webp
// data/web/static/webp/eyedropper-4x.webp
// data/web/static/webp/eyedropper-6x.webp
// data/web/static/webp/eyedropper-8x.webp
// data/web/static/webp/eyedropper.webp
// data/web/static/webp/file-2x.webp
// data/web/static/webp/file-3x.webp
// data/web/static/webp/file-4x.webp
// data/web/static/webp/file-6x.webp
// data/web/static/webp/file-8x.webp
// data/web/static/webp/file.webp
// data/web/static/webp/fire-2x.webp
// data/web/static/webp/fire-3x.webp
// data/web/static/webp/fire-4x.webp
// data/web/static/webp/fire-6x.webp
// data/web/static/webp/fire-8x.webp
// data/web/static/webp/fire.webp
// data/web/static/webp/flag-2x.webp
// data/web/static/webp/flag-3x.webp
// data/web/static/webp/flag-4x.webp
// data/web/static/webp/flag-6x.webp
// data/web/static/webp/flag-8x.webp
// data/web/static/webp/flag.webp
// data/web/static/webp/flash-2x.webp
// data/web/static/webp/flash-3x.webp
// data/web/static/webp/flash-4x.webp
// data/web/static/webp/flash-6x.webp
// data/web/static/webp/flash-8x.webp
// data/web/static/webp/flash.webp
// data/web/static/webp/folder-2x.webp
// data/web/static/webp/folder-3x.webp
// data/web/static/webp/folder-4x.webp
// data/web/static/webp/folder-6x.webp
// data/web/static/webp/folder-8x.webp
// data/web/static/webp/folder.webp
// data/web/static/webp/fork-2x.webp
// data/web/static/webp/fork-3x.webp
// data/web/static/webp/fork-4x.webp
// data/web/static/webp/fork-6x.webp
// data/web/static/webp/fork-8x.webp
// data/web/static/webp/fork.webp
// data/web/static/webp/fullscreen-enter-2x.webp
// data/web/static/webp/fullscreen-enter-3x.webp
// data/web/static/webp/fullscreen-enter-4x.webp
// data/web/static/webp/fullscreen-enter-6x.webp
// data/web/static/webp/fullscreen-enter-8x.webp
// data/web/static/webp/fullscreen-enter.webp
// data/web/static/webp/fullscreen-exit-2x.webp
// data/web/static/webp/fullscreen-exit-3x.webp
// data/web/static/webp/fullscreen-exit-4x.webp
// data/web/static/webp/fullscreen-exit-6x.webp
// data/web/static/webp/fullscreen-exit-8x.webp
// data/web/static/webp/fullscreen-exit.webp
// data/web/static/webp/globe-2x.webp
// data/web/static/webp/globe-3x.webp
// data/web/static/webp/globe-4x.webp
// data/web/static/webp/globe-6x.webp
// data/web/static/webp/globe-8x.webp
// data/web/static/webp/globe.webp
// data/web/static/webp/graph-2x.webp
// data/web/static/webp/graph-3x.webp
// data/web/static/webp/graph-4x.webp
// data/web/static/webp/graph-6x.webp
// data/web/static/webp/graph-8x.webp
// data/web/static/webp/graph.webp
// data/web/static/webp/grid-four-up-2x.webp
// data/web/static/webp/grid-four-up-3x.webp
// data/web/static/webp/grid-four-up-4x.webp
// data/web/static/webp/grid-four-up-6x.webp
// data/web/static/webp/grid-four-up-8x.webp
// data/web/static/webp/grid-four-up.webp
// data/web/static/webp/grid-three-up-2x.webp
// data/web/static/webp/grid-three-up-3x.webp
// data/web/static/webp/grid-three-up-4x.webp
// data/web/static/webp/grid-three-up-6x.webp
// data/web/static/webp/grid-three-up-8x.webp
// data/web/static/webp/grid-three-up.webp
// data/web/static/webp/grid-two-up-2x.webp
// data/web/static/webp/grid-two-up-3x.webp
// data/web/static/webp/grid-two-up-4x.webp
// data/web/static/webp/grid-two-up-6x.webp
// data/web/static/webp/grid-two-up-8x.webp
// data/web/static/webp/grid-two-up.webp
// data/web/static/webp/hard-drive-2x.webp
// data/web/static/webp/hard-drive-3x.webp
// data/web/static/webp/hard-drive-4x.webp
// data/web/static/webp/hard-drive-6x.webp
// data/web/static/webp/hard-drive-8x.webp
// data/web/static/webp/hard-drive.webp
// data/web/static/webp/header-2x.webp
// data/web/static/webp/header-3x.webp
// data/web/static/webp/header-4x.webp
// data/web/static/webp/header-6x.webp
// data/web/static/webp/header-8x.webp
// data/web/static/webp/header.webp
// data/web/static/webp/headphones-2x.webp
// data/web/static/webp/headphones-3x.webp
// data/web/static/webp/headphones-4x.webp
// data/web/static/webp/headphones-6x.webp
// data/web/static/webp/headphones-8x.webp
// data/web/static/webp/headphones.webp
// data/web/static/webp/heart-2x.webp
// data/web/static/webp/heart-3x.webp
// data/web/static/webp/heart-4x.webp
// data/web/static/webp/heart-6x.webp
// data/web/static/webp/heart-8x.webp
// data/web/static/webp/heart.webp
// data/web/static/webp/home-2x.webp
// data/web/static/webp/home-3x.webp
// data/web/static/webp/home-4x.webp
// data/web/static/webp/home-6x.webp
// data/web/static/webp/home-8x.webp
// data/web/static/webp/home.webp
// data/web/static/webp/image-2x.webp
// data/web/static/webp/image-3x.webp
// data/web/static/webp/image-4x.webp
// data/web/static/webp/image-6x.webp
// data/web/static/webp/image-8x.webp
// data/web/static/webp/image.webp
// data/web/static/webp/inbox-2x.webp
// data/web/static/webp/inbox-3x.webp
// data/web/static/webp/inbox-4x.webp
// data/web/static/webp/inbox-6x.webp
// data/web/static/webp/inbox-8x.webp
// data/web/static/webp/inbox.webp
// data/web/static/webp/infinity-2x.webp
// data/web/static/webp/infinity-3x.webp
// data/web/static/webp/infinity-4x.webp
// data/web/static/webp/infinity-6x.webp
// data/web/static/webp/infinity-8x.webp
// data/web/static/webp/infinity.webp
// data/web/static/webp/info-2x.webp
// data/web/static/webp/info-3x.webp
// data/web/static/webp/info-4x.webp
// data/web/static/webp/info-6x.webp
// data/web/static/webp/info-8x.webp
// data/web/static/webp/info.webp
// data/web/static/webp/italic-2x.webp
// data/web/static/webp/italic-3x.webp
// data/web/static/webp/italic-4x.webp
// data/web/static/webp/italic-6x.webp
// data/web/static/webp/italic-8x.webp
// data/web/static/webp/italic.webp
// data/web/static/webp/justify-center-2x.webp
// data/web/static/webp/justify-center-3x.webp
// data/web/static/webp/justify-center-4x.webp
// data/web/static/webp/justify-center-6x.webp
// data/web/static/webp/justify-center-8x.webp
// data/web/static/webp/justify-center.webp
// data/web/static/webp/justify-left-2x.webp
// data/web/static/webp/justify-left-3x.webp
// data/web/static/webp/justify-left-4x.webp
// data/web/static/webp/justify-left-6x.webp
// data/web/static/webp/justify-left-8x.webp
// data/web/static/webp/justify-left.webp
// data/web/static/webp/justify-right-2x.webp
// data/web/static/webp/justify-right-3x.webp
// data/web/static/webp/justify-right-4x.webp
// data/web/static/webp/justify-right-6x.webp
// data/web/static/webp/justify-right-8x.webp
// data/web/static/webp/justify-right.webp
// data/web/static/webp/key-2x.webp
// data/web/static/webp/key-3x.webp
// data/web/static/webp/key-4x.webp
// data/web/static/webp/key-6x.webp
// data/web/static/webp/key-8x.webp
// data/web/static/webp/key.webp
// data/web/static/webp/laptop-2x.webp
// data/web/static/webp/laptop-3x.webp
// data/web/static/webp/laptop-4x.webp
// data/web/static/webp/laptop-6x.webp
// data/web/static/webp/laptop-8x.webp
// data/web/static/webp/laptop.webp
// data/web/static/webp/layers-2x.webp
// data/web/static/webp/layers-3x.webp
// data/web/static/webp/layers-4x.webp
// data/web/static/webp/layers-6x.webp
// data/web/static/webp/layers-8x.webp
// data/web/static/webp/layers.webp
// data/web/static/webp/lightbulb-2x.webp
// data/web/static/webp/lightbulb-3x.webp
// data/web/static/webp/lightbulb-4x.webp
// data/web/static/webp/lightbulb-6x.webp
// data/web/static/webp/lightbulb-8x.webp
// data/web/static/webp/lightbulb.webp
// data/web/static/webp/link-broken-2x.webp
// data/web/static/webp/link-broken-3x.webp
// data/web/static/webp/link-broken-4x.webp
// data/web/static/webp/link-broken-6x.webp
// data/web/static/webp/link-broken-8x.webp
// data/web/static/webp/link-broken.webp
// data/web/static/webp/link-intact-2x.webp
// data/web/static/webp/link-intact-3x.webp
// data/web/static/webp/link-intact-4x.webp
// data/web/static/webp/link-intact-6x.webp
// data/web/static/webp/link-intact-8x.webp
// data/web/static/webp/link-intact.webp
// data/web/static/webp/list-2x.webp
// data/web/static/webp/list-3x.webp
// data/web/static/webp/list-4x.webp
// data/web/static/webp/list-6x.webp
// data/web/static/webp/list-8x.webp
// data/web/static/webp/list-rich-2x.webp
// data/web/static/webp/list-rich-3x.webp
// data/web/static/webp/list-rich-4x.webp
// data/web/static/webp/list-rich-6x.webp
// data/web/static/webp/list-rich-8x.webp
// data/web/static/webp/list-rich.webp
// data/web/static/webp/list.webp
// data/web/static/webp/location-2x.webp
// data/web/static/webp/location-3x.webp
// data/web/static/webp/location-4x.webp
// data/web/static/webp/location-6x.webp
// data/web/static/webp/location-8x.webp
// data/web/static/webp/location.webp
// data/web/static/webp/lock-locked-2x.webp
// data/web/static/webp/lock-locked-3x.webp
// data/web/static/webp/lock-locked-4x.webp
// data/web/static/webp/lock-locked-6x.webp
// data/web/static/webp/lock-locked-8x.webp
// data/web/static/webp/lock-locked.webp
// data/web/static/webp/lock-unlocked-2x.webp
// data/web/static/webp/lock-unlocked-3x.webp
// data/web/static/webp/lock-unlocked-4x.webp
// data/web/static/webp/lock-unlocked-6x.webp
// data/web/static/webp/lock-unlocked-8x.webp
// data/web/static/webp/lock-unlocked.webp
// data/web/static/webp/loop-2x.webp
// data/web/static/webp/loop-3x.webp
// data/web/static/webp/loop-4x.webp
// data/web/static/webp/loop-6x.webp
// data/web/static/webp/loop-8x.webp
// data/web/static/webp/loop-circular-2x.webp
// data/web/static/webp/loop-circular-3x.webp
// data/web/static/webp/loop-circular-4x.webp
// data/web/static/webp/loop-circular-6x.webp
// data/web/static/webp/loop-circular-8x.webp
// data/web/static/webp/loop-circular.webp
// data/web/static/webp/loop-square-2x.webp
// data/web/static/webp/loop-square-3x.webp
// data/web/static/webp/loop-square-4x.webp
// data/web/static/webp/loop-square-6x.webp
// data/web/static/webp/loop-square-8x.webp
// data/web/static/webp/loop-square.webp
// data/web/static/webp/loop.webp
// data/web/static/webp/magnifying-glass-2x.webp
// data/web/static/webp/magnifying-glass-3x.webp
// data/web/static/webp/magnifying-glass-4x.webp
// data/web/static/webp/magnifying-glass-6x.webp
// data/web/static/webp/magnifying-glass-8x.webp
// data/web/static/webp/magnifying-glass.webp
// data/web/static/webp/map-2x.webp
// data/web/static/webp/map-3x.webp
// data/web/static/webp/map-4x.webp
// data/web/static/webp/map-6x.webp
// data/web/static/webp/map-8x.webp
// data/web/static/webp/map-marker-2x.webp
// data/web/static/webp/map-marker-3x.webp
// data/web/static/webp/map-marker-4x.webp
// data/web/static/webp/map-marker-6x.webp
// data/web/static/webp/map-marker-8x.webp
// data/web/static/webp/map-marker.webp
// data/web/static/webp/map.webp
// data/web/static/webp/media-pause-2x.webp
// data/web/static/webp/media-pause-3x.webp
// data/web/static/webp/media-pause-4x.webp
// data/web/static/webp/media-pause-6x.webp
// data/web/static/webp/media-pause-8x.webp
// data/web/static/webp/media-pause.webp
// data/web/static/webp/media-play-2x.webp
// data/web/static/webp/media-play-3x.webp
// data/web/static/webp/media-play-4x.webp
// data/web/static/webp/media-play-6x.webp
// data/web/static/webp/media-play-8x.webp
// data/web/static/webp/media-play.webp
// data/web/static/webp/media-record-2x.webp
// data/web/static/webp/media-record-3x.webp
// data/web/static/webp/media-record-4x.webp
// data/web/static/webp/media-record-6x.webp
// data/web/static/webp/media-record-8x.webp
// data/web/static/webp/media-record.webp
// data/web/static/webp/media-skip-backward-2x.webp
// data/web/static/webp/media-skip-backward-3x.webp
// data/web/static/webp/media-skip-backward-4x.webp
// data/web/static/webp/media-skip-backward-6x.webp
// data/web/static/webp/media-skip-backward-8x.webp
// data/web/static/webp/media-skip-backward.webp
// data/web/static/webp/media-skip-forward-2x.webp
// data/web/static/webp/media-skip-forward-3x.webp
// data/web/static/webp/media-skip-forward-4x.webp
// data/web/static/webp/media-skip-forward-6x.webp
// data/web/static/webp/media-skip-forward-8x.webp
// data/web/static/webp/media-skip-forward.webp
// data/web/static/webp/media-step-backward-2x.webp
// data/web/static/webp/media-step-backward-3x.webp
// data/web/static/webp/media-step-backward-4x.webp
// data/web/static/webp/media-step-backward-6x.webp
// data/web/static/webp/media-step-backward-8x.webp
// data/web/static/webp/media-step-backward.webp
// data/web/static/webp/media-step-forward-2x.webp
// data/web/static/webp/media-step-forward-3x.webp
// data/web/static/webp/media-step-forward-4x.webp
// data/web/static/webp/media-step-forward-6x.webp
// data/web/static/webp/media-step-forward-8x.webp
// data/web/static/webp/media-step-forward.webp
// data/web/static/webp/media-stop-2x.webp
// data/web/static/webp/media-stop-3x.webp
// data/web/static/webp/media-stop-4x.webp
// data/web/static/webp/media-stop-6x.webp
// data/web/static/webp/media-stop-8x.webp
// data/web/static/webp/media-stop.webp
// data/web/static/webp/medical-cross-2x.webp
// data/web/static/webp/medical-cross-3x.webp
// data/web/static/webp/medical-cross-4x.webp
// data/web/static/webp/medical-cross-6x.webp
// data/web/static/webp/medical-cross-8x.webp
// data/web/static/webp/medical-cross.webp
// data/web/static/webp/menu-2x.webp
// data/web/static/webp/menu-3x.webp
// data/web/static/webp/menu-4x.webp
// data/web/static/webp/menu-6x.webp
// data/web/static/webp/menu-8x.webp
// data/web/static/webp/menu.webp
// data/web/static/webp/microphone-2x.webp
// data/web/static/webp/microphone-3x.webp
// data/web/static/webp/microphone-4x.webp
// data/web/static/webp/microphone-6x.webp
// data/web/static/webp/microphone-8x.webp
// data/web/static/webp/microphone.webp
// data/web/static/webp/minus-2x.webp
// data/web/static/webp/minus-3x.webp
// data/web/static/webp/minus-4x.webp
// data/web/static/webp/minus-6x.webp
// data/web/static/webp/minus-8x.webp
// data/web/static/webp/minus.webp
// data/web/static/webp/monitor-2x.webp
// data/web/static/webp/monitor-3x.webp
// data/web/static/webp/monitor-4x.webp
// data/web/static/webp/monitor-6x.webp
// data/web/static/webp/monitor-8x.webp
// data/web/static/webp/monitor.webp
// data/web/static/webp/moon-2x.webp
// data/web/static/webp/moon-3x.webp
// data/web/static/webp/moon-4x.webp
// data/web/static/webp/moon-6x.webp
// data/web/static/webp/moon-8x.webp
// data/web/static/webp/moon.webp
// data/web/static/webp/move-2x.webp
// data/web/static/webp/move-3x.webp
// data/web/static/webp/move-4x.webp
// data/web/static/webp/move-6x.webp
// data/web/static/webp/move-8x.webp
// data/web/static/webp/move.webp
// data/web/static/webp/musical-note-2x.webp
// data/web/static/webp/musical-note-3x.webp
// data/web/static/webp/musical-note-4x.webp
// data/web/static/webp/musical-note-6x.webp
// data/web/static/webp/musical-note-8x.webp
// data/web/static/webp/musical-note.webp
// data/web/static/webp/paperclip-2x.webp
// data/web/static/webp/paperclip-3x.webp
// data/web/static/webp/paperclip-4x.webp
// data/web/static/webp/paperclip-6x.webp
// data/web/static/webp/paperclip-8x.webp
// data/web/static/webp/paperclip.webp
// data/web/static/webp/pencil-2x.webp
// data/web/static/webp/pencil-3x.webp
// data/web/static/webp/pencil-4x.webp
// data/web/static/webp/pencil-6x.webp
// data/web/static/webp/pencil-8x.webp
// data/web/static/webp/pencil.webp
// data/web/static/webp/people-2x.webp
// data/web/static/webp/people-3x.webp
// data/web/static/webp/people-4x.webp
// data/web/static/webp/people-6x.webp
// data/web/static/webp/people-8x.webp
// data/web/static/webp/people.webp
// data/web/static/webp/person-2x.webp
// data/web/static/webp/person-3x.webp
// data/web/static/webp/person-4x.webp
// data/web/static/webp/person-6x.webp
// data/web/static/webp/person-8x.webp
// data/web/static/webp/person.webp
// data/web/static/webp/phone-2x.webp
// data/web/static/webp/phone-3x.webp
// data/web/static/webp/phone-4x.webp
// data/web/static/webp/phone-6x.webp
// data/web/static/webp/phone-8x.webp
// data/web/static/webp/phone.webp
// data/web/static/webp/pie-chart-2x.webp
// data/web/static/webp/pie-chart-3x.webp
// data/web/static/webp/pie-chart-4x.webp
// data/web/static/webp/pie-chart-6x.webp
// data/web/static/webp/pie-chart-8x.webp
// data/web/static/webp/pie-chart.webp
// data/web/static/webp/pin-2x.webp
// data/web/static/webp/pin-3x.webp
// data/web/static/webp/pin-4x.webp
// data/web/static/webp/pin-6x.webp
// data/web/static/webp/pin-8x.webp
// data/web/static/webp/pin.webp
// data/web/static/webp/play-circle-2x.webp
// data/web/static/webp/play-circle-3x.webp
// data/web/static/webp/play-circle-4x.webp
// data/web/static/webp/play-circle-6x.webp
// data/web/static/webp/play-circle-8x.webp
// data/web/static/webp/play-circle.webp
// data/web/static/webp/plus-2x.webp
// data/web/static/webp/plus-3x.webp
// data/web/static/webp/plus-4x.webp
// data/web/static/webp/plus-6x.webp
// data/web/static/webp/plus-8x.webp
// data/web/static/webp/plus.webp
// data/web/static/webp/power-standby-2x.webp
// data/web/static/webp/power-standby-3x.webp
// data/web/static/webp/power-standby-4x.webp
// data/web/static/webp/power-standby-6x.webp
// data/web/static/webp/power-standby-8x.webp
// data/web/static/webp/power-standby.webp
// data/web/static/webp/print-2x.webp
// data/web/static/webp/print-3x.webp
// data/web/static/webp/print-4x.webp
// data/web/static/webp/print-6x.webp
// data/web/static/webp/print-8x.webp
// data/web/static/webp/print.webp
// data/web/static/webp/project-2x.webp
// data/web/static/webp/project-3x.webp
// data/web/static/webp/project-4x.webp
// data/web/static/webp/project-6x.webp
// data/web/static/webp/project-8x.webp
// data/web/static/webp/project.webp
// data/web/static/webp/pulse-2x.webp
// data/web/static/webp/pulse-3x.webp
// data/web/static/webp/pulse-4x.webp
// data/web/static/webp/pulse-6x.webp
// data/web/static/webp/pulse-8x.webp
// data/web/static/webp/pulse.webp
// data/web/static/webp/puzzle-piece-2x.webp
// data/web/static/webp/puzzle-piece-3x.webp
// data/web/static/webp/puzzle-piece-4x.webp
// data/web/static/webp/puzzle-piece-6x.webp
// data/web/static/webp/puzzle-piece-8x.webp
// data/web/static/webp/puzzle-piece.webp
// data/web/static/webp/question-mark-2x.webp
// data/web/static/webp/question-mark-3x.webp
// data/web/static/webp/question-mark-4x.webp
// data/web/static/webp/question-mark-6x.webp
// data/web/static/webp/question-mark-8x.webp
// data/web/static/webp/question-mark.webp
// data/web/static/webp/rain-2x.webp
// data/web/static/webp/rain-3x.webp
// data/web/static/webp/rain-4x.webp
// data/web/static/webp/rain-6x.webp
// data/web/static/webp/rain-8x.webp
// data/web/static/webp/rain.webp
// data/web/static/webp/random-2x.webp
// data/web/static/webp/random-3x.webp
// data/web/static/webp/random-4x.webp
// data/web/static/webp/random-6x.webp
// data/web/static/webp/random-8x.webp
// data/web/static/webp/random.webp
// data/web/static/webp/reload-2x.webp
// data/web/static/webp/reload-3x.webp
// data/web/static/webp/reload-4x.webp
// data/web/static/webp/reload-6x.webp
// data/web/static/webp/reload-8x.webp
// data/web/static/webp/reload.webp
// data/web/static/webp/resize-both-2x.webp
// data/web/static/webp/resize-both-3x.webp
// data/web/static/webp/resize-both-4x.webp
// data/web/static/webp/resize-both-6x.webp
// data/web/static/webp/resize-both-8x.webp
// data/web/static/webp/resize-both.webp
// data/web/static/webp/resize-height-2x.webp
// data/web/static/webp/resize-height-3x.webp
// data/web/static/webp/resize-height-4x.webp
// data/web/static/webp/resize-height-6x.webp
// data/web/static/webp/resize-height-8x.webp
// data/web/static/webp/resize-height.webp
// data/web/static/webp/resize-width-2x.webp
// data/web/static/webp/resize-width-3x.webp
// data/web/static/webp/resize-width-4x.webp
// data/web/static/webp/resize-width-6x.webp
// data/web/static/webp/resize-width-8x.webp
// data/web/static/webp/resize-width.webp
// data/web/static/webp/rss-2x.webp
// data/web/static/webp/rss-3x.webp
// data/web/static/webp/rss-4x.webp
// data/web/static/webp/rss-6x.webp
// data/web/static/webp/rss-8x.webp
// data/web/static/webp/rss-alt-2x.webp
// data/web/static/webp/rss-alt-3x.webp
// data/web/static/webp/rss-alt-4x.webp
// data/web/static/webp/rss-alt-6x.webp
// data/web/static/webp/rss-alt-8x.webp
// data/web/static/webp/rss-alt.webp
// data/web/static/webp/rss.webp
// data/web/static/webp/script-2x.webp
// data/web/static/webp/script-3x.webp
// data/web/static/webp/script-4x.webp
// data/web/static/webp/script-6x.webp
// data/web/static/webp/script-8x.webp
// data/web/static/webp/script.webp
// data/web/static/webp/share-2x.webp
// data/web/static/webp/share-3x.webp
// data/web/static/webp/share-4x.webp
// data/web/static/webp/share-6x.webp
// data/web/static/webp/share-8x.webp
// data/web/static/webp/share-boxed-2x.webp
// data/web/static/webp/share-boxed-3x.webp
// data/web/static/webp/share-boxed-4x.webp
// data/web/static/webp/share-boxed-6x.webp
// data/web/static/webp/share-boxed-8x.webp
// data/web/static/webp/share-boxed.webp
// data/web/static/webp/share.webp
// data/web/static/webp/shield-2x.webp
// data/web/static/webp/shield-3x.webp
// data/web/static/webp/shield-4x.webp
// data/web/static/webp/shield-6x.webp
// data/web/static/webp/shield-8x.webp
// data/web/static/webp/shield.webp
// data/web/static/webp/signal-2x.webp
// data/web/static/webp/signal-3x.webp
// data/web/static/webp/signal-4x.webp
// data/web/static/webp/signal-6x.webp
// data/web/static/webp/signal-8x.webp
// data/web/static/webp/signal.webp
// data/web/static/webp/signpost-2x.webp
// data/web/static/webp/signpost-3x.webp
// data/web/static/webp/signpost-4x.webp
// data/web/static/webp/signpost-6x.webp
// data/web/static/webp/signpost-8x.webp
// data/web/static/webp/signpost.webp
// data/web/static/webp/sort-ascending-2x.webp
// data/web/static/webp/sort-ascending-3x.webp
// data/web/static/webp/sort-ascending-4x.webp
// data/web/static/webp/sort-ascending-6x.webp
// data/web/static/webp/sort-ascending-8x.webp
// data/web/static/webp/sort-ascending.webp
// data/web/static/webp/sort-descending-2x.webp
// data/web/static/webp/sort-descending-3x.webp
// data/web/static/webp/sort-descending-4x.webp
// data/web/static/webp/sort-descending-6x.webp
// data/web/static/webp/sort-descending-8x.webp
// data/web/static/webp/sort-descending.webp
// data/web/static/webp/spreadsheet-2x.webp
// data/web/static/webp/spreadsheet-3x.webp
// data/web/static/webp/spreadsheet-4x.webp
// data/web/static/webp/spreadsheet-6x.webp
// data/web/static/webp/spreadsheet-8x.webp
// data/web/static/webp/spreadsheet.webp
// data/web/static/webp/star-2x.webp
// data/web/static/webp/star-3x.webp
// data/web/static/webp/star-4x.webp
// data/web/static/webp/star-6x.webp
// data/web/static/webp/star-8x.webp
// data/web/static/webp/star.webp
// data/web/static/webp/sun-2x.webp
// data/web/static/webp/sun-3x.webp
// data/web/static/webp/sun-4x.webp
// data/web/static/webp/sun-6x.webp
// data/web/static/webp/sun-8x.webp
// data/web/static/webp/sun.webp
// data/web/static/webp/tablet-2x.webp
// data/web/static/webp/tablet-3x.webp
// data/web/static/webp/tablet-4x.webp
// data/web/static/webp/tablet-6x.webp
// data/web/static/webp/tablet-8x.webp
// data/web/static/webp/tablet.webp
// data/web/static/webp/tag-2x.webp
// data/web/static/webp/tag-3x.webp
// data/web/static/webp/tag-4x.webp
// data/web/static/webp/tag-6x.webp
// data/web/static/webp/tag-8x.webp
// data/web/static/webp/tag.webp
// data/web/static/webp/tags-2x.webp
// data/web/static/webp/tags-3x.webp
// data/web/static/webp/tags-4x.webp
// data/web/static/webp/tags-6x.webp
// data/web/static/webp/tags-8x.webp
// data/web/static/webp/tags.webp
// data/web/static/webp/target-2x.webp
// data/web/static/webp/target-3x.webp
// data/web/static/webp/target-4x.webp
// data/web/static/webp/target-6x.webp
// data/web/static/webp/target-8x.webp
// data/web/static/webp/target.webp
// data/web/static/webp/task-2x.webp
// data/web/static/webp/task-3x.webp
// data/web/static/webp/task-4x.webp
// data/web/static/webp/task-6x.webp
// data/web/static/webp/task-8x.webp
// data/web/static/webp/task.webp
// data/web/static/webp/terminal-2x.webp
// data/web/static/webp/terminal-3x.webp
// data/web/static/webp/terminal-4x.webp
// data/web/static/webp/terminal-6x.webp
// data/web/static/webp/terminal-8x.webp
// data/web/static/webp/terminal.webp
// data/web/static/webp/text-2x.webp
// data/web/static/webp/text-3x.webp
// data/web/static/webp/text-4x.webp
// data/web/static/webp/text-6x.webp
// data/web/static/webp/text-8x.webp
// data/web/static/webp/text.webp
// data/web/static/webp/thumb-down-2x.webp
// data/web/static/webp/thumb-down-3x.webp
// data/web/static/webp/thumb-down-4x.webp
// data/web/static/webp/thumb-down-6x.webp
// data/web/static/webp/thumb-down-8x.webp
// data/web/static/webp/thumb-down.webp
// data/web/static/webp/thumb-up-2x.webp
// data/web/static/webp/thumb-up-3x.webp
// data/web/static/webp/thumb-up-4x.webp
// data/web/static/webp/thumb-up-6x.webp
// data/web/static/webp/thumb-up-8x.webp
// data/web/static/webp/thumb-up.webp
// data/web/static/webp/timer-2x.webp
// data/web/static/webp/timer-3x.webp
// data/web/static/webp/timer-4x.webp
// data/web/static/webp/timer-6x.webp
// data/web/static/webp/timer-8x.webp
// data/web/static/webp/timer.webp
// data/web/static/webp/transfer-2x.webp
// data/web/static/webp/transfer-3x.webp
// data/web/static/webp/transfer-4x.webp
// data/web/static/webp/transfer-6x.webp
// data/web/static/webp/transfer-8x.webp
// data/web/static/webp/transfer.webp
// data/web/static/webp/trash-2x.webp
// data/web/static/webp/trash-3x.webp
// data/web/static/webp/trash-4x.webp
// data/web/static/webp/trash-6x.webp
// data/web/static/webp/trash-8x.webp
// data/web/static/webp/trash.webp
// data/web/static/webp/underline-2x.webp
// data/web/static/webp/underline-3x.webp
// data/web/static/webp/underline-4x.webp
// data/web/static/webp/underline-6x.webp
// data/web/static/webp/underline-8x.webp
// data/web/static/webp/underline.webp
// data/web/static/webp/vertical-align-bottom-2x.webp
// data/web/static/webp/vertical-align-bottom-3x.webp
// data/web/static/webp/vertical-align-bottom-4x.webp
// data/web/static/webp/vertical-align-bottom-6x.webp
// data/web/static/webp/vertical-align-bottom-8x.webp
// data/web/static/webp/vertical-align-bottom.webp
// data/web/static/webp/vertical-align-center-2x.webp
// data/web/static/webp/vertical-align-center-3x.webp
// data/web/static/webp/vertical-align-center-4x.webp
// data/web/static/webp/vertical-align-center-6x.webp
// data/web/static/webp/vertical-align-center-8x.webp
// data/web/static/webp/vertical-align-center.webp
// data/web/static/webp/vertical-align-top-2x.webp
// data/web/static/webp/vertical-align-top-3x.webp
// data/web/static/webp/vertical-align-top-4x.webp
// data/web/static/webp/vertical-align-top-6x.webp
// data/web/static/webp/vertical-align-top-8x.webp
// data/web/static/webp/vertical-align-top.webp
// data/web/static/webp/video-2x.webp
// data/web/static/webp/video-3x.webp
// data/web/static/webp/video-4x.webp
// data/web/static/webp/video-6x.webp
// data/web/static/webp/video-8x.webp
// data/web/static/webp/video.webp
// data/web/static/webp/volume-high-2x.webp
// data/web/static/webp/volume-high-3x.webp
// data/web/static/webp/volume-high-4x.webp
// data/web/static/webp/volume-high-6x.webp
// data/web/static/webp/volume-high-8x.webp
// data/web/static/webp/volume-high.webp
// data/web/static/webp/volume-low-2x.webp
// data/web/static/webp/volume-low-3x.webp
// data/web/static/webp/volume-low-4x.webp
// data/web/static/webp/volume-low-6x.webp
// data/web/static/webp/volume-low-8x.webp
// data/web/static/webp/volume-low.webp
// data/web/static/webp/volume-off-2x.webp
// data/web/static/webp/volume-off-3x.webp
// data/web/static/webp/volume-off-4x.webp
// data/web/static/webp/volume-off-6x.webp
// data/web/static/webp/volume-off-8x.webp
// data/web/static/webp/volume-off.webp
// data/web/static/webp/warning-2x.webp
// data/web/static/webp/warning-3x.webp
// data/web/static/webp/warning-4x.webp
// data/web/static/webp/warning-6x.webp
// data/web/static/webp/warning-8x.webp
// data/web/static/webp/warning.webp
// data/web/static/webp/wifi-2x.webp
// data/web/static/webp/wifi-3x.webp
// data/web/static/webp/wifi-4x.webp
// data/web/static/webp/wifi-6x.webp
// data/web/static/webp/wifi-8x.webp
// data/web/static/webp/wifi.webp
// data/web/static/webp/wrench-2x.webp
// data/web/static/webp/wrench-3x.webp
// data/web/static/webp/wrench-4x.webp
// data/web/static/webp/wrench-6x.webp
// data/web/static/webp/wrench-8x.webp
// data/web/static/webp/wrench.webp
// data/web/static/webp/x-2x.webp
// data/web/static/webp/x-3x.webp
// data/web/static/webp/x-4x.webp
// data/web/static/webp/x-6x.webp
// data/web/static/webp/x-8x.webp
// data/web/static/webp/x.webp
// data/web/static/webp/yen-2x.webp
// data/web/static/webp/yen-3x.webp
// data/web/static/webp/yen-4x.webp
// data/web/static/webp/yen-6x.webp
// data/web/static/webp/yen-8x.webp
// data/web/static/webp/yen.webp
// data/web/static/webp/zoom-in-2x.webp
// data/web/static/webp/zoom-in-3x.webp
// data/web/static/webp/zoom-in-4x.webp
// data/web/static/webp/zoom-in-6x.webp
// data/web/static/webp/zoom-in-8x.webp
// data/web/static/webp/zoom-in.webp
// data/web/static/webp/zoom-out-2x.webp
// data/web/static/webp/zoom-out-3x.webp
// data/web/static/webp/zoom-out-4x.webp
// data/web/static/webp/zoom-out-6x.webp
// data/web/static/webp/zoom-out-8x.webp
// data/web/static/webp/zoom-out.webp
// data/web/templates/403.tpl
// data/web/templates/layout.tpl
// data/web/templates/node-children.tpl
// data/web/templates/node-content.tpl
// DO NOT EDIT!

// +build !release

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// dataHelpConfig reads file data from disk. It returns an error on failure.
func dataHelpConfig() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/help/config"
	name := "data/help/config"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataHelpDownload reads file data from disk. It returns an error on failure.
func dataHelpDownload() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/help/download"
	name := "data/help/download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataHelpHelp reads file data from disk. It returns an error on failure.
func dataHelpHelp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/help/help"
	name := "data/help/help"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataReferenceEng reads file data from disk. It returns an error on failure.
func dataReferenceEng() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/reference/eng"
	name := "data/reference/eng"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataReferenceExample reads file data from disk. It returns an error on failure.
func dataReferenceExample() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/reference/example"
	name := "data/reference/example"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticCssStylesheetCss reads file data from disk. It returns an error on failure.
func dataWebStaticCssStylesheetCss() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/css/stylesheet.css"
	name := "data/web/static/css/stylesheet.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticFaviconIco reads file data from disk. It returns an error on failure.
func dataWebStaticFaviconIco() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/favicon.ico"
	name := "data/web/static/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgAccountLoginSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgAccountLoginSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/account-login.svg"
	name := "data/web/static/svg/account-login.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgAccountLogoutSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgAccountLogoutSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/account-logout.svg"
	name := "data/web/static/svg/account-logout.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgActionRedoSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgActionRedoSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/action-redo.svg"
	name := "data/web/static/svg/action-redo.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgActionUndoSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgActionUndoSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/action-undo.svg"
	name := "data/web/static/svg/action-undo.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgAlignCenterSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgAlignCenterSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/align-center.svg"
	name := "data/web/static/svg/align-center.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgAlignLeftSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgAlignLeftSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/align-left.svg"
	name := "data/web/static/svg/align-left.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgAlignRightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgAlignRightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/align-right.svg"
	name := "data/web/static/svg/align-right.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgApertureSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgApertureSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/aperture.svg"
	name := "data/web/static/svg/aperture.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowBottomSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowBottomSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-bottom.svg"
	name := "data/web/static/svg/arrow-bottom.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowCircleBottomSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowCircleBottomSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-circle-bottom.svg"
	name := "data/web/static/svg/arrow-circle-bottom.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowCircleLeftSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowCircleLeftSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-circle-left.svg"
	name := "data/web/static/svg/arrow-circle-left.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowCircleRightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowCircleRightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-circle-right.svg"
	name := "data/web/static/svg/arrow-circle-right.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowCircleTopSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowCircleTopSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-circle-top.svg"
	name := "data/web/static/svg/arrow-circle-top.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowLeftSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowLeftSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-left.svg"
	name := "data/web/static/svg/arrow-left.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowRightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowRightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-right.svg"
	name := "data/web/static/svg/arrow-right.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowThickBottomSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowThickBottomSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-thick-bottom.svg"
	name := "data/web/static/svg/arrow-thick-bottom.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowThickLeftSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowThickLeftSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-thick-left.svg"
	name := "data/web/static/svg/arrow-thick-left.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowThickRightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowThickRightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-thick-right.svg"
	name := "data/web/static/svg/arrow-thick-right.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowThickTopSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowThickTopSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-thick-top.svg"
	name := "data/web/static/svg/arrow-thick-top.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgArrowTopSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgArrowTopSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/arrow-top.svg"
	name := "data/web/static/svg/arrow-top.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgAudioSpectrumSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgAudioSpectrumSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/audio-spectrum.svg"
	name := "data/web/static/svg/audio-spectrum.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgAudioSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgAudioSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/audio.svg"
	name := "data/web/static/svg/audio.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBadgeSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBadgeSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/badge.svg"
	name := "data/web/static/svg/badge.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBanSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBanSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/ban.svg"
	name := "data/web/static/svg/ban.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBarChartSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBarChartSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/bar-chart.svg"
	name := "data/web/static/svg/bar-chart.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBasketSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBasketSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/basket.svg"
	name := "data/web/static/svg/basket.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBatteryEmptySvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBatteryEmptySvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/battery-empty.svg"
	name := "data/web/static/svg/battery-empty.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBatteryFullSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBatteryFullSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/battery-full.svg"
	name := "data/web/static/svg/battery-full.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBeakerSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBeakerSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/beaker.svg"
	name := "data/web/static/svg/beaker.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBellSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBellSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/bell.svg"
	name := "data/web/static/svg/bell.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBluetoothSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBluetoothSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/bluetooth.svg"
	name := "data/web/static/svg/bluetooth.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBoldSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBoldSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/bold.svg"
	name := "data/web/static/svg/bold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBoltSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBoltSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/bolt.svg"
	name := "data/web/static/svg/bolt.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBookSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBookSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/book.svg"
	name := "data/web/static/svg/book.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBookmarkSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBookmarkSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/bookmark.svg"
	name := "data/web/static/svg/bookmark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBoxSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBoxSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/box.svg"
	name := "data/web/static/svg/box.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBriefcaseSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBriefcaseSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/briefcase.svg"
	name := "data/web/static/svg/briefcase.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBritishPoundSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBritishPoundSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/british-pound.svg"
	name := "data/web/static/svg/british-pound.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBrowserSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBrowserSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/browser.svg"
	name := "data/web/static/svg/browser.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBrushSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBrushSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/brush.svg"
	name := "data/web/static/svg/brush.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBugSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBugSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/bug.svg"
	name := "data/web/static/svg/bug.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgBullhornSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgBullhornSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/bullhorn.svg"
	name := "data/web/static/svg/bullhorn.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCalculatorSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCalculatorSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/calculator.svg"
	name := "data/web/static/svg/calculator.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCalendarSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCalendarSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/calendar.svg"
	name := "data/web/static/svg/calendar.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCameraSlrSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCameraSlrSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/camera-slr.svg"
	name := "data/web/static/svg/camera-slr.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCaretBottomSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCaretBottomSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/caret-bottom.svg"
	name := "data/web/static/svg/caret-bottom.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCaretLeftSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCaretLeftSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/caret-left.svg"
	name := "data/web/static/svg/caret-left.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCaretRightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCaretRightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/caret-right.svg"
	name := "data/web/static/svg/caret-right.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCaretTopSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCaretTopSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/caret-top.svg"
	name := "data/web/static/svg/caret-top.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCartSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCartSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/cart.svg"
	name := "data/web/static/svg/cart.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgChatSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgChatSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/chat.svg"
	name := "data/web/static/svg/chat.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCheckSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCheckSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/check.svg"
	name := "data/web/static/svg/check.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgChevronBottomSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgChevronBottomSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/chevron-bottom.svg"
	name := "data/web/static/svg/chevron-bottom.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgChevronLeftSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgChevronLeftSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/chevron-left.svg"
	name := "data/web/static/svg/chevron-left.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgChevronRightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgChevronRightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/chevron-right.svg"
	name := "data/web/static/svg/chevron-right.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgChevronTopSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgChevronTopSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/chevron-top.svg"
	name := "data/web/static/svg/chevron-top.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCircleCheckSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCircleCheckSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/circle-check.svg"
	name := "data/web/static/svg/circle-check.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCircleXSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCircleXSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/circle-x.svg"
	name := "data/web/static/svg/circle-x.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgClipboardSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgClipboardSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/clipboard.svg"
	name := "data/web/static/svg/clipboard.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgClockSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgClockSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/clock.svg"
	name := "data/web/static/svg/clock.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCloudDownloadSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCloudDownloadSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/cloud-download.svg"
	name := "data/web/static/svg/cloud-download.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCloudUploadSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCloudUploadSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/cloud-upload.svg"
	name := "data/web/static/svg/cloud-upload.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCloudSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCloudSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/cloud.svg"
	name := "data/web/static/svg/cloud.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCloudySvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCloudySvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/cloudy.svg"
	name := "data/web/static/svg/cloudy.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCodeSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCodeSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/code.svg"
	name := "data/web/static/svg/code.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCogSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCogSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/cog.svg"
	name := "data/web/static/svg/cog.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCollapseDownSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCollapseDownSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/collapse-down.svg"
	name := "data/web/static/svg/collapse-down.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCollapseLeftSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCollapseLeftSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/collapse-left.svg"
	name := "data/web/static/svg/collapse-left.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCollapseRightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCollapseRightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/collapse-right.svg"
	name := "data/web/static/svg/collapse-right.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCollapseUpSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCollapseUpSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/collapse-up.svg"
	name := "data/web/static/svg/collapse-up.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCommandSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCommandSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/command.svg"
	name := "data/web/static/svg/command.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCommentSquareSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCommentSquareSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/comment-square.svg"
	name := "data/web/static/svg/comment-square.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCompassSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCompassSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/compass.svg"
	name := "data/web/static/svg/compass.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgContrastSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgContrastSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/contrast.svg"
	name := "data/web/static/svg/contrast.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCopywritingSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCopywritingSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/copywriting.svg"
	name := "data/web/static/svg/copywriting.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCreditCardSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCreditCardSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/credit-card.svg"
	name := "data/web/static/svg/credit-card.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgCropSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgCropSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/crop.svg"
	name := "data/web/static/svg/crop.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDashboardSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDashboardSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/dashboard.svg"
	name := "data/web/static/svg/dashboard.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDataTransferDownloadSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDataTransferDownloadSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/data-transfer-download.svg"
	name := "data/web/static/svg/data-transfer-download.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDataTransferUploadSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDataTransferUploadSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/data-transfer-upload.svg"
	name := "data/web/static/svg/data-transfer-upload.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDeleteSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDeleteSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/delete.svg"
	name := "data/web/static/svg/delete.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDialSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDialSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/dial.svg"
	name := "data/web/static/svg/dial.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDocumentSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDocumentSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/document.svg"
	name := "data/web/static/svg/document.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDollarSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDollarSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/dollar.svg"
	name := "data/web/static/svg/dollar.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDoubleQuoteSansLeftSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDoubleQuoteSansLeftSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/double-quote-sans-left.svg"
	name := "data/web/static/svg/double-quote-sans-left.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDoubleQuoteSansRightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDoubleQuoteSansRightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/double-quote-sans-right.svg"
	name := "data/web/static/svg/double-quote-sans-right.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDoubleQuoteSerifLeftSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDoubleQuoteSerifLeftSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/double-quote-serif-left.svg"
	name := "data/web/static/svg/double-quote-serif-left.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDoubleQuoteSerifRightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDoubleQuoteSerifRightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/double-quote-serif-right.svg"
	name := "data/web/static/svg/double-quote-serif-right.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgDropletSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgDropletSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/droplet.svg"
	name := "data/web/static/svg/droplet.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgEjectSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgEjectSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/eject.svg"
	name := "data/web/static/svg/eject.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgElevatorSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgElevatorSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/elevator.svg"
	name := "data/web/static/svg/elevator.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgEllipsesSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgEllipsesSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/ellipses.svg"
	name := "data/web/static/svg/ellipses.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgEnvelopeClosedSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgEnvelopeClosedSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/envelope-closed.svg"
	name := "data/web/static/svg/envelope-closed.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgEnvelopeOpenSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgEnvelopeOpenSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/envelope-open.svg"
	name := "data/web/static/svg/envelope-open.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgEuroSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgEuroSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/euro.svg"
	name := "data/web/static/svg/euro.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgExcerptSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgExcerptSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/excerpt.svg"
	name := "data/web/static/svg/excerpt.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgExpandDownSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgExpandDownSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/expand-down.svg"
	name := "data/web/static/svg/expand-down.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgExpandLeftSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgExpandLeftSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/expand-left.svg"
	name := "data/web/static/svg/expand-left.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgExpandRightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgExpandRightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/expand-right.svg"
	name := "data/web/static/svg/expand-right.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgExpandUpSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgExpandUpSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/expand-up.svg"
	name := "data/web/static/svg/expand-up.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgExternalLinkSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgExternalLinkSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/external-link.svg"
	name := "data/web/static/svg/external-link.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgEyeSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgEyeSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/eye.svg"
	name := "data/web/static/svg/eye.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgEyedropperSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgEyedropperSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/eyedropper.svg"
	name := "data/web/static/svg/eyedropper.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgFileSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgFileSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/file.svg"
	name := "data/web/static/svg/file.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgFireSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgFireSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/fire.svg"
	name := "data/web/static/svg/fire.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgFlagSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgFlagSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/flag.svg"
	name := "data/web/static/svg/flag.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgFlashSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgFlashSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/flash.svg"
	name := "data/web/static/svg/flash.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgFolderSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgFolderSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/folder.svg"
	name := "data/web/static/svg/folder.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgForkSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgForkSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/fork.svg"
	name := "data/web/static/svg/fork.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgFullscreenEnterSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgFullscreenEnterSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/fullscreen-enter.svg"
	name := "data/web/static/svg/fullscreen-enter.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgFullscreenExitSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgFullscreenExitSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/fullscreen-exit.svg"
	name := "data/web/static/svg/fullscreen-exit.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgGlobeSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgGlobeSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/globe.svg"
	name := "data/web/static/svg/globe.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgGraphSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgGraphSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/graph.svg"
	name := "data/web/static/svg/graph.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgGridFourUpSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgGridFourUpSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/grid-four-up.svg"
	name := "data/web/static/svg/grid-four-up.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgGridThreeUpSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgGridThreeUpSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/grid-three-up.svg"
	name := "data/web/static/svg/grid-three-up.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgGridTwoUpSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgGridTwoUpSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/grid-two-up.svg"
	name := "data/web/static/svg/grid-two-up.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgHardDriveSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgHardDriveSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/hard-drive.svg"
	name := "data/web/static/svg/hard-drive.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgHeaderSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgHeaderSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/header.svg"
	name := "data/web/static/svg/header.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgHeadphonesSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgHeadphonesSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/headphones.svg"
	name := "data/web/static/svg/headphones.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgHeartSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgHeartSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/heart.svg"
	name := "data/web/static/svg/heart.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgHomeSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgHomeSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/home.svg"
	name := "data/web/static/svg/home.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgImageSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgImageSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/image.svg"
	name := "data/web/static/svg/image.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgInboxSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgInboxSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/inbox.svg"
	name := "data/web/static/svg/inbox.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgInfinitySvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgInfinitySvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/infinity.svg"
	name := "data/web/static/svg/infinity.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgInfoSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgInfoSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/info.svg"
	name := "data/web/static/svg/info.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgItalicSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgItalicSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/italic.svg"
	name := "data/web/static/svg/italic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgJustifyCenterSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgJustifyCenterSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/justify-center.svg"
	name := "data/web/static/svg/justify-center.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgJustifyLeftSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgJustifyLeftSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/justify-left.svg"
	name := "data/web/static/svg/justify-left.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgJustifyRightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgJustifyRightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/justify-right.svg"
	name := "data/web/static/svg/justify-right.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgKeySvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgKeySvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/key.svg"
	name := "data/web/static/svg/key.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgLaptopSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgLaptopSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/laptop.svg"
	name := "data/web/static/svg/laptop.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgLayersSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgLayersSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/layers.svg"
	name := "data/web/static/svg/layers.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgLightbulbSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgLightbulbSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/lightbulb.svg"
	name := "data/web/static/svg/lightbulb.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgLinkBrokenSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgLinkBrokenSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/link-broken.svg"
	name := "data/web/static/svg/link-broken.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgLinkIntactSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgLinkIntactSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/link-intact.svg"
	name := "data/web/static/svg/link-intact.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgListRichSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgListRichSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/list-rich.svg"
	name := "data/web/static/svg/list-rich.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgListSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgListSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/list.svg"
	name := "data/web/static/svg/list.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgLocationSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgLocationSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/location.svg"
	name := "data/web/static/svg/location.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgLockLockedSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgLockLockedSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/lock-locked.svg"
	name := "data/web/static/svg/lock-locked.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgLockUnlockedSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgLockUnlockedSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/lock-unlocked.svg"
	name := "data/web/static/svg/lock-unlocked.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgLoopCircularSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgLoopCircularSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/loop-circular.svg"
	name := "data/web/static/svg/loop-circular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgLoopSquareSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgLoopSquareSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/loop-square.svg"
	name := "data/web/static/svg/loop-square.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgLoopSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgLoopSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/loop.svg"
	name := "data/web/static/svg/loop.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMagnifyingGlassSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMagnifyingGlassSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/magnifying-glass.svg"
	name := "data/web/static/svg/magnifying-glass.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMapMarkerSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMapMarkerSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/map-marker.svg"
	name := "data/web/static/svg/map-marker.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMapSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMapSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/map.svg"
	name := "data/web/static/svg/map.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMediaPauseSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMediaPauseSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/media-pause.svg"
	name := "data/web/static/svg/media-pause.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMediaPlaySvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMediaPlaySvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/media-play.svg"
	name := "data/web/static/svg/media-play.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMediaRecordSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMediaRecordSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/media-record.svg"
	name := "data/web/static/svg/media-record.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMediaSkipBackwardSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMediaSkipBackwardSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/media-skip-backward.svg"
	name := "data/web/static/svg/media-skip-backward.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMediaSkipForwardSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMediaSkipForwardSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/media-skip-forward.svg"
	name := "data/web/static/svg/media-skip-forward.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMediaStepBackwardSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMediaStepBackwardSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/media-step-backward.svg"
	name := "data/web/static/svg/media-step-backward.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMediaStepForwardSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMediaStepForwardSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/media-step-forward.svg"
	name := "data/web/static/svg/media-step-forward.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMediaStopSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMediaStopSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/media-stop.svg"
	name := "data/web/static/svg/media-stop.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMedicalCrossSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMedicalCrossSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/medical-cross.svg"
	name := "data/web/static/svg/medical-cross.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMenuSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMenuSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/menu.svg"
	name := "data/web/static/svg/menu.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMicrophoneSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMicrophoneSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/microphone.svg"
	name := "data/web/static/svg/microphone.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMinusSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMinusSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/minus.svg"
	name := "data/web/static/svg/minus.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMonitorSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMonitorSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/monitor.svg"
	name := "data/web/static/svg/monitor.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMoonSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMoonSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/moon.svg"
	name := "data/web/static/svg/moon.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMoveSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMoveSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/move.svg"
	name := "data/web/static/svg/move.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgMusicalNoteSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgMusicalNoteSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/musical-note.svg"
	name := "data/web/static/svg/musical-note.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPaperclipSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPaperclipSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/paperclip.svg"
	name := "data/web/static/svg/paperclip.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPencilSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPencilSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/pencil.svg"
	name := "data/web/static/svg/pencil.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPeopleSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPeopleSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/people.svg"
	name := "data/web/static/svg/people.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPersonSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPersonSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/person.svg"
	name := "data/web/static/svg/person.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPhoneSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPhoneSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/phone.svg"
	name := "data/web/static/svg/phone.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPieChartSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPieChartSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/pie-chart.svg"
	name := "data/web/static/svg/pie-chart.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPinSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPinSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/pin.svg"
	name := "data/web/static/svg/pin.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPlayCircleSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPlayCircleSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/play-circle.svg"
	name := "data/web/static/svg/play-circle.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPlusSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPlusSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/plus.svg"
	name := "data/web/static/svg/plus.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPowerStandbySvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPowerStandbySvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/power-standby.svg"
	name := "data/web/static/svg/power-standby.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPrintSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPrintSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/print.svg"
	name := "data/web/static/svg/print.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgProjectSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgProjectSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/project.svg"
	name := "data/web/static/svg/project.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPulseSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPulseSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/pulse.svg"
	name := "data/web/static/svg/pulse.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgPuzzlePieceSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgPuzzlePieceSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/puzzle-piece.svg"
	name := "data/web/static/svg/puzzle-piece.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgQuestionMarkSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgQuestionMarkSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/question-mark.svg"
	name := "data/web/static/svg/question-mark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgRainSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgRainSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/rain.svg"
	name := "data/web/static/svg/rain.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgRandomSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgRandomSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/random.svg"
	name := "data/web/static/svg/random.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgReloadSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgReloadSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/reload.svg"
	name := "data/web/static/svg/reload.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgResizeBothSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgResizeBothSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/resize-both.svg"
	name := "data/web/static/svg/resize-both.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgResizeHeightSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgResizeHeightSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/resize-height.svg"
	name := "data/web/static/svg/resize-height.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgResizeWidthSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgResizeWidthSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/resize-width.svg"
	name := "data/web/static/svg/resize-width.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgRssAltSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgRssAltSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/rss-alt.svg"
	name := "data/web/static/svg/rss-alt.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgRssSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgRssSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/rss.svg"
	name := "data/web/static/svg/rss.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgScriptSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgScriptSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/script.svg"
	name := "data/web/static/svg/script.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgShareBoxedSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgShareBoxedSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/share-boxed.svg"
	name := "data/web/static/svg/share-boxed.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgShareSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgShareSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/share.svg"
	name := "data/web/static/svg/share.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgShieldSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgShieldSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/shield.svg"
	name := "data/web/static/svg/shield.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgSignalSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgSignalSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/signal.svg"
	name := "data/web/static/svg/signal.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgSignpostSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgSignpostSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/signpost.svg"
	name := "data/web/static/svg/signpost.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgSortAscendingSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgSortAscendingSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/sort-ascending.svg"
	name := "data/web/static/svg/sort-ascending.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgSortDescendingSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgSortDescendingSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/sort-descending.svg"
	name := "data/web/static/svg/sort-descending.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgSpreadsheetSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgSpreadsheetSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/spreadsheet.svg"
	name := "data/web/static/svg/spreadsheet.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgStarSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgStarSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/star.svg"
	name := "data/web/static/svg/star.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgSunSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgSunSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/sun.svg"
	name := "data/web/static/svg/sun.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgTabletSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgTabletSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/tablet.svg"
	name := "data/web/static/svg/tablet.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgTagSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgTagSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/tag.svg"
	name := "data/web/static/svg/tag.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgTagsSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgTagsSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/tags.svg"
	name := "data/web/static/svg/tags.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgTargetSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgTargetSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/target.svg"
	name := "data/web/static/svg/target.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgTaskSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgTaskSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/task.svg"
	name := "data/web/static/svg/task.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgTerminalSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgTerminalSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/terminal.svg"
	name := "data/web/static/svg/terminal.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgTextSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgTextSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/text.svg"
	name := "data/web/static/svg/text.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgThumbDownSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgThumbDownSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/thumb-down.svg"
	name := "data/web/static/svg/thumb-down.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgThumbUpSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgThumbUpSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/thumb-up.svg"
	name := "data/web/static/svg/thumb-up.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgTimerSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgTimerSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/timer.svg"
	name := "data/web/static/svg/timer.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgTransferSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgTransferSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/transfer.svg"
	name := "data/web/static/svg/transfer.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgTrashSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgTrashSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/trash.svg"
	name := "data/web/static/svg/trash.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgUnderlineSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgUnderlineSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/underline.svg"
	name := "data/web/static/svg/underline.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgVerticalAlignBottomSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgVerticalAlignBottomSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/vertical-align-bottom.svg"
	name := "data/web/static/svg/vertical-align-bottom.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgVerticalAlignCenterSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgVerticalAlignCenterSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/vertical-align-center.svg"
	name := "data/web/static/svg/vertical-align-center.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgVerticalAlignTopSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgVerticalAlignTopSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/vertical-align-top.svg"
	name := "data/web/static/svg/vertical-align-top.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgVideoSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgVideoSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/video.svg"
	name := "data/web/static/svg/video.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgVolumeHighSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgVolumeHighSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/volume-high.svg"
	name := "data/web/static/svg/volume-high.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgVolumeLowSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgVolumeLowSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/volume-low.svg"
	name := "data/web/static/svg/volume-low.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgVolumeOffSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgVolumeOffSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/volume-off.svg"
	name := "data/web/static/svg/volume-off.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgWarningSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgWarningSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/warning.svg"
	name := "data/web/static/svg/warning.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgWifiSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgWifiSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/wifi.svg"
	name := "data/web/static/svg/wifi.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgWrenchSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgWrenchSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/wrench.svg"
	name := "data/web/static/svg/wrench.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgXSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgXSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/x.svg"
	name := "data/web/static/svg/x.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgYenSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgYenSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/yen.svg"
	name := "data/web/static/svg/yen.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgZoomInSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgZoomInSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/zoom-in.svg"
	name := "data/web/static/svg/zoom-in.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticSvgZoomOutSvg reads file data from disk. It returns an error on failure.
func dataWebStaticSvgZoomOutSvg() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/svg/zoom-out.svg"
	name := "data/web/static/svg/zoom-out.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLogin2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLogin2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-login-2x.webp"
	name := "data/web/static/webp/account-login-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLogin3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLogin3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-login-3x.webp"
	name := "data/web/static/webp/account-login-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLogin4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLogin4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-login-4x.webp"
	name := "data/web/static/webp/account-login-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLogin6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLogin6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-login-6x.webp"
	name := "data/web/static/webp/account-login-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLogin8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLogin8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-login-8x.webp"
	name := "data/web/static/webp/account-login-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLoginWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLoginWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-login.webp"
	name := "data/web/static/webp/account-login.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLogout2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLogout2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-logout-2x.webp"
	name := "data/web/static/webp/account-logout-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLogout3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLogout3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-logout-3x.webp"
	name := "data/web/static/webp/account-logout-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLogout4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLogout4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-logout-4x.webp"
	name := "data/web/static/webp/account-logout-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLogout6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLogout6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-logout-6x.webp"
	name := "data/web/static/webp/account-logout-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLogout8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLogout8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-logout-8x.webp"
	name := "data/web/static/webp/account-logout-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAccountLogoutWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAccountLogoutWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/account-logout.webp"
	name := "data/web/static/webp/account-logout.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionRedo2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionRedo2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-redo-2x.webp"
	name := "data/web/static/webp/action-redo-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionRedo3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionRedo3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-redo-3x.webp"
	name := "data/web/static/webp/action-redo-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionRedo4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionRedo4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-redo-4x.webp"
	name := "data/web/static/webp/action-redo-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionRedo6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionRedo6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-redo-6x.webp"
	name := "data/web/static/webp/action-redo-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionRedo8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionRedo8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-redo-8x.webp"
	name := "data/web/static/webp/action-redo-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionRedoWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionRedoWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-redo.webp"
	name := "data/web/static/webp/action-redo.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionUndo2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionUndo2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-undo-2x.webp"
	name := "data/web/static/webp/action-undo-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionUndo3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionUndo3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-undo-3x.webp"
	name := "data/web/static/webp/action-undo-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionUndo4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionUndo4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-undo-4x.webp"
	name := "data/web/static/webp/action-undo-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionUndo6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionUndo6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-undo-6x.webp"
	name := "data/web/static/webp/action-undo-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionUndo8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionUndo8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-undo-8x.webp"
	name := "data/web/static/webp/action-undo-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpActionUndoWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpActionUndoWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/action-undo.webp"
	name := "data/web/static/webp/action-undo.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignCenter2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignCenter2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-center-2x.webp"
	name := "data/web/static/webp/align-center-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignCenter3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignCenter3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-center-3x.webp"
	name := "data/web/static/webp/align-center-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignCenter4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignCenter4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-center-4x.webp"
	name := "data/web/static/webp/align-center-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignCenter6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignCenter6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-center-6x.webp"
	name := "data/web/static/webp/align-center-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignCenter8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignCenter8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-center-8x.webp"
	name := "data/web/static/webp/align-center-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignCenterWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignCenterWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-center.webp"
	name := "data/web/static/webp/align-center.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignLeft2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignLeft2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-left-2x.webp"
	name := "data/web/static/webp/align-left-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignLeft3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignLeft3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-left-3x.webp"
	name := "data/web/static/webp/align-left-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignLeft4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignLeft4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-left-4x.webp"
	name := "data/web/static/webp/align-left-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignLeft6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignLeft6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-left-6x.webp"
	name := "data/web/static/webp/align-left-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignLeft8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignLeft8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-left-8x.webp"
	name := "data/web/static/webp/align-left-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignLeftWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignLeftWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-left.webp"
	name := "data/web/static/webp/align-left.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignRight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignRight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-right-2x.webp"
	name := "data/web/static/webp/align-right-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignRight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignRight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-right-3x.webp"
	name := "data/web/static/webp/align-right-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignRight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignRight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-right-4x.webp"
	name := "data/web/static/webp/align-right-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignRight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignRight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-right-6x.webp"
	name := "data/web/static/webp/align-right-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignRight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignRight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-right-8x.webp"
	name := "data/web/static/webp/align-right-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAlignRightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAlignRightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/align-right.webp"
	name := "data/web/static/webp/align-right.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAperture2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAperture2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/aperture-2x.webp"
	name := "data/web/static/webp/aperture-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAperture3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAperture3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/aperture-3x.webp"
	name := "data/web/static/webp/aperture-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAperture4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAperture4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/aperture-4x.webp"
	name := "data/web/static/webp/aperture-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAperture6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAperture6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/aperture-6x.webp"
	name := "data/web/static/webp/aperture-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAperture8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAperture8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/aperture-8x.webp"
	name := "data/web/static/webp/aperture-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpApertureWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpApertureWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/aperture.webp"
	name := "data/web/static/webp/aperture.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowBottom2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowBottom2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-bottom-2x.webp"
	name := "data/web/static/webp/arrow-bottom-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowBottom3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowBottom3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-bottom-3x.webp"
	name := "data/web/static/webp/arrow-bottom-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowBottom4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowBottom4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-bottom-4x.webp"
	name := "data/web/static/webp/arrow-bottom-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowBottom6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowBottom6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-bottom-6x.webp"
	name := "data/web/static/webp/arrow-bottom-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowBottom8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowBottom8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-bottom-8x.webp"
	name := "data/web/static/webp/arrow-bottom-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowBottomWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowBottomWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-bottom.webp"
	name := "data/web/static/webp/arrow-bottom.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleBottom2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleBottom2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-bottom-2x.webp"
	name := "data/web/static/webp/arrow-circle-bottom-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleBottom3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleBottom3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-bottom-3x.webp"
	name := "data/web/static/webp/arrow-circle-bottom-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleBottom4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleBottom4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-bottom-4x.webp"
	name := "data/web/static/webp/arrow-circle-bottom-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleBottom6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleBottom6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-bottom-6x.webp"
	name := "data/web/static/webp/arrow-circle-bottom-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleBottom8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleBottom8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-bottom-8x.webp"
	name := "data/web/static/webp/arrow-circle-bottom-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleBottomWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleBottomWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-bottom.webp"
	name := "data/web/static/webp/arrow-circle-bottom.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleLeft2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleLeft2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-left-2x.webp"
	name := "data/web/static/webp/arrow-circle-left-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleLeft3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleLeft3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-left-3x.webp"
	name := "data/web/static/webp/arrow-circle-left-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleLeft4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleLeft4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-left-4x.webp"
	name := "data/web/static/webp/arrow-circle-left-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleLeft6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleLeft6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-left-6x.webp"
	name := "data/web/static/webp/arrow-circle-left-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleLeft8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleLeft8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-left-8x.webp"
	name := "data/web/static/webp/arrow-circle-left-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleLeftWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleLeftWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-left.webp"
	name := "data/web/static/webp/arrow-circle-left.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleRight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleRight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-right-2x.webp"
	name := "data/web/static/webp/arrow-circle-right-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleRight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleRight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-right-3x.webp"
	name := "data/web/static/webp/arrow-circle-right-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleRight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleRight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-right-4x.webp"
	name := "data/web/static/webp/arrow-circle-right-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleRight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleRight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-right-6x.webp"
	name := "data/web/static/webp/arrow-circle-right-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleRight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleRight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-right-8x.webp"
	name := "data/web/static/webp/arrow-circle-right-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleRightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleRightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-right.webp"
	name := "data/web/static/webp/arrow-circle-right.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleTop2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleTop2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-top-2x.webp"
	name := "data/web/static/webp/arrow-circle-top-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleTop3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleTop3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-top-3x.webp"
	name := "data/web/static/webp/arrow-circle-top-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleTop4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleTop4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-top-4x.webp"
	name := "data/web/static/webp/arrow-circle-top-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleTop6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleTop6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-top-6x.webp"
	name := "data/web/static/webp/arrow-circle-top-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleTop8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleTop8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-top-8x.webp"
	name := "data/web/static/webp/arrow-circle-top-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowCircleTopWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowCircleTopWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-circle-top.webp"
	name := "data/web/static/webp/arrow-circle-top.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowLeft2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowLeft2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-left-2x.webp"
	name := "data/web/static/webp/arrow-left-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowLeft3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowLeft3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-left-3x.webp"
	name := "data/web/static/webp/arrow-left-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowLeft4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowLeft4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-left-4x.webp"
	name := "data/web/static/webp/arrow-left-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowLeft6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowLeft6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-left-6x.webp"
	name := "data/web/static/webp/arrow-left-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowLeft8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowLeft8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-left-8x.webp"
	name := "data/web/static/webp/arrow-left-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowLeftWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowLeftWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-left.webp"
	name := "data/web/static/webp/arrow-left.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowRight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowRight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-right-2x.webp"
	name := "data/web/static/webp/arrow-right-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowRight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowRight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-right-3x.webp"
	name := "data/web/static/webp/arrow-right-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowRight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowRight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-right-4x.webp"
	name := "data/web/static/webp/arrow-right-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowRight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowRight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-right-6x.webp"
	name := "data/web/static/webp/arrow-right-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowRight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowRight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-right-8x.webp"
	name := "data/web/static/webp/arrow-right-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowRightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowRightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-right.webp"
	name := "data/web/static/webp/arrow-right.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickBottom2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickBottom2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-bottom-2x.webp"
	name := "data/web/static/webp/arrow-thick-bottom-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickBottom3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickBottom3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-bottom-3x.webp"
	name := "data/web/static/webp/arrow-thick-bottom-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickBottom4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickBottom4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-bottom-4x.webp"
	name := "data/web/static/webp/arrow-thick-bottom-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickBottom6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickBottom6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-bottom-6x.webp"
	name := "data/web/static/webp/arrow-thick-bottom-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickBottom8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickBottom8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-bottom-8x.webp"
	name := "data/web/static/webp/arrow-thick-bottom-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickBottomWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickBottomWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-bottom.webp"
	name := "data/web/static/webp/arrow-thick-bottom.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickLeft2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickLeft2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-left-2x.webp"
	name := "data/web/static/webp/arrow-thick-left-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickLeft3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickLeft3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-left-3x.webp"
	name := "data/web/static/webp/arrow-thick-left-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickLeft4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickLeft4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-left-4x.webp"
	name := "data/web/static/webp/arrow-thick-left-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickLeft6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickLeft6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-left-6x.webp"
	name := "data/web/static/webp/arrow-thick-left-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickLeft8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickLeft8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-left-8x.webp"
	name := "data/web/static/webp/arrow-thick-left-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickLeftWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickLeftWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-left.webp"
	name := "data/web/static/webp/arrow-thick-left.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickRight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickRight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-right-2x.webp"
	name := "data/web/static/webp/arrow-thick-right-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickRight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickRight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-right-3x.webp"
	name := "data/web/static/webp/arrow-thick-right-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickRight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickRight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-right-4x.webp"
	name := "data/web/static/webp/arrow-thick-right-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickRight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickRight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-right-6x.webp"
	name := "data/web/static/webp/arrow-thick-right-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickRight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickRight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-right-8x.webp"
	name := "data/web/static/webp/arrow-thick-right-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickRightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickRightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-right.webp"
	name := "data/web/static/webp/arrow-thick-right.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickTop2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickTop2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-top-2x.webp"
	name := "data/web/static/webp/arrow-thick-top-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickTop3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickTop3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-top-3x.webp"
	name := "data/web/static/webp/arrow-thick-top-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickTop4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickTop4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-top-4x.webp"
	name := "data/web/static/webp/arrow-thick-top-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickTop6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickTop6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-top-6x.webp"
	name := "data/web/static/webp/arrow-thick-top-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickTop8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickTop8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-top-8x.webp"
	name := "data/web/static/webp/arrow-thick-top-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowThickTopWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowThickTopWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-thick-top.webp"
	name := "data/web/static/webp/arrow-thick-top.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowTop2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowTop2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-top-2x.webp"
	name := "data/web/static/webp/arrow-top-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowTop3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowTop3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-top-3x.webp"
	name := "data/web/static/webp/arrow-top-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowTop4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowTop4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-top-4x.webp"
	name := "data/web/static/webp/arrow-top-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowTop6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowTop6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-top-6x.webp"
	name := "data/web/static/webp/arrow-top-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowTop8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowTop8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-top-8x.webp"
	name := "data/web/static/webp/arrow-top-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpArrowTopWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpArrowTopWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/arrow-top.webp"
	name := "data/web/static/webp/arrow-top.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudio2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudio2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio-2x.webp"
	name := "data/web/static/webp/audio-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudio3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudio3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio-3x.webp"
	name := "data/web/static/webp/audio-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudio4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudio4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio-4x.webp"
	name := "data/web/static/webp/audio-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudio6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudio6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio-6x.webp"
	name := "data/web/static/webp/audio-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudio8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudio8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio-8x.webp"
	name := "data/web/static/webp/audio-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudioSpectrum2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudioSpectrum2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio-spectrum-2x.webp"
	name := "data/web/static/webp/audio-spectrum-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudioSpectrum3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudioSpectrum3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio-spectrum-3x.webp"
	name := "data/web/static/webp/audio-spectrum-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudioSpectrum4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudioSpectrum4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio-spectrum-4x.webp"
	name := "data/web/static/webp/audio-spectrum-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudioSpectrum6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudioSpectrum6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio-spectrum-6x.webp"
	name := "data/web/static/webp/audio-spectrum-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudioSpectrum8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudioSpectrum8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio-spectrum-8x.webp"
	name := "data/web/static/webp/audio-spectrum-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudioSpectrumWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudioSpectrumWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio-spectrum.webp"
	name := "data/web/static/webp/audio-spectrum.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpAudioWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpAudioWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/audio.webp"
	name := "data/web/static/webp/audio.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBadge2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBadge2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/badge-2x.webp"
	name := "data/web/static/webp/badge-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBadge3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBadge3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/badge-3x.webp"
	name := "data/web/static/webp/badge-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBadge4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBadge4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/badge-4x.webp"
	name := "data/web/static/webp/badge-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBadge6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBadge6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/badge-6x.webp"
	name := "data/web/static/webp/badge-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBadge8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBadge8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/badge-8x.webp"
	name := "data/web/static/webp/badge-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBadgeWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBadgeWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/badge.webp"
	name := "data/web/static/webp/badge.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBan2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBan2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ban-2x.webp"
	name := "data/web/static/webp/ban-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBan3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBan3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ban-3x.webp"
	name := "data/web/static/webp/ban-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBan4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBan4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ban-4x.webp"
	name := "data/web/static/webp/ban-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBan6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBan6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ban-6x.webp"
	name := "data/web/static/webp/ban-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBan8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBan8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ban-8x.webp"
	name := "data/web/static/webp/ban-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBanWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBanWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ban.webp"
	name := "data/web/static/webp/ban.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBarChart2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBarChart2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bar-chart-2x.webp"
	name := "data/web/static/webp/bar-chart-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBarChart3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBarChart3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bar-chart-3x.webp"
	name := "data/web/static/webp/bar-chart-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBarChart4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBarChart4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bar-chart-4x.webp"
	name := "data/web/static/webp/bar-chart-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBarChart6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBarChart6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bar-chart-6x.webp"
	name := "data/web/static/webp/bar-chart-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBarChart8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBarChart8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bar-chart-8x.webp"
	name := "data/web/static/webp/bar-chart-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBarChartWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBarChartWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bar-chart.webp"
	name := "data/web/static/webp/bar-chart.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBasket2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBasket2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/basket-2x.webp"
	name := "data/web/static/webp/basket-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBasket3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBasket3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/basket-3x.webp"
	name := "data/web/static/webp/basket-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBasket4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBasket4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/basket-4x.webp"
	name := "data/web/static/webp/basket-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBasket6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBasket6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/basket-6x.webp"
	name := "data/web/static/webp/basket-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBasket8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBasket8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/basket-8x.webp"
	name := "data/web/static/webp/basket-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBasketWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBasketWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/basket.webp"
	name := "data/web/static/webp/basket.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryEmpty2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryEmpty2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-empty-2x.webp"
	name := "data/web/static/webp/battery-empty-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryEmpty3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryEmpty3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-empty-3x.webp"
	name := "data/web/static/webp/battery-empty-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryEmpty4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryEmpty4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-empty-4x.webp"
	name := "data/web/static/webp/battery-empty-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryEmpty6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryEmpty6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-empty-6x.webp"
	name := "data/web/static/webp/battery-empty-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryEmpty8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryEmpty8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-empty-8x.webp"
	name := "data/web/static/webp/battery-empty-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryEmptyWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryEmptyWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-empty.webp"
	name := "data/web/static/webp/battery-empty.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryFull2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryFull2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-full-2x.webp"
	name := "data/web/static/webp/battery-full-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryFull3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryFull3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-full-3x.webp"
	name := "data/web/static/webp/battery-full-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryFull4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryFull4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-full-4x.webp"
	name := "data/web/static/webp/battery-full-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryFull6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryFull6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-full-6x.webp"
	name := "data/web/static/webp/battery-full-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryFull8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryFull8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-full-8x.webp"
	name := "data/web/static/webp/battery-full-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBatteryFullWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBatteryFullWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/battery-full.webp"
	name := "data/web/static/webp/battery-full.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBeaker2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBeaker2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/beaker-2x.webp"
	name := "data/web/static/webp/beaker-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBeaker3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBeaker3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/beaker-3x.webp"
	name := "data/web/static/webp/beaker-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBeaker4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBeaker4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/beaker-4x.webp"
	name := "data/web/static/webp/beaker-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBeaker6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBeaker6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/beaker-6x.webp"
	name := "data/web/static/webp/beaker-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBeaker8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBeaker8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/beaker-8x.webp"
	name := "data/web/static/webp/beaker-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBeakerWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBeakerWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/beaker.webp"
	name := "data/web/static/webp/beaker.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBell2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBell2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bell-2x.webp"
	name := "data/web/static/webp/bell-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBell3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBell3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bell-3x.webp"
	name := "data/web/static/webp/bell-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBell4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBell4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bell-4x.webp"
	name := "data/web/static/webp/bell-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBell6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBell6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bell-6x.webp"
	name := "data/web/static/webp/bell-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBell8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBell8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bell-8x.webp"
	name := "data/web/static/webp/bell-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBellWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBellWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bell.webp"
	name := "data/web/static/webp/bell.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBluetooth2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBluetooth2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bluetooth-2x.webp"
	name := "data/web/static/webp/bluetooth-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBluetooth3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBluetooth3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bluetooth-3x.webp"
	name := "data/web/static/webp/bluetooth-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBluetooth4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBluetooth4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bluetooth-4x.webp"
	name := "data/web/static/webp/bluetooth-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBluetooth6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBluetooth6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bluetooth-6x.webp"
	name := "data/web/static/webp/bluetooth-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBluetooth8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBluetooth8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bluetooth-8x.webp"
	name := "data/web/static/webp/bluetooth-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBluetoothWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBluetoothWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bluetooth.webp"
	name := "data/web/static/webp/bluetooth.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBold2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBold2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bold-2x.webp"
	name := "data/web/static/webp/bold-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBold3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBold3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bold-3x.webp"
	name := "data/web/static/webp/bold-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBold4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBold4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bold-4x.webp"
	name := "data/web/static/webp/bold-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBold6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBold6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bold-6x.webp"
	name := "data/web/static/webp/bold-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBold8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBold8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bold-8x.webp"
	name := "data/web/static/webp/bold-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBoldWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBoldWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bold.webp"
	name := "data/web/static/webp/bold.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBolt2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBolt2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bolt-2x.webp"
	name := "data/web/static/webp/bolt-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBolt3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBolt3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bolt-3x.webp"
	name := "data/web/static/webp/bolt-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBolt4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBolt4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bolt-4x.webp"
	name := "data/web/static/webp/bolt-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBolt6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBolt6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bolt-6x.webp"
	name := "data/web/static/webp/bolt-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBolt8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBolt8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bolt-8x.webp"
	name := "data/web/static/webp/bolt-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBoltWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBoltWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bolt.webp"
	name := "data/web/static/webp/bolt.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBook2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBook2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/book-2x.webp"
	name := "data/web/static/webp/book-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBook3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBook3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/book-3x.webp"
	name := "data/web/static/webp/book-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBook4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBook4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/book-4x.webp"
	name := "data/web/static/webp/book-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBook6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBook6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/book-6x.webp"
	name := "data/web/static/webp/book-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBook8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBook8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/book-8x.webp"
	name := "data/web/static/webp/book-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBookWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBookWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/book.webp"
	name := "data/web/static/webp/book.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBookmark2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBookmark2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bookmark-2x.webp"
	name := "data/web/static/webp/bookmark-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBookmark3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBookmark3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bookmark-3x.webp"
	name := "data/web/static/webp/bookmark-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBookmark4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBookmark4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bookmark-4x.webp"
	name := "data/web/static/webp/bookmark-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBookmark6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBookmark6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bookmark-6x.webp"
	name := "data/web/static/webp/bookmark-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBookmark8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBookmark8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bookmark-8x.webp"
	name := "data/web/static/webp/bookmark-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBookmarkWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBookmarkWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bookmark.webp"
	name := "data/web/static/webp/bookmark.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBox2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBox2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/box-2x.webp"
	name := "data/web/static/webp/box-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBox3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBox3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/box-3x.webp"
	name := "data/web/static/webp/box-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBox4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBox4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/box-4x.webp"
	name := "data/web/static/webp/box-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBox6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBox6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/box-6x.webp"
	name := "data/web/static/webp/box-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBox8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBox8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/box-8x.webp"
	name := "data/web/static/webp/box-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBoxWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBoxWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/box.webp"
	name := "data/web/static/webp/box.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBriefcase2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBriefcase2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/briefcase-2x.webp"
	name := "data/web/static/webp/briefcase-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBriefcase3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBriefcase3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/briefcase-3x.webp"
	name := "data/web/static/webp/briefcase-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBriefcase4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBriefcase4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/briefcase-4x.webp"
	name := "data/web/static/webp/briefcase-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBriefcase6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBriefcase6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/briefcase-6x.webp"
	name := "data/web/static/webp/briefcase-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBriefcase8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBriefcase8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/briefcase-8x.webp"
	name := "data/web/static/webp/briefcase-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBriefcaseWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBriefcaseWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/briefcase.webp"
	name := "data/web/static/webp/briefcase.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBritishPound2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBritishPound2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/british-pound-2x.webp"
	name := "data/web/static/webp/british-pound-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBritishPound3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBritishPound3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/british-pound-3x.webp"
	name := "data/web/static/webp/british-pound-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBritishPound4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBritishPound4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/british-pound-4x.webp"
	name := "data/web/static/webp/british-pound-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBritishPound6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBritishPound6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/british-pound-6x.webp"
	name := "data/web/static/webp/british-pound-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBritishPound8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBritishPound8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/british-pound-8x.webp"
	name := "data/web/static/webp/british-pound-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBritishPoundWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBritishPoundWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/british-pound.webp"
	name := "data/web/static/webp/british-pound.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrowser2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrowser2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/browser-2x.webp"
	name := "data/web/static/webp/browser-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrowser3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrowser3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/browser-3x.webp"
	name := "data/web/static/webp/browser-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrowser4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrowser4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/browser-4x.webp"
	name := "data/web/static/webp/browser-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrowser6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrowser6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/browser-6x.webp"
	name := "data/web/static/webp/browser-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrowser8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrowser8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/browser-8x.webp"
	name := "data/web/static/webp/browser-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrowserWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrowserWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/browser.webp"
	name := "data/web/static/webp/browser.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrush2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrush2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/brush-2x.webp"
	name := "data/web/static/webp/brush-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrush3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrush3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/brush-3x.webp"
	name := "data/web/static/webp/brush-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrush4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrush4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/brush-4x.webp"
	name := "data/web/static/webp/brush-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrush6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrush6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/brush-6x.webp"
	name := "data/web/static/webp/brush-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrush8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrush8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/brush-8x.webp"
	name := "data/web/static/webp/brush-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBrushWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBrushWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/brush.webp"
	name := "data/web/static/webp/brush.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBug2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBug2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bug-2x.webp"
	name := "data/web/static/webp/bug-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBug3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBug3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bug-3x.webp"
	name := "data/web/static/webp/bug-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBug4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBug4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bug-4x.webp"
	name := "data/web/static/webp/bug-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBug6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBug6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bug-6x.webp"
	name := "data/web/static/webp/bug-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBug8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBug8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bug-8x.webp"
	name := "data/web/static/webp/bug-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBugWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBugWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bug.webp"
	name := "data/web/static/webp/bug.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBullhorn2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBullhorn2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bullhorn-2x.webp"
	name := "data/web/static/webp/bullhorn-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBullhorn3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBullhorn3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bullhorn-3x.webp"
	name := "data/web/static/webp/bullhorn-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBullhorn4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBullhorn4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bullhorn-4x.webp"
	name := "data/web/static/webp/bullhorn-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBullhorn6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBullhorn6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bullhorn-6x.webp"
	name := "data/web/static/webp/bullhorn-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBullhorn8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBullhorn8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bullhorn-8x.webp"
	name := "data/web/static/webp/bullhorn-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpBullhornWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpBullhornWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/bullhorn.webp"
	name := "data/web/static/webp/bullhorn.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalculator2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalculator2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calculator-2x.webp"
	name := "data/web/static/webp/calculator-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalculator3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalculator3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calculator-3x.webp"
	name := "data/web/static/webp/calculator-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalculator4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalculator4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calculator-4x.webp"
	name := "data/web/static/webp/calculator-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalculator6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalculator6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calculator-6x.webp"
	name := "data/web/static/webp/calculator-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalculator8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalculator8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calculator-8x.webp"
	name := "data/web/static/webp/calculator-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalculatorWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalculatorWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calculator.webp"
	name := "data/web/static/webp/calculator.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalendar2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalendar2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calendar-2x.webp"
	name := "data/web/static/webp/calendar-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalendar3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalendar3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calendar-3x.webp"
	name := "data/web/static/webp/calendar-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalendar4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalendar4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calendar-4x.webp"
	name := "data/web/static/webp/calendar-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalendar6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalendar6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calendar-6x.webp"
	name := "data/web/static/webp/calendar-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalendar8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalendar8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calendar-8x.webp"
	name := "data/web/static/webp/calendar-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCalendarWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCalendarWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/calendar.webp"
	name := "data/web/static/webp/calendar.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCameraSlr2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCameraSlr2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/camera-slr-2x.webp"
	name := "data/web/static/webp/camera-slr-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCameraSlr3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCameraSlr3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/camera-slr-3x.webp"
	name := "data/web/static/webp/camera-slr-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCameraSlr4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCameraSlr4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/camera-slr-4x.webp"
	name := "data/web/static/webp/camera-slr-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCameraSlr6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCameraSlr6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/camera-slr-6x.webp"
	name := "data/web/static/webp/camera-slr-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCameraSlr8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCameraSlr8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/camera-slr-8x.webp"
	name := "data/web/static/webp/camera-slr-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCameraSlrWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCameraSlrWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/camera-slr.webp"
	name := "data/web/static/webp/camera-slr.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretBottom2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretBottom2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-bottom-2x.webp"
	name := "data/web/static/webp/caret-bottom-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretBottom3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretBottom3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-bottom-3x.webp"
	name := "data/web/static/webp/caret-bottom-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretBottom4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretBottom4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-bottom-4x.webp"
	name := "data/web/static/webp/caret-bottom-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretBottom6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretBottom6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-bottom-6x.webp"
	name := "data/web/static/webp/caret-bottom-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretBottom8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretBottom8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-bottom-8x.webp"
	name := "data/web/static/webp/caret-bottom-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretBottomWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretBottomWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-bottom.webp"
	name := "data/web/static/webp/caret-bottom.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretLeft2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretLeft2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-left-2x.webp"
	name := "data/web/static/webp/caret-left-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretLeft3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretLeft3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-left-3x.webp"
	name := "data/web/static/webp/caret-left-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretLeft4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretLeft4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-left-4x.webp"
	name := "data/web/static/webp/caret-left-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretLeft6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretLeft6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-left-6x.webp"
	name := "data/web/static/webp/caret-left-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretLeft8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretLeft8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-left-8x.webp"
	name := "data/web/static/webp/caret-left-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretLeftWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretLeftWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-left.webp"
	name := "data/web/static/webp/caret-left.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretRight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretRight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-right-2x.webp"
	name := "data/web/static/webp/caret-right-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretRight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretRight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-right-3x.webp"
	name := "data/web/static/webp/caret-right-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretRight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretRight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-right-4x.webp"
	name := "data/web/static/webp/caret-right-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretRight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretRight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-right-6x.webp"
	name := "data/web/static/webp/caret-right-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretRight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretRight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-right-8x.webp"
	name := "data/web/static/webp/caret-right-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretRightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretRightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-right.webp"
	name := "data/web/static/webp/caret-right.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretTop2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretTop2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-top-2x.webp"
	name := "data/web/static/webp/caret-top-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretTop3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretTop3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-top-3x.webp"
	name := "data/web/static/webp/caret-top-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretTop4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretTop4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-top-4x.webp"
	name := "data/web/static/webp/caret-top-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretTop6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretTop6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-top-6x.webp"
	name := "data/web/static/webp/caret-top-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretTop8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretTop8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-top-8x.webp"
	name := "data/web/static/webp/caret-top-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCaretTopWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCaretTopWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/caret-top.webp"
	name := "data/web/static/webp/caret-top.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCart2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCart2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cart-2x.webp"
	name := "data/web/static/webp/cart-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCart3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCart3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cart-3x.webp"
	name := "data/web/static/webp/cart-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCart4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCart4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cart-4x.webp"
	name := "data/web/static/webp/cart-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCart6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCart6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cart-6x.webp"
	name := "data/web/static/webp/cart-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCart8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCart8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cart-8x.webp"
	name := "data/web/static/webp/cart-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCartWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCartWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cart.webp"
	name := "data/web/static/webp/cart.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChat2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChat2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chat-2x.webp"
	name := "data/web/static/webp/chat-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChat3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChat3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chat-3x.webp"
	name := "data/web/static/webp/chat-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChat4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChat4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chat-4x.webp"
	name := "data/web/static/webp/chat-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChat6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChat6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chat-6x.webp"
	name := "data/web/static/webp/chat-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChat8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChat8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chat-8x.webp"
	name := "data/web/static/webp/chat-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChatWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChatWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chat.webp"
	name := "data/web/static/webp/chat.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCheck2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCheck2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/check-2x.webp"
	name := "data/web/static/webp/check-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCheck3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCheck3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/check-3x.webp"
	name := "data/web/static/webp/check-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCheck4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCheck4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/check-4x.webp"
	name := "data/web/static/webp/check-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCheck6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCheck6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/check-6x.webp"
	name := "data/web/static/webp/check-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCheck8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCheck8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/check-8x.webp"
	name := "data/web/static/webp/check-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCheckWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCheckWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/check.webp"
	name := "data/web/static/webp/check.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronBottom2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronBottom2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-bottom-2x.webp"
	name := "data/web/static/webp/chevron-bottom-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronBottom3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronBottom3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-bottom-3x.webp"
	name := "data/web/static/webp/chevron-bottom-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronBottom4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronBottom4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-bottom-4x.webp"
	name := "data/web/static/webp/chevron-bottom-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronBottom6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronBottom6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-bottom-6x.webp"
	name := "data/web/static/webp/chevron-bottom-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronBottom8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronBottom8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-bottom-8x.webp"
	name := "data/web/static/webp/chevron-bottom-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronBottomWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronBottomWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-bottom.webp"
	name := "data/web/static/webp/chevron-bottom.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronLeft2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronLeft2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-left-2x.webp"
	name := "data/web/static/webp/chevron-left-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronLeft3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronLeft3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-left-3x.webp"
	name := "data/web/static/webp/chevron-left-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronLeft4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronLeft4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-left-4x.webp"
	name := "data/web/static/webp/chevron-left-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronLeft6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronLeft6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-left-6x.webp"
	name := "data/web/static/webp/chevron-left-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronLeft8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronLeft8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-left-8x.webp"
	name := "data/web/static/webp/chevron-left-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronLeftWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronLeftWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-left.webp"
	name := "data/web/static/webp/chevron-left.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronRight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronRight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-right-2x.webp"
	name := "data/web/static/webp/chevron-right-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronRight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronRight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-right-3x.webp"
	name := "data/web/static/webp/chevron-right-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronRight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronRight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-right-4x.webp"
	name := "data/web/static/webp/chevron-right-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronRight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronRight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-right-6x.webp"
	name := "data/web/static/webp/chevron-right-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronRight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronRight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-right-8x.webp"
	name := "data/web/static/webp/chevron-right-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronRightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronRightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-right.webp"
	name := "data/web/static/webp/chevron-right.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronTop2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronTop2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-top-2x.webp"
	name := "data/web/static/webp/chevron-top-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronTop3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronTop3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-top-3x.webp"
	name := "data/web/static/webp/chevron-top-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronTop4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronTop4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-top-4x.webp"
	name := "data/web/static/webp/chevron-top-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronTop6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronTop6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-top-6x.webp"
	name := "data/web/static/webp/chevron-top-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronTop8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronTop8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-top-8x.webp"
	name := "data/web/static/webp/chevron-top-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpChevronTopWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpChevronTopWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/chevron-top.webp"
	name := "data/web/static/webp/chevron-top.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleCheck2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleCheck2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-check-2x.webp"
	name := "data/web/static/webp/circle-check-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleCheck3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleCheck3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-check-3x.webp"
	name := "data/web/static/webp/circle-check-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleCheck4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleCheck4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-check-4x.webp"
	name := "data/web/static/webp/circle-check-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleCheck6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleCheck6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-check-6x.webp"
	name := "data/web/static/webp/circle-check-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleCheck8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleCheck8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-check-8x.webp"
	name := "data/web/static/webp/circle-check-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleCheckWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleCheckWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-check.webp"
	name := "data/web/static/webp/circle-check.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleX2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleX2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-x-2x.webp"
	name := "data/web/static/webp/circle-x-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleX3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleX3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-x-3x.webp"
	name := "data/web/static/webp/circle-x-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleX4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleX4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-x-4x.webp"
	name := "data/web/static/webp/circle-x-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleX6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleX6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-x-6x.webp"
	name := "data/web/static/webp/circle-x-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleX8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleX8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-x-8x.webp"
	name := "data/web/static/webp/circle-x-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCircleXWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCircleXWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/circle-x.webp"
	name := "data/web/static/webp/circle-x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClipboard2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClipboard2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clipboard-2x.webp"
	name := "data/web/static/webp/clipboard-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClipboard3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClipboard3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clipboard-3x.webp"
	name := "data/web/static/webp/clipboard-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClipboard4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClipboard4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clipboard-4x.webp"
	name := "data/web/static/webp/clipboard-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClipboard6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClipboard6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clipboard-6x.webp"
	name := "data/web/static/webp/clipboard-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClipboard8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClipboard8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clipboard-8x.webp"
	name := "data/web/static/webp/clipboard-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClipboardWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClipboardWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clipboard.webp"
	name := "data/web/static/webp/clipboard.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClock2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClock2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clock-2x.webp"
	name := "data/web/static/webp/clock-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClock3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClock3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clock-3x.webp"
	name := "data/web/static/webp/clock-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClock4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClock4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clock-4x.webp"
	name := "data/web/static/webp/clock-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClock6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClock6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clock-6x.webp"
	name := "data/web/static/webp/clock-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClock8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClock8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clock-8x.webp"
	name := "data/web/static/webp/clock-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpClockWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpClockWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/clock.webp"
	name := "data/web/static/webp/clock.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloud2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloud2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-2x.webp"
	name := "data/web/static/webp/cloud-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloud3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloud3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-3x.webp"
	name := "data/web/static/webp/cloud-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloud4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloud4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-4x.webp"
	name := "data/web/static/webp/cloud-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloud6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloud6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-6x.webp"
	name := "data/web/static/webp/cloud-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloud8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloud8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-8x.webp"
	name := "data/web/static/webp/cloud-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudDownload2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudDownload2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-download-2x.webp"
	name := "data/web/static/webp/cloud-download-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudDownload3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudDownload3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-download-3x.webp"
	name := "data/web/static/webp/cloud-download-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudDownload4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudDownload4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-download-4x.webp"
	name := "data/web/static/webp/cloud-download-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudDownload6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudDownload6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-download-6x.webp"
	name := "data/web/static/webp/cloud-download-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudDownload8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudDownload8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-download-8x.webp"
	name := "data/web/static/webp/cloud-download-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudDownloadWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudDownloadWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-download.webp"
	name := "data/web/static/webp/cloud-download.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudUpload2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudUpload2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-upload-2x.webp"
	name := "data/web/static/webp/cloud-upload-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudUpload3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudUpload3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-upload-3x.webp"
	name := "data/web/static/webp/cloud-upload-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudUpload4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudUpload4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-upload-4x.webp"
	name := "data/web/static/webp/cloud-upload-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudUpload6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudUpload6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-upload-6x.webp"
	name := "data/web/static/webp/cloud-upload-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudUpload8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudUpload8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-upload-8x.webp"
	name := "data/web/static/webp/cloud-upload-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudUploadWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudUploadWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud-upload.webp"
	name := "data/web/static/webp/cloud-upload.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloud.webp"
	name := "data/web/static/webp/cloud.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudy2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudy2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloudy-2x.webp"
	name := "data/web/static/webp/cloudy-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudy3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudy3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloudy-3x.webp"
	name := "data/web/static/webp/cloudy-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudy4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudy4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloudy-4x.webp"
	name := "data/web/static/webp/cloudy-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudy6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudy6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloudy-6x.webp"
	name := "data/web/static/webp/cloudy-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudy8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudy8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloudy-8x.webp"
	name := "data/web/static/webp/cloudy-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCloudyWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCloudyWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cloudy.webp"
	name := "data/web/static/webp/cloudy.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCode2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCode2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/code-2x.webp"
	name := "data/web/static/webp/code-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCode3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCode3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/code-3x.webp"
	name := "data/web/static/webp/code-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCode4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCode4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/code-4x.webp"
	name := "data/web/static/webp/code-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCode6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCode6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/code-6x.webp"
	name := "data/web/static/webp/code-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCode8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCode8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/code-8x.webp"
	name := "data/web/static/webp/code-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCodeWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCodeWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/code.webp"
	name := "data/web/static/webp/code.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCog2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCog2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cog-2x.webp"
	name := "data/web/static/webp/cog-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCog3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCog3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cog-3x.webp"
	name := "data/web/static/webp/cog-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCog4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCog4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cog-4x.webp"
	name := "data/web/static/webp/cog-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCog6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCog6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cog-6x.webp"
	name := "data/web/static/webp/cog-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCog8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCog8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cog-8x.webp"
	name := "data/web/static/webp/cog-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCogWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCogWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/cog.webp"
	name := "data/web/static/webp/cog.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseDown2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseDown2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-down-2x.webp"
	name := "data/web/static/webp/collapse-down-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseDown3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseDown3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-down-3x.webp"
	name := "data/web/static/webp/collapse-down-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseDown4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseDown4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-down-4x.webp"
	name := "data/web/static/webp/collapse-down-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseDown6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseDown6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-down-6x.webp"
	name := "data/web/static/webp/collapse-down-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseDown8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseDown8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-down-8x.webp"
	name := "data/web/static/webp/collapse-down-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseDownWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseDownWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-down.webp"
	name := "data/web/static/webp/collapse-down.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseLeft2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseLeft2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-left-2x.webp"
	name := "data/web/static/webp/collapse-left-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseLeft3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseLeft3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-left-3x.webp"
	name := "data/web/static/webp/collapse-left-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseLeft4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseLeft4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-left-4x.webp"
	name := "data/web/static/webp/collapse-left-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseLeft6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseLeft6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-left-6x.webp"
	name := "data/web/static/webp/collapse-left-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseLeft8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseLeft8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-left-8x.webp"
	name := "data/web/static/webp/collapse-left-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseLeftWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseLeftWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-left.webp"
	name := "data/web/static/webp/collapse-left.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseRight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseRight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-right-2x.webp"
	name := "data/web/static/webp/collapse-right-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseRight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseRight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-right-3x.webp"
	name := "data/web/static/webp/collapse-right-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseRight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseRight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-right-4x.webp"
	name := "data/web/static/webp/collapse-right-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseRight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseRight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-right-6x.webp"
	name := "data/web/static/webp/collapse-right-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseRight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseRight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-right-8x.webp"
	name := "data/web/static/webp/collapse-right-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseRightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseRightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-right.webp"
	name := "data/web/static/webp/collapse-right.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseUp2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseUp2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-up-2x.webp"
	name := "data/web/static/webp/collapse-up-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseUp3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseUp3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-up-3x.webp"
	name := "data/web/static/webp/collapse-up-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseUp4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseUp4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-up-4x.webp"
	name := "data/web/static/webp/collapse-up-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseUp6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseUp6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-up-6x.webp"
	name := "data/web/static/webp/collapse-up-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseUp8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseUp8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-up-8x.webp"
	name := "data/web/static/webp/collapse-up-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCollapseUpWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCollapseUpWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/collapse-up.webp"
	name := "data/web/static/webp/collapse-up.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommand2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommand2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/command-2x.webp"
	name := "data/web/static/webp/command-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommand3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommand3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/command-3x.webp"
	name := "data/web/static/webp/command-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommand4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommand4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/command-4x.webp"
	name := "data/web/static/webp/command-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommand6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommand6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/command-6x.webp"
	name := "data/web/static/webp/command-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommand8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommand8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/command-8x.webp"
	name := "data/web/static/webp/command-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommandWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommandWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/command.webp"
	name := "data/web/static/webp/command.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommentSquare2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommentSquare2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/comment-square-2x.webp"
	name := "data/web/static/webp/comment-square-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommentSquare3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommentSquare3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/comment-square-3x.webp"
	name := "data/web/static/webp/comment-square-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommentSquare4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommentSquare4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/comment-square-4x.webp"
	name := "data/web/static/webp/comment-square-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommentSquare6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommentSquare6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/comment-square-6x.webp"
	name := "data/web/static/webp/comment-square-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommentSquare8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommentSquare8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/comment-square-8x.webp"
	name := "data/web/static/webp/comment-square-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCommentSquareWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCommentSquareWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/comment-square.webp"
	name := "data/web/static/webp/comment-square.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCompass2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCompass2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/compass-2x.webp"
	name := "data/web/static/webp/compass-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCompass3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCompass3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/compass-3x.webp"
	name := "data/web/static/webp/compass-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCompass4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCompass4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/compass-4x.webp"
	name := "data/web/static/webp/compass-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCompass6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCompass6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/compass-6x.webp"
	name := "data/web/static/webp/compass-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCompass8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCompass8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/compass-8x.webp"
	name := "data/web/static/webp/compass-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCompassWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCompassWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/compass.webp"
	name := "data/web/static/webp/compass.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpContrast2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpContrast2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/contrast-2x.webp"
	name := "data/web/static/webp/contrast-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpContrast3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpContrast3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/contrast-3x.webp"
	name := "data/web/static/webp/contrast-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpContrast4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpContrast4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/contrast-4x.webp"
	name := "data/web/static/webp/contrast-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpContrast6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpContrast6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/contrast-6x.webp"
	name := "data/web/static/webp/contrast-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpContrast8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpContrast8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/contrast-8x.webp"
	name := "data/web/static/webp/contrast-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpContrastWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpContrastWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/contrast.webp"
	name := "data/web/static/webp/contrast.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCopywriting2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCopywriting2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/copywriting-2x.webp"
	name := "data/web/static/webp/copywriting-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCopywriting3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCopywriting3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/copywriting-3x.webp"
	name := "data/web/static/webp/copywriting-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCopywriting4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCopywriting4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/copywriting-4x.webp"
	name := "data/web/static/webp/copywriting-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCopywriting6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCopywriting6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/copywriting-6x.webp"
	name := "data/web/static/webp/copywriting-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCopywriting8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCopywriting8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/copywriting-8x.webp"
	name := "data/web/static/webp/copywriting-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCopywritingWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCopywritingWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/copywriting.webp"
	name := "data/web/static/webp/copywriting.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCreditCard2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCreditCard2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/credit-card-2x.webp"
	name := "data/web/static/webp/credit-card-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCreditCard3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCreditCard3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/credit-card-3x.webp"
	name := "data/web/static/webp/credit-card-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCreditCard4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCreditCard4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/credit-card-4x.webp"
	name := "data/web/static/webp/credit-card-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCreditCard6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCreditCard6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/credit-card-6x.webp"
	name := "data/web/static/webp/credit-card-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCreditCard8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCreditCard8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/credit-card-8x.webp"
	name := "data/web/static/webp/credit-card-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCreditCardWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCreditCardWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/credit-card.webp"
	name := "data/web/static/webp/credit-card.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCrop2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCrop2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/crop-2x.webp"
	name := "data/web/static/webp/crop-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCrop3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCrop3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/crop-3x.webp"
	name := "data/web/static/webp/crop-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCrop4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCrop4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/crop-4x.webp"
	name := "data/web/static/webp/crop-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCrop6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCrop6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/crop-6x.webp"
	name := "data/web/static/webp/crop-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCrop8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCrop8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/crop-8x.webp"
	name := "data/web/static/webp/crop-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpCropWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpCropWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/crop.webp"
	name := "data/web/static/webp/crop.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDashboard2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDashboard2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dashboard-2x.webp"
	name := "data/web/static/webp/dashboard-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDashboard3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDashboard3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dashboard-3x.webp"
	name := "data/web/static/webp/dashboard-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDashboard4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDashboard4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dashboard-4x.webp"
	name := "data/web/static/webp/dashboard-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDashboard6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDashboard6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dashboard-6x.webp"
	name := "data/web/static/webp/dashboard-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDashboard8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDashboard8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dashboard-8x.webp"
	name := "data/web/static/webp/dashboard-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDashboardWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDashboardWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dashboard.webp"
	name := "data/web/static/webp/dashboard.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferDownload2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferDownload2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-download-2x.webp"
	name := "data/web/static/webp/data-transfer-download-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferDownload3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferDownload3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-download-3x.webp"
	name := "data/web/static/webp/data-transfer-download-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferDownload4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferDownload4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-download-4x.webp"
	name := "data/web/static/webp/data-transfer-download-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferDownload6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferDownload6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-download-6x.webp"
	name := "data/web/static/webp/data-transfer-download-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferDownload8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferDownload8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-download-8x.webp"
	name := "data/web/static/webp/data-transfer-download-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferDownloadWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferDownloadWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-download.webp"
	name := "data/web/static/webp/data-transfer-download.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferUpload2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferUpload2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-upload-2x.webp"
	name := "data/web/static/webp/data-transfer-upload-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferUpload3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferUpload3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-upload-3x.webp"
	name := "data/web/static/webp/data-transfer-upload-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferUpload4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferUpload4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-upload-4x.webp"
	name := "data/web/static/webp/data-transfer-upload-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferUpload6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferUpload6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-upload-6x.webp"
	name := "data/web/static/webp/data-transfer-upload-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferUpload8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferUpload8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-upload-8x.webp"
	name := "data/web/static/webp/data-transfer-upload-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDataTransferUploadWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDataTransferUploadWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/data-transfer-upload.webp"
	name := "data/web/static/webp/data-transfer-upload.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDelete2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDelete2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/delete-2x.webp"
	name := "data/web/static/webp/delete-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDelete3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDelete3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/delete-3x.webp"
	name := "data/web/static/webp/delete-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDelete4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDelete4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/delete-4x.webp"
	name := "data/web/static/webp/delete-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDelete6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDelete6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/delete-6x.webp"
	name := "data/web/static/webp/delete-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDelete8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDelete8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/delete-8x.webp"
	name := "data/web/static/webp/delete-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDeleteWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDeleteWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/delete.webp"
	name := "data/web/static/webp/delete.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDial2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDial2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dial-2x.webp"
	name := "data/web/static/webp/dial-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDial3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDial3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dial-3x.webp"
	name := "data/web/static/webp/dial-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDial4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDial4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dial-4x.webp"
	name := "data/web/static/webp/dial-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDial6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDial6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dial-6x.webp"
	name := "data/web/static/webp/dial-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDial8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDial8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dial-8x.webp"
	name := "data/web/static/webp/dial-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDialWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDialWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dial.webp"
	name := "data/web/static/webp/dial.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDocument2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDocument2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/document-2x.webp"
	name := "data/web/static/webp/document-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDocument3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDocument3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/document-3x.webp"
	name := "data/web/static/webp/document-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDocument4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDocument4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/document-4x.webp"
	name := "data/web/static/webp/document-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDocument6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDocument6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/document-6x.webp"
	name := "data/web/static/webp/document-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDocument8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDocument8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/document-8x.webp"
	name := "data/web/static/webp/document-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDocumentWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDocumentWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/document.webp"
	name := "data/web/static/webp/document.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDollar2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDollar2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dollar-2x.webp"
	name := "data/web/static/webp/dollar-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDollar3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDollar3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dollar-3x.webp"
	name := "data/web/static/webp/dollar-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDollar4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDollar4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dollar-4x.webp"
	name := "data/web/static/webp/dollar-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDollar6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDollar6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dollar-6x.webp"
	name := "data/web/static/webp/dollar-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDollar8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDollar8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dollar-8x.webp"
	name := "data/web/static/webp/dollar-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDollarWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDollarWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/dollar.webp"
	name := "data/web/static/webp/dollar.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansLeft2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansLeft2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-left-2x.webp"
	name := "data/web/static/webp/double-quote-sans-left-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansLeft3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansLeft3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-left-3x.webp"
	name := "data/web/static/webp/double-quote-sans-left-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansLeft4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansLeft4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-left-4x.webp"
	name := "data/web/static/webp/double-quote-sans-left-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansLeft6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansLeft6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-left-6x.webp"
	name := "data/web/static/webp/double-quote-sans-left-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansLeft8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansLeft8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-left-8x.webp"
	name := "data/web/static/webp/double-quote-sans-left-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansLeftWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansLeftWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-left.webp"
	name := "data/web/static/webp/double-quote-sans-left.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansRight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansRight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-right-2x.webp"
	name := "data/web/static/webp/double-quote-sans-right-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansRight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansRight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-right-3x.webp"
	name := "data/web/static/webp/double-quote-sans-right-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansRight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansRight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-right-4x.webp"
	name := "data/web/static/webp/double-quote-sans-right-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansRight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansRight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-right-6x.webp"
	name := "data/web/static/webp/double-quote-sans-right-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansRight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansRight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-right-8x.webp"
	name := "data/web/static/webp/double-quote-sans-right-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSansRightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSansRightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-sans-right.webp"
	name := "data/web/static/webp/double-quote-sans-right.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifLeft2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifLeft2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-left-2x.webp"
	name := "data/web/static/webp/double-quote-serif-left-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifLeft3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifLeft3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-left-3x.webp"
	name := "data/web/static/webp/double-quote-serif-left-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifLeft4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifLeft4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-left-4x.webp"
	name := "data/web/static/webp/double-quote-serif-left-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifLeft6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifLeft6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-left-6x.webp"
	name := "data/web/static/webp/double-quote-serif-left-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifLeft8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifLeft8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-left-8x.webp"
	name := "data/web/static/webp/double-quote-serif-left-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifLeftWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifLeftWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-left.webp"
	name := "data/web/static/webp/double-quote-serif-left.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifRight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifRight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-right-2x.webp"
	name := "data/web/static/webp/double-quote-serif-right-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifRight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifRight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-right-3x.webp"
	name := "data/web/static/webp/double-quote-serif-right-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifRight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifRight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-right-4x.webp"
	name := "data/web/static/webp/double-quote-serif-right-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifRight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifRight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-right-6x.webp"
	name := "data/web/static/webp/double-quote-serif-right-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifRight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifRight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-right-8x.webp"
	name := "data/web/static/webp/double-quote-serif-right-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDoubleQuoteSerifRightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDoubleQuoteSerifRightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/double-quote-serif-right.webp"
	name := "data/web/static/webp/double-quote-serif-right.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDroplet2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDroplet2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/droplet-2x.webp"
	name := "data/web/static/webp/droplet-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDroplet3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDroplet3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/droplet-3x.webp"
	name := "data/web/static/webp/droplet-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDroplet4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDroplet4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/droplet-4x.webp"
	name := "data/web/static/webp/droplet-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDroplet6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDroplet6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/droplet-6x.webp"
	name := "data/web/static/webp/droplet-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDroplet8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDroplet8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/droplet-8x.webp"
	name := "data/web/static/webp/droplet-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpDropletWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpDropletWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/droplet.webp"
	name := "data/web/static/webp/droplet.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEject2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEject2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eject-2x.webp"
	name := "data/web/static/webp/eject-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEject3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEject3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eject-3x.webp"
	name := "data/web/static/webp/eject-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEject4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEject4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eject-4x.webp"
	name := "data/web/static/webp/eject-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEject6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEject6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eject-6x.webp"
	name := "data/web/static/webp/eject-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEject8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEject8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eject-8x.webp"
	name := "data/web/static/webp/eject-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEjectWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEjectWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eject.webp"
	name := "data/web/static/webp/eject.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpElevator2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpElevator2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/elevator-2x.webp"
	name := "data/web/static/webp/elevator-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpElevator3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpElevator3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/elevator-3x.webp"
	name := "data/web/static/webp/elevator-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpElevator4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpElevator4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/elevator-4x.webp"
	name := "data/web/static/webp/elevator-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpElevator6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpElevator6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/elevator-6x.webp"
	name := "data/web/static/webp/elevator-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpElevator8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpElevator8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/elevator-8x.webp"
	name := "data/web/static/webp/elevator-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpElevatorWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpElevatorWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/elevator.webp"
	name := "data/web/static/webp/elevator.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEllipses2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEllipses2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ellipses-2x.webp"
	name := "data/web/static/webp/ellipses-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEllipses3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEllipses3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ellipses-3x.webp"
	name := "data/web/static/webp/ellipses-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEllipses4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEllipses4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ellipses-4x.webp"
	name := "data/web/static/webp/ellipses-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEllipses6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEllipses6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ellipses-6x.webp"
	name := "data/web/static/webp/ellipses-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEllipses8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEllipses8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ellipses-8x.webp"
	name := "data/web/static/webp/ellipses-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEllipsesWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEllipsesWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/ellipses.webp"
	name := "data/web/static/webp/ellipses.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeClosed2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeClosed2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-closed-2x.webp"
	name := "data/web/static/webp/envelope-closed-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeClosed3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeClosed3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-closed-3x.webp"
	name := "data/web/static/webp/envelope-closed-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeClosed4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeClosed4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-closed-4x.webp"
	name := "data/web/static/webp/envelope-closed-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeClosed6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeClosed6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-closed-6x.webp"
	name := "data/web/static/webp/envelope-closed-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeClosed8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeClosed8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-closed-8x.webp"
	name := "data/web/static/webp/envelope-closed-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeClosedWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeClosedWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-closed.webp"
	name := "data/web/static/webp/envelope-closed.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeOpen2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeOpen2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-open-2x.webp"
	name := "data/web/static/webp/envelope-open-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeOpen3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeOpen3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-open-3x.webp"
	name := "data/web/static/webp/envelope-open-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeOpen4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeOpen4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-open-4x.webp"
	name := "data/web/static/webp/envelope-open-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeOpen6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeOpen6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-open-6x.webp"
	name := "data/web/static/webp/envelope-open-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeOpen8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeOpen8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-open-8x.webp"
	name := "data/web/static/webp/envelope-open-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEnvelopeOpenWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEnvelopeOpenWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/envelope-open.webp"
	name := "data/web/static/webp/envelope-open.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEuro2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEuro2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/euro-2x.webp"
	name := "data/web/static/webp/euro-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEuro3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEuro3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/euro-3x.webp"
	name := "data/web/static/webp/euro-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEuro4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEuro4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/euro-4x.webp"
	name := "data/web/static/webp/euro-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEuro6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEuro6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/euro-6x.webp"
	name := "data/web/static/webp/euro-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEuro8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEuro8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/euro-8x.webp"
	name := "data/web/static/webp/euro-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEuroWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEuroWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/euro.webp"
	name := "data/web/static/webp/euro.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExcerpt2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExcerpt2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/excerpt-2x.webp"
	name := "data/web/static/webp/excerpt-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExcerpt3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExcerpt3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/excerpt-3x.webp"
	name := "data/web/static/webp/excerpt-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExcerpt4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExcerpt4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/excerpt-4x.webp"
	name := "data/web/static/webp/excerpt-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExcerpt6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExcerpt6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/excerpt-6x.webp"
	name := "data/web/static/webp/excerpt-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExcerpt8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExcerpt8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/excerpt-8x.webp"
	name := "data/web/static/webp/excerpt-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExcerptWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExcerptWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/excerpt.webp"
	name := "data/web/static/webp/excerpt.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandDown2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandDown2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-down-2x.webp"
	name := "data/web/static/webp/expand-down-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandDown3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandDown3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-down-3x.webp"
	name := "data/web/static/webp/expand-down-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandDown4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandDown4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-down-4x.webp"
	name := "data/web/static/webp/expand-down-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandDown6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandDown6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-down-6x.webp"
	name := "data/web/static/webp/expand-down-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandDown8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandDown8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-down-8x.webp"
	name := "data/web/static/webp/expand-down-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandDownWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandDownWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-down.webp"
	name := "data/web/static/webp/expand-down.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandLeft2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandLeft2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-left-2x.webp"
	name := "data/web/static/webp/expand-left-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandLeft3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandLeft3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-left-3x.webp"
	name := "data/web/static/webp/expand-left-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandLeft4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandLeft4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-left-4x.webp"
	name := "data/web/static/webp/expand-left-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandLeft6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandLeft6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-left-6x.webp"
	name := "data/web/static/webp/expand-left-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandLeft8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandLeft8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-left-8x.webp"
	name := "data/web/static/webp/expand-left-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandLeftWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandLeftWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-left.webp"
	name := "data/web/static/webp/expand-left.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandRight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandRight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-right-2x.webp"
	name := "data/web/static/webp/expand-right-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandRight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandRight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-right-3x.webp"
	name := "data/web/static/webp/expand-right-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandRight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandRight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-right-4x.webp"
	name := "data/web/static/webp/expand-right-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandRight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandRight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-right-6x.webp"
	name := "data/web/static/webp/expand-right-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandRight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandRight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-right-8x.webp"
	name := "data/web/static/webp/expand-right-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandRightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandRightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-right.webp"
	name := "data/web/static/webp/expand-right.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandUp2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandUp2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-up-2x.webp"
	name := "data/web/static/webp/expand-up-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandUp3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandUp3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-up-3x.webp"
	name := "data/web/static/webp/expand-up-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandUp4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandUp4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-up-4x.webp"
	name := "data/web/static/webp/expand-up-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandUp6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandUp6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-up-6x.webp"
	name := "data/web/static/webp/expand-up-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandUp8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandUp8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-up-8x.webp"
	name := "data/web/static/webp/expand-up-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExpandUpWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExpandUpWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/expand-up.webp"
	name := "data/web/static/webp/expand-up.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExternalLink2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExternalLink2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/external-link-2x.webp"
	name := "data/web/static/webp/external-link-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExternalLink3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExternalLink3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/external-link-3x.webp"
	name := "data/web/static/webp/external-link-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExternalLink4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExternalLink4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/external-link-4x.webp"
	name := "data/web/static/webp/external-link-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExternalLink6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExternalLink6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/external-link-6x.webp"
	name := "data/web/static/webp/external-link-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExternalLink8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExternalLink8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/external-link-8x.webp"
	name := "data/web/static/webp/external-link-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpExternalLinkWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpExternalLinkWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/external-link.webp"
	name := "data/web/static/webp/external-link.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEye2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEye2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eye-2x.webp"
	name := "data/web/static/webp/eye-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEye3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEye3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eye-3x.webp"
	name := "data/web/static/webp/eye-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEye4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEye4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eye-4x.webp"
	name := "data/web/static/webp/eye-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEye6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEye6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eye-6x.webp"
	name := "data/web/static/webp/eye-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEye8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEye8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eye-8x.webp"
	name := "data/web/static/webp/eye-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEyeWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEyeWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eye.webp"
	name := "data/web/static/webp/eye.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEyedropper2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEyedropper2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eyedropper-2x.webp"
	name := "data/web/static/webp/eyedropper-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEyedropper3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEyedropper3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eyedropper-3x.webp"
	name := "data/web/static/webp/eyedropper-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEyedropper4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEyedropper4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eyedropper-4x.webp"
	name := "data/web/static/webp/eyedropper-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEyedropper6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEyedropper6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eyedropper-6x.webp"
	name := "data/web/static/webp/eyedropper-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEyedropper8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEyedropper8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eyedropper-8x.webp"
	name := "data/web/static/webp/eyedropper-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpEyedropperWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpEyedropperWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/eyedropper.webp"
	name := "data/web/static/webp/eyedropper.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFile2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFile2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/file-2x.webp"
	name := "data/web/static/webp/file-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFile3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFile3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/file-3x.webp"
	name := "data/web/static/webp/file-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFile4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFile4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/file-4x.webp"
	name := "data/web/static/webp/file-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFile6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFile6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/file-6x.webp"
	name := "data/web/static/webp/file-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFile8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFile8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/file-8x.webp"
	name := "data/web/static/webp/file-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFileWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFileWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/file.webp"
	name := "data/web/static/webp/file.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFire2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFire2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fire-2x.webp"
	name := "data/web/static/webp/fire-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFire3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFire3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fire-3x.webp"
	name := "data/web/static/webp/fire-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFire4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFire4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fire-4x.webp"
	name := "data/web/static/webp/fire-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFire6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFire6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fire-6x.webp"
	name := "data/web/static/webp/fire-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFire8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFire8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fire-8x.webp"
	name := "data/web/static/webp/fire-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFireWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFireWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fire.webp"
	name := "data/web/static/webp/fire.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlag2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlag2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flag-2x.webp"
	name := "data/web/static/webp/flag-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlag3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlag3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flag-3x.webp"
	name := "data/web/static/webp/flag-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlag4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlag4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flag-4x.webp"
	name := "data/web/static/webp/flag-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlag6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlag6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flag-6x.webp"
	name := "data/web/static/webp/flag-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlag8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlag8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flag-8x.webp"
	name := "data/web/static/webp/flag-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlagWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlagWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flag.webp"
	name := "data/web/static/webp/flag.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlash2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlash2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flash-2x.webp"
	name := "data/web/static/webp/flash-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlash3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlash3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flash-3x.webp"
	name := "data/web/static/webp/flash-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlash4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlash4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flash-4x.webp"
	name := "data/web/static/webp/flash-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlash6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlash6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flash-6x.webp"
	name := "data/web/static/webp/flash-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlash8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlash8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flash-8x.webp"
	name := "data/web/static/webp/flash-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFlashWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFlashWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/flash.webp"
	name := "data/web/static/webp/flash.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFolder2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFolder2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/folder-2x.webp"
	name := "data/web/static/webp/folder-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFolder3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFolder3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/folder-3x.webp"
	name := "data/web/static/webp/folder-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFolder4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFolder4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/folder-4x.webp"
	name := "data/web/static/webp/folder-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFolder6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFolder6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/folder-6x.webp"
	name := "data/web/static/webp/folder-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFolder8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFolder8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/folder-8x.webp"
	name := "data/web/static/webp/folder-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFolderWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFolderWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/folder.webp"
	name := "data/web/static/webp/folder.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFork2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFork2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fork-2x.webp"
	name := "data/web/static/webp/fork-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFork3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFork3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fork-3x.webp"
	name := "data/web/static/webp/fork-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFork4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFork4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fork-4x.webp"
	name := "data/web/static/webp/fork-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFork6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFork6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fork-6x.webp"
	name := "data/web/static/webp/fork-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFork8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFork8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fork-8x.webp"
	name := "data/web/static/webp/fork-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpForkWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpForkWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fork.webp"
	name := "data/web/static/webp/fork.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenEnter2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenEnter2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-enter-2x.webp"
	name := "data/web/static/webp/fullscreen-enter-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenEnter3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenEnter3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-enter-3x.webp"
	name := "data/web/static/webp/fullscreen-enter-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenEnter4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenEnter4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-enter-4x.webp"
	name := "data/web/static/webp/fullscreen-enter-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenEnter6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenEnter6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-enter-6x.webp"
	name := "data/web/static/webp/fullscreen-enter-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenEnter8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenEnter8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-enter-8x.webp"
	name := "data/web/static/webp/fullscreen-enter-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenEnterWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenEnterWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-enter.webp"
	name := "data/web/static/webp/fullscreen-enter.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenExit2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenExit2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-exit-2x.webp"
	name := "data/web/static/webp/fullscreen-exit-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenExit3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenExit3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-exit-3x.webp"
	name := "data/web/static/webp/fullscreen-exit-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenExit4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenExit4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-exit-4x.webp"
	name := "data/web/static/webp/fullscreen-exit-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenExit6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenExit6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-exit-6x.webp"
	name := "data/web/static/webp/fullscreen-exit-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenExit8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenExit8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-exit-8x.webp"
	name := "data/web/static/webp/fullscreen-exit-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpFullscreenExitWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpFullscreenExitWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/fullscreen-exit.webp"
	name := "data/web/static/webp/fullscreen-exit.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGlobe2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGlobe2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/globe-2x.webp"
	name := "data/web/static/webp/globe-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGlobe3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGlobe3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/globe-3x.webp"
	name := "data/web/static/webp/globe-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGlobe4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGlobe4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/globe-4x.webp"
	name := "data/web/static/webp/globe-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGlobe6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGlobe6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/globe-6x.webp"
	name := "data/web/static/webp/globe-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGlobe8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGlobe8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/globe-8x.webp"
	name := "data/web/static/webp/globe-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGlobeWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGlobeWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/globe.webp"
	name := "data/web/static/webp/globe.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGraph2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGraph2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/graph-2x.webp"
	name := "data/web/static/webp/graph-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGraph3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGraph3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/graph-3x.webp"
	name := "data/web/static/webp/graph-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGraph4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGraph4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/graph-4x.webp"
	name := "data/web/static/webp/graph-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGraph6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGraph6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/graph-6x.webp"
	name := "data/web/static/webp/graph-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGraph8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGraph8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/graph-8x.webp"
	name := "data/web/static/webp/graph-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGraphWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGraphWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/graph.webp"
	name := "data/web/static/webp/graph.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridFourUp2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridFourUp2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-four-up-2x.webp"
	name := "data/web/static/webp/grid-four-up-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridFourUp3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridFourUp3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-four-up-3x.webp"
	name := "data/web/static/webp/grid-four-up-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridFourUp4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridFourUp4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-four-up-4x.webp"
	name := "data/web/static/webp/grid-four-up-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridFourUp6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridFourUp6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-four-up-6x.webp"
	name := "data/web/static/webp/grid-four-up-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridFourUp8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridFourUp8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-four-up-8x.webp"
	name := "data/web/static/webp/grid-four-up-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridFourUpWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridFourUpWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-four-up.webp"
	name := "data/web/static/webp/grid-four-up.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridThreeUp2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridThreeUp2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-three-up-2x.webp"
	name := "data/web/static/webp/grid-three-up-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridThreeUp3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridThreeUp3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-three-up-3x.webp"
	name := "data/web/static/webp/grid-three-up-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridThreeUp4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridThreeUp4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-three-up-4x.webp"
	name := "data/web/static/webp/grid-three-up-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridThreeUp6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridThreeUp6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-three-up-6x.webp"
	name := "data/web/static/webp/grid-three-up-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridThreeUp8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridThreeUp8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-three-up-8x.webp"
	name := "data/web/static/webp/grid-three-up-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridThreeUpWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridThreeUpWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-three-up.webp"
	name := "data/web/static/webp/grid-three-up.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridTwoUp2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridTwoUp2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-two-up-2x.webp"
	name := "data/web/static/webp/grid-two-up-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridTwoUp3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridTwoUp3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-two-up-3x.webp"
	name := "data/web/static/webp/grid-two-up-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridTwoUp4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridTwoUp4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-two-up-4x.webp"
	name := "data/web/static/webp/grid-two-up-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridTwoUp6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridTwoUp6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-two-up-6x.webp"
	name := "data/web/static/webp/grid-two-up-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridTwoUp8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridTwoUp8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-two-up-8x.webp"
	name := "data/web/static/webp/grid-two-up-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpGridTwoUpWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpGridTwoUpWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/grid-two-up.webp"
	name := "data/web/static/webp/grid-two-up.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHardDrive2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHardDrive2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/hard-drive-2x.webp"
	name := "data/web/static/webp/hard-drive-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHardDrive3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHardDrive3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/hard-drive-3x.webp"
	name := "data/web/static/webp/hard-drive-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHardDrive4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHardDrive4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/hard-drive-4x.webp"
	name := "data/web/static/webp/hard-drive-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHardDrive6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHardDrive6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/hard-drive-6x.webp"
	name := "data/web/static/webp/hard-drive-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHardDrive8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHardDrive8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/hard-drive-8x.webp"
	name := "data/web/static/webp/hard-drive-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHardDriveWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHardDriveWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/hard-drive.webp"
	name := "data/web/static/webp/hard-drive.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeader2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeader2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/header-2x.webp"
	name := "data/web/static/webp/header-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeader3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeader3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/header-3x.webp"
	name := "data/web/static/webp/header-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeader4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeader4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/header-4x.webp"
	name := "data/web/static/webp/header-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeader6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeader6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/header-6x.webp"
	name := "data/web/static/webp/header-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeader8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeader8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/header-8x.webp"
	name := "data/web/static/webp/header-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeaderWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeaderWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/header.webp"
	name := "data/web/static/webp/header.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeadphones2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeadphones2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/headphones-2x.webp"
	name := "data/web/static/webp/headphones-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeadphones3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeadphones3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/headphones-3x.webp"
	name := "data/web/static/webp/headphones-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeadphones4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeadphones4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/headphones-4x.webp"
	name := "data/web/static/webp/headphones-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeadphones6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeadphones6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/headphones-6x.webp"
	name := "data/web/static/webp/headphones-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeadphones8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeadphones8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/headphones-8x.webp"
	name := "data/web/static/webp/headphones-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeadphonesWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeadphonesWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/headphones.webp"
	name := "data/web/static/webp/headphones.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeart2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeart2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/heart-2x.webp"
	name := "data/web/static/webp/heart-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeart3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeart3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/heart-3x.webp"
	name := "data/web/static/webp/heart-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeart4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeart4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/heart-4x.webp"
	name := "data/web/static/webp/heart-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeart6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeart6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/heart-6x.webp"
	name := "data/web/static/webp/heart-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeart8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeart8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/heart-8x.webp"
	name := "data/web/static/webp/heart-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHeartWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHeartWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/heart.webp"
	name := "data/web/static/webp/heart.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHome2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHome2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/home-2x.webp"
	name := "data/web/static/webp/home-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHome3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHome3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/home-3x.webp"
	name := "data/web/static/webp/home-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHome4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHome4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/home-4x.webp"
	name := "data/web/static/webp/home-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHome6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHome6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/home-6x.webp"
	name := "data/web/static/webp/home-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHome8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHome8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/home-8x.webp"
	name := "data/web/static/webp/home-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpHomeWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpHomeWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/home.webp"
	name := "data/web/static/webp/home.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpImage2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpImage2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/image-2x.webp"
	name := "data/web/static/webp/image-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpImage3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpImage3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/image-3x.webp"
	name := "data/web/static/webp/image-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpImage4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpImage4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/image-4x.webp"
	name := "data/web/static/webp/image-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpImage6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpImage6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/image-6x.webp"
	name := "data/web/static/webp/image-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpImage8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpImage8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/image-8x.webp"
	name := "data/web/static/webp/image-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpImageWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpImageWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/image.webp"
	name := "data/web/static/webp/image.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInbox2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInbox2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/inbox-2x.webp"
	name := "data/web/static/webp/inbox-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInbox3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInbox3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/inbox-3x.webp"
	name := "data/web/static/webp/inbox-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInbox4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInbox4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/inbox-4x.webp"
	name := "data/web/static/webp/inbox-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInbox6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInbox6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/inbox-6x.webp"
	name := "data/web/static/webp/inbox-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInbox8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInbox8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/inbox-8x.webp"
	name := "data/web/static/webp/inbox-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInboxWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInboxWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/inbox.webp"
	name := "data/web/static/webp/inbox.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfinity2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfinity2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/infinity-2x.webp"
	name := "data/web/static/webp/infinity-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfinity3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfinity3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/infinity-3x.webp"
	name := "data/web/static/webp/infinity-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfinity4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfinity4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/infinity-4x.webp"
	name := "data/web/static/webp/infinity-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfinity6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfinity6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/infinity-6x.webp"
	name := "data/web/static/webp/infinity-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfinity8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfinity8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/infinity-8x.webp"
	name := "data/web/static/webp/infinity-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfinityWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfinityWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/infinity.webp"
	name := "data/web/static/webp/infinity.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfo2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfo2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/info-2x.webp"
	name := "data/web/static/webp/info-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfo3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfo3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/info-3x.webp"
	name := "data/web/static/webp/info-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfo4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfo4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/info-4x.webp"
	name := "data/web/static/webp/info-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfo6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfo6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/info-6x.webp"
	name := "data/web/static/webp/info-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfo8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfo8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/info-8x.webp"
	name := "data/web/static/webp/info-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpInfoWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpInfoWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/info.webp"
	name := "data/web/static/webp/info.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpItalic2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpItalic2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/italic-2x.webp"
	name := "data/web/static/webp/italic-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpItalic3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpItalic3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/italic-3x.webp"
	name := "data/web/static/webp/italic-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpItalic4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpItalic4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/italic-4x.webp"
	name := "data/web/static/webp/italic-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpItalic6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpItalic6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/italic-6x.webp"
	name := "data/web/static/webp/italic-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpItalic8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpItalic8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/italic-8x.webp"
	name := "data/web/static/webp/italic-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpItalicWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpItalicWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/italic.webp"
	name := "data/web/static/webp/italic.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyCenter2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyCenter2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-center-2x.webp"
	name := "data/web/static/webp/justify-center-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyCenter3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyCenter3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-center-3x.webp"
	name := "data/web/static/webp/justify-center-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyCenter4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyCenter4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-center-4x.webp"
	name := "data/web/static/webp/justify-center-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyCenter6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyCenter6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-center-6x.webp"
	name := "data/web/static/webp/justify-center-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyCenter8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyCenter8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-center-8x.webp"
	name := "data/web/static/webp/justify-center-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyCenterWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyCenterWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-center.webp"
	name := "data/web/static/webp/justify-center.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyLeft2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyLeft2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-left-2x.webp"
	name := "data/web/static/webp/justify-left-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyLeft3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyLeft3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-left-3x.webp"
	name := "data/web/static/webp/justify-left-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyLeft4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyLeft4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-left-4x.webp"
	name := "data/web/static/webp/justify-left-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyLeft6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyLeft6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-left-6x.webp"
	name := "data/web/static/webp/justify-left-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyLeft8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyLeft8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-left-8x.webp"
	name := "data/web/static/webp/justify-left-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyLeftWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyLeftWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-left.webp"
	name := "data/web/static/webp/justify-left.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyRight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyRight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-right-2x.webp"
	name := "data/web/static/webp/justify-right-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyRight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyRight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-right-3x.webp"
	name := "data/web/static/webp/justify-right-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyRight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyRight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-right-4x.webp"
	name := "data/web/static/webp/justify-right-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyRight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyRight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-right-6x.webp"
	name := "data/web/static/webp/justify-right-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyRight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyRight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-right-8x.webp"
	name := "data/web/static/webp/justify-right-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpJustifyRightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpJustifyRightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/justify-right.webp"
	name := "data/web/static/webp/justify-right.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpKey2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpKey2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/key-2x.webp"
	name := "data/web/static/webp/key-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpKey3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpKey3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/key-3x.webp"
	name := "data/web/static/webp/key-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpKey4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpKey4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/key-4x.webp"
	name := "data/web/static/webp/key-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpKey6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpKey6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/key-6x.webp"
	name := "data/web/static/webp/key-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpKey8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpKey8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/key-8x.webp"
	name := "data/web/static/webp/key-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpKeyWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpKeyWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/key.webp"
	name := "data/web/static/webp/key.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLaptop2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLaptop2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/laptop-2x.webp"
	name := "data/web/static/webp/laptop-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLaptop3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLaptop3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/laptop-3x.webp"
	name := "data/web/static/webp/laptop-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLaptop4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLaptop4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/laptop-4x.webp"
	name := "data/web/static/webp/laptop-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLaptop6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLaptop6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/laptop-6x.webp"
	name := "data/web/static/webp/laptop-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLaptop8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLaptop8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/laptop-8x.webp"
	name := "data/web/static/webp/laptop-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLaptopWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLaptopWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/laptop.webp"
	name := "data/web/static/webp/laptop.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLayers2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLayers2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/layers-2x.webp"
	name := "data/web/static/webp/layers-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLayers3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLayers3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/layers-3x.webp"
	name := "data/web/static/webp/layers-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLayers4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLayers4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/layers-4x.webp"
	name := "data/web/static/webp/layers-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLayers6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLayers6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/layers-6x.webp"
	name := "data/web/static/webp/layers-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLayers8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLayers8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/layers-8x.webp"
	name := "data/web/static/webp/layers-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLayersWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLayersWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/layers.webp"
	name := "data/web/static/webp/layers.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLightbulb2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLightbulb2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lightbulb-2x.webp"
	name := "data/web/static/webp/lightbulb-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLightbulb3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLightbulb3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lightbulb-3x.webp"
	name := "data/web/static/webp/lightbulb-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLightbulb4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLightbulb4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lightbulb-4x.webp"
	name := "data/web/static/webp/lightbulb-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLightbulb6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLightbulb6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lightbulb-6x.webp"
	name := "data/web/static/webp/lightbulb-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLightbulb8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLightbulb8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lightbulb-8x.webp"
	name := "data/web/static/webp/lightbulb-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLightbulbWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLightbulbWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lightbulb.webp"
	name := "data/web/static/webp/lightbulb.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkBroken2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkBroken2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-broken-2x.webp"
	name := "data/web/static/webp/link-broken-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkBroken3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkBroken3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-broken-3x.webp"
	name := "data/web/static/webp/link-broken-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkBroken4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkBroken4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-broken-4x.webp"
	name := "data/web/static/webp/link-broken-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkBroken6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkBroken6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-broken-6x.webp"
	name := "data/web/static/webp/link-broken-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkBroken8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkBroken8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-broken-8x.webp"
	name := "data/web/static/webp/link-broken-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkBrokenWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkBrokenWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-broken.webp"
	name := "data/web/static/webp/link-broken.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkIntact2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkIntact2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-intact-2x.webp"
	name := "data/web/static/webp/link-intact-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkIntact3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkIntact3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-intact-3x.webp"
	name := "data/web/static/webp/link-intact-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkIntact4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkIntact4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-intact-4x.webp"
	name := "data/web/static/webp/link-intact-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkIntact6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkIntact6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-intact-6x.webp"
	name := "data/web/static/webp/link-intact-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkIntact8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkIntact8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-intact-8x.webp"
	name := "data/web/static/webp/link-intact-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLinkIntactWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLinkIntactWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/link-intact.webp"
	name := "data/web/static/webp/link-intact.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpList2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpList2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list-2x.webp"
	name := "data/web/static/webp/list-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpList3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpList3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list-3x.webp"
	name := "data/web/static/webp/list-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpList4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpList4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list-4x.webp"
	name := "data/web/static/webp/list-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpList6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpList6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list-6x.webp"
	name := "data/web/static/webp/list-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpList8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpList8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list-8x.webp"
	name := "data/web/static/webp/list-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpListRich2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpListRich2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list-rich-2x.webp"
	name := "data/web/static/webp/list-rich-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpListRich3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpListRich3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list-rich-3x.webp"
	name := "data/web/static/webp/list-rich-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpListRich4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpListRich4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list-rich-4x.webp"
	name := "data/web/static/webp/list-rich-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpListRich6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpListRich6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list-rich-6x.webp"
	name := "data/web/static/webp/list-rich-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpListRich8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpListRich8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list-rich-8x.webp"
	name := "data/web/static/webp/list-rich-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpListRichWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpListRichWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list-rich.webp"
	name := "data/web/static/webp/list-rich.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpListWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpListWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/list.webp"
	name := "data/web/static/webp/list.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLocation2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLocation2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/location-2x.webp"
	name := "data/web/static/webp/location-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLocation3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLocation3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/location-3x.webp"
	name := "data/web/static/webp/location-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLocation4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLocation4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/location-4x.webp"
	name := "data/web/static/webp/location-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLocation6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLocation6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/location-6x.webp"
	name := "data/web/static/webp/location-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLocation8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLocation8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/location-8x.webp"
	name := "data/web/static/webp/location-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLocationWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLocationWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/location.webp"
	name := "data/web/static/webp/location.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockLocked2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockLocked2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-locked-2x.webp"
	name := "data/web/static/webp/lock-locked-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockLocked3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockLocked3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-locked-3x.webp"
	name := "data/web/static/webp/lock-locked-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockLocked4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockLocked4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-locked-4x.webp"
	name := "data/web/static/webp/lock-locked-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockLocked6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockLocked6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-locked-6x.webp"
	name := "data/web/static/webp/lock-locked-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockLocked8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockLocked8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-locked-8x.webp"
	name := "data/web/static/webp/lock-locked-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockLockedWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockLockedWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-locked.webp"
	name := "data/web/static/webp/lock-locked.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockUnlocked2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockUnlocked2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-unlocked-2x.webp"
	name := "data/web/static/webp/lock-unlocked-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockUnlocked3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockUnlocked3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-unlocked-3x.webp"
	name := "data/web/static/webp/lock-unlocked-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockUnlocked4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockUnlocked4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-unlocked-4x.webp"
	name := "data/web/static/webp/lock-unlocked-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockUnlocked6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockUnlocked6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-unlocked-6x.webp"
	name := "data/web/static/webp/lock-unlocked-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockUnlocked8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockUnlocked8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-unlocked-8x.webp"
	name := "data/web/static/webp/lock-unlocked-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLockUnlockedWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLockUnlockedWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/lock-unlocked.webp"
	name := "data/web/static/webp/lock-unlocked.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoop2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoop2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-2x.webp"
	name := "data/web/static/webp/loop-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoop3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoop3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-3x.webp"
	name := "data/web/static/webp/loop-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoop4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoop4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-4x.webp"
	name := "data/web/static/webp/loop-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoop6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoop6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-6x.webp"
	name := "data/web/static/webp/loop-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoop8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoop8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-8x.webp"
	name := "data/web/static/webp/loop-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopCircular2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopCircular2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-circular-2x.webp"
	name := "data/web/static/webp/loop-circular-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopCircular3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopCircular3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-circular-3x.webp"
	name := "data/web/static/webp/loop-circular-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopCircular4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopCircular4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-circular-4x.webp"
	name := "data/web/static/webp/loop-circular-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopCircular6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopCircular6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-circular-6x.webp"
	name := "data/web/static/webp/loop-circular-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopCircular8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopCircular8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-circular-8x.webp"
	name := "data/web/static/webp/loop-circular-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopCircularWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopCircularWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-circular.webp"
	name := "data/web/static/webp/loop-circular.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopSquare2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopSquare2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-square-2x.webp"
	name := "data/web/static/webp/loop-square-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopSquare3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopSquare3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-square-3x.webp"
	name := "data/web/static/webp/loop-square-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopSquare4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopSquare4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-square-4x.webp"
	name := "data/web/static/webp/loop-square-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopSquare6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopSquare6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-square-6x.webp"
	name := "data/web/static/webp/loop-square-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopSquare8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopSquare8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-square-8x.webp"
	name := "data/web/static/webp/loop-square-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopSquareWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopSquareWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop-square.webp"
	name := "data/web/static/webp/loop-square.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpLoopWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpLoopWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/loop.webp"
	name := "data/web/static/webp/loop.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMagnifyingGlass2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMagnifyingGlass2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/magnifying-glass-2x.webp"
	name := "data/web/static/webp/magnifying-glass-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMagnifyingGlass3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMagnifyingGlass3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/magnifying-glass-3x.webp"
	name := "data/web/static/webp/magnifying-glass-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMagnifyingGlass4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMagnifyingGlass4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/magnifying-glass-4x.webp"
	name := "data/web/static/webp/magnifying-glass-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMagnifyingGlass6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMagnifyingGlass6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/magnifying-glass-6x.webp"
	name := "data/web/static/webp/magnifying-glass-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMagnifyingGlass8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMagnifyingGlass8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/magnifying-glass-8x.webp"
	name := "data/web/static/webp/magnifying-glass-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMagnifyingGlassWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMagnifyingGlassWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/magnifying-glass.webp"
	name := "data/web/static/webp/magnifying-glass.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMap2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMap2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map-2x.webp"
	name := "data/web/static/webp/map-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMap3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMap3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map-3x.webp"
	name := "data/web/static/webp/map-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMap4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMap4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map-4x.webp"
	name := "data/web/static/webp/map-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMap6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMap6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map-6x.webp"
	name := "data/web/static/webp/map-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMap8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMap8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map-8x.webp"
	name := "data/web/static/webp/map-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMapMarker2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMapMarker2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map-marker-2x.webp"
	name := "data/web/static/webp/map-marker-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMapMarker3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMapMarker3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map-marker-3x.webp"
	name := "data/web/static/webp/map-marker-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMapMarker4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMapMarker4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map-marker-4x.webp"
	name := "data/web/static/webp/map-marker-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMapMarker6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMapMarker6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map-marker-6x.webp"
	name := "data/web/static/webp/map-marker-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMapMarker8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMapMarker8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map-marker-8x.webp"
	name := "data/web/static/webp/map-marker-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMapMarkerWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMapMarkerWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map-marker.webp"
	name := "data/web/static/webp/map-marker.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMapWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMapWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/map.webp"
	name := "data/web/static/webp/map.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPause2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPause2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-pause-2x.webp"
	name := "data/web/static/webp/media-pause-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPause3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPause3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-pause-3x.webp"
	name := "data/web/static/webp/media-pause-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPause4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPause4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-pause-4x.webp"
	name := "data/web/static/webp/media-pause-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPause6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPause6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-pause-6x.webp"
	name := "data/web/static/webp/media-pause-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPause8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPause8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-pause-8x.webp"
	name := "data/web/static/webp/media-pause-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPauseWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPauseWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-pause.webp"
	name := "data/web/static/webp/media-pause.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPlay2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPlay2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-play-2x.webp"
	name := "data/web/static/webp/media-play-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPlay3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPlay3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-play-3x.webp"
	name := "data/web/static/webp/media-play-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPlay4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPlay4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-play-4x.webp"
	name := "data/web/static/webp/media-play-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPlay6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPlay6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-play-6x.webp"
	name := "data/web/static/webp/media-play-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPlay8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPlay8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-play-8x.webp"
	name := "data/web/static/webp/media-play-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaPlayWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaPlayWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-play.webp"
	name := "data/web/static/webp/media-play.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaRecord2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaRecord2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-record-2x.webp"
	name := "data/web/static/webp/media-record-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaRecord3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaRecord3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-record-3x.webp"
	name := "data/web/static/webp/media-record-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaRecord4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaRecord4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-record-4x.webp"
	name := "data/web/static/webp/media-record-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaRecord6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaRecord6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-record-6x.webp"
	name := "data/web/static/webp/media-record-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaRecord8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaRecord8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-record-8x.webp"
	name := "data/web/static/webp/media-record-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaRecordWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaRecordWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-record.webp"
	name := "data/web/static/webp/media-record.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipBackward2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipBackward2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-backward-2x.webp"
	name := "data/web/static/webp/media-skip-backward-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipBackward3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipBackward3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-backward-3x.webp"
	name := "data/web/static/webp/media-skip-backward-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipBackward4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipBackward4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-backward-4x.webp"
	name := "data/web/static/webp/media-skip-backward-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipBackward6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipBackward6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-backward-6x.webp"
	name := "data/web/static/webp/media-skip-backward-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipBackward8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipBackward8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-backward-8x.webp"
	name := "data/web/static/webp/media-skip-backward-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipBackwardWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipBackwardWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-backward.webp"
	name := "data/web/static/webp/media-skip-backward.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipForward2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipForward2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-forward-2x.webp"
	name := "data/web/static/webp/media-skip-forward-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipForward3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipForward3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-forward-3x.webp"
	name := "data/web/static/webp/media-skip-forward-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipForward4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipForward4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-forward-4x.webp"
	name := "data/web/static/webp/media-skip-forward-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipForward6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipForward6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-forward-6x.webp"
	name := "data/web/static/webp/media-skip-forward-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipForward8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipForward8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-forward-8x.webp"
	name := "data/web/static/webp/media-skip-forward-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaSkipForwardWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaSkipForwardWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-skip-forward.webp"
	name := "data/web/static/webp/media-skip-forward.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepBackward2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepBackward2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-backward-2x.webp"
	name := "data/web/static/webp/media-step-backward-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepBackward3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepBackward3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-backward-3x.webp"
	name := "data/web/static/webp/media-step-backward-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepBackward4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepBackward4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-backward-4x.webp"
	name := "data/web/static/webp/media-step-backward-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepBackward6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepBackward6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-backward-6x.webp"
	name := "data/web/static/webp/media-step-backward-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepBackward8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepBackward8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-backward-8x.webp"
	name := "data/web/static/webp/media-step-backward-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepBackwardWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepBackwardWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-backward.webp"
	name := "data/web/static/webp/media-step-backward.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepForward2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepForward2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-forward-2x.webp"
	name := "data/web/static/webp/media-step-forward-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepForward3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepForward3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-forward-3x.webp"
	name := "data/web/static/webp/media-step-forward-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepForward4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepForward4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-forward-4x.webp"
	name := "data/web/static/webp/media-step-forward-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepForward6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepForward6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-forward-6x.webp"
	name := "data/web/static/webp/media-step-forward-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepForward8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepForward8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-forward-8x.webp"
	name := "data/web/static/webp/media-step-forward-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStepForwardWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStepForwardWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-step-forward.webp"
	name := "data/web/static/webp/media-step-forward.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStop2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStop2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-stop-2x.webp"
	name := "data/web/static/webp/media-stop-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStop3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStop3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-stop-3x.webp"
	name := "data/web/static/webp/media-stop-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStop4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStop4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-stop-4x.webp"
	name := "data/web/static/webp/media-stop-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStop6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStop6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-stop-6x.webp"
	name := "data/web/static/webp/media-stop-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStop8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStop8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-stop-8x.webp"
	name := "data/web/static/webp/media-stop-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMediaStopWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMediaStopWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/media-stop.webp"
	name := "data/web/static/webp/media-stop.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMedicalCross2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMedicalCross2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/medical-cross-2x.webp"
	name := "data/web/static/webp/medical-cross-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMedicalCross3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMedicalCross3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/medical-cross-3x.webp"
	name := "data/web/static/webp/medical-cross-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMedicalCross4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMedicalCross4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/medical-cross-4x.webp"
	name := "data/web/static/webp/medical-cross-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMedicalCross6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMedicalCross6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/medical-cross-6x.webp"
	name := "data/web/static/webp/medical-cross-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMedicalCross8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMedicalCross8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/medical-cross-8x.webp"
	name := "data/web/static/webp/medical-cross-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMedicalCrossWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMedicalCrossWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/medical-cross.webp"
	name := "data/web/static/webp/medical-cross.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMenu2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMenu2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/menu-2x.webp"
	name := "data/web/static/webp/menu-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMenu3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMenu3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/menu-3x.webp"
	name := "data/web/static/webp/menu-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMenu4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMenu4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/menu-4x.webp"
	name := "data/web/static/webp/menu-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMenu6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMenu6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/menu-6x.webp"
	name := "data/web/static/webp/menu-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMenu8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMenu8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/menu-8x.webp"
	name := "data/web/static/webp/menu-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMenuWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMenuWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/menu.webp"
	name := "data/web/static/webp/menu.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMicrophone2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMicrophone2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/microphone-2x.webp"
	name := "data/web/static/webp/microphone-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMicrophone3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMicrophone3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/microphone-3x.webp"
	name := "data/web/static/webp/microphone-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMicrophone4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMicrophone4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/microphone-4x.webp"
	name := "data/web/static/webp/microphone-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMicrophone6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMicrophone6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/microphone-6x.webp"
	name := "data/web/static/webp/microphone-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMicrophone8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMicrophone8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/microphone-8x.webp"
	name := "data/web/static/webp/microphone-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMicrophoneWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMicrophoneWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/microphone.webp"
	name := "data/web/static/webp/microphone.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMinus2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMinus2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/minus-2x.webp"
	name := "data/web/static/webp/minus-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMinus3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMinus3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/minus-3x.webp"
	name := "data/web/static/webp/minus-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMinus4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMinus4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/minus-4x.webp"
	name := "data/web/static/webp/minus-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMinus6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMinus6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/minus-6x.webp"
	name := "data/web/static/webp/minus-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMinus8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMinus8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/minus-8x.webp"
	name := "data/web/static/webp/minus-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMinusWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMinusWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/minus.webp"
	name := "data/web/static/webp/minus.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMonitor2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMonitor2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/monitor-2x.webp"
	name := "data/web/static/webp/monitor-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMonitor3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMonitor3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/monitor-3x.webp"
	name := "data/web/static/webp/monitor-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMonitor4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMonitor4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/monitor-4x.webp"
	name := "data/web/static/webp/monitor-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMonitor6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMonitor6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/monitor-6x.webp"
	name := "data/web/static/webp/monitor-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMonitor8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMonitor8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/monitor-8x.webp"
	name := "data/web/static/webp/monitor-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMonitorWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMonitorWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/monitor.webp"
	name := "data/web/static/webp/monitor.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMoon2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMoon2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/moon-2x.webp"
	name := "data/web/static/webp/moon-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMoon3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMoon3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/moon-3x.webp"
	name := "data/web/static/webp/moon-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMoon4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMoon4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/moon-4x.webp"
	name := "data/web/static/webp/moon-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMoon6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMoon6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/moon-6x.webp"
	name := "data/web/static/webp/moon-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMoon8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMoon8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/moon-8x.webp"
	name := "data/web/static/webp/moon-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMoonWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMoonWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/moon.webp"
	name := "data/web/static/webp/moon.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMove2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMove2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/move-2x.webp"
	name := "data/web/static/webp/move-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMove3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMove3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/move-3x.webp"
	name := "data/web/static/webp/move-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMove4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMove4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/move-4x.webp"
	name := "data/web/static/webp/move-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMove6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMove6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/move-6x.webp"
	name := "data/web/static/webp/move-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMove8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMove8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/move-8x.webp"
	name := "data/web/static/webp/move-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMoveWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMoveWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/move.webp"
	name := "data/web/static/webp/move.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMusicalNote2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMusicalNote2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/musical-note-2x.webp"
	name := "data/web/static/webp/musical-note-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMusicalNote3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMusicalNote3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/musical-note-3x.webp"
	name := "data/web/static/webp/musical-note-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMusicalNote4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMusicalNote4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/musical-note-4x.webp"
	name := "data/web/static/webp/musical-note-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMusicalNote6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMusicalNote6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/musical-note-6x.webp"
	name := "data/web/static/webp/musical-note-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMusicalNote8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMusicalNote8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/musical-note-8x.webp"
	name := "data/web/static/webp/musical-note-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpMusicalNoteWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpMusicalNoteWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/musical-note.webp"
	name := "data/web/static/webp/musical-note.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPaperclip2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPaperclip2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/paperclip-2x.webp"
	name := "data/web/static/webp/paperclip-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPaperclip3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPaperclip3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/paperclip-3x.webp"
	name := "data/web/static/webp/paperclip-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPaperclip4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPaperclip4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/paperclip-4x.webp"
	name := "data/web/static/webp/paperclip-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPaperclip6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPaperclip6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/paperclip-6x.webp"
	name := "data/web/static/webp/paperclip-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPaperclip8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPaperclip8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/paperclip-8x.webp"
	name := "data/web/static/webp/paperclip-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPaperclipWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPaperclipWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/paperclip.webp"
	name := "data/web/static/webp/paperclip.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPencil2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPencil2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pencil-2x.webp"
	name := "data/web/static/webp/pencil-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPencil3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPencil3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pencil-3x.webp"
	name := "data/web/static/webp/pencil-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPencil4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPencil4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pencil-4x.webp"
	name := "data/web/static/webp/pencil-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPencil6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPencil6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pencil-6x.webp"
	name := "data/web/static/webp/pencil-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPencil8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPencil8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pencil-8x.webp"
	name := "data/web/static/webp/pencil-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPencilWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPencilWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pencil.webp"
	name := "data/web/static/webp/pencil.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPeople2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPeople2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/people-2x.webp"
	name := "data/web/static/webp/people-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPeople3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPeople3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/people-3x.webp"
	name := "data/web/static/webp/people-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPeople4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPeople4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/people-4x.webp"
	name := "data/web/static/webp/people-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPeople6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPeople6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/people-6x.webp"
	name := "data/web/static/webp/people-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPeople8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPeople8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/people-8x.webp"
	name := "data/web/static/webp/people-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPeopleWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPeopleWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/people.webp"
	name := "data/web/static/webp/people.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPerson2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPerson2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/person-2x.webp"
	name := "data/web/static/webp/person-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPerson3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPerson3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/person-3x.webp"
	name := "data/web/static/webp/person-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPerson4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPerson4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/person-4x.webp"
	name := "data/web/static/webp/person-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPerson6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPerson6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/person-6x.webp"
	name := "data/web/static/webp/person-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPerson8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPerson8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/person-8x.webp"
	name := "data/web/static/webp/person-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPersonWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPersonWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/person.webp"
	name := "data/web/static/webp/person.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPhone2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPhone2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/phone-2x.webp"
	name := "data/web/static/webp/phone-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPhone3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPhone3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/phone-3x.webp"
	name := "data/web/static/webp/phone-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPhone4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPhone4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/phone-4x.webp"
	name := "data/web/static/webp/phone-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPhone6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPhone6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/phone-6x.webp"
	name := "data/web/static/webp/phone-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPhone8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPhone8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/phone-8x.webp"
	name := "data/web/static/webp/phone-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPhoneWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPhoneWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/phone.webp"
	name := "data/web/static/webp/phone.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPieChart2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPieChart2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pie-chart-2x.webp"
	name := "data/web/static/webp/pie-chart-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPieChart3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPieChart3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pie-chart-3x.webp"
	name := "data/web/static/webp/pie-chart-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPieChart4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPieChart4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pie-chart-4x.webp"
	name := "data/web/static/webp/pie-chart-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPieChart6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPieChart6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pie-chart-6x.webp"
	name := "data/web/static/webp/pie-chart-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPieChart8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPieChart8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pie-chart-8x.webp"
	name := "data/web/static/webp/pie-chart-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPieChartWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPieChartWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pie-chart.webp"
	name := "data/web/static/webp/pie-chart.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPin2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPin2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pin-2x.webp"
	name := "data/web/static/webp/pin-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPin3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPin3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pin-3x.webp"
	name := "data/web/static/webp/pin-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPin4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPin4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pin-4x.webp"
	name := "data/web/static/webp/pin-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPin6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPin6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pin-6x.webp"
	name := "data/web/static/webp/pin-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPin8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPin8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pin-8x.webp"
	name := "data/web/static/webp/pin-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPinWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPinWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pin.webp"
	name := "data/web/static/webp/pin.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlayCircle2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlayCircle2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/play-circle-2x.webp"
	name := "data/web/static/webp/play-circle-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlayCircle3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlayCircle3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/play-circle-3x.webp"
	name := "data/web/static/webp/play-circle-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlayCircle4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlayCircle4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/play-circle-4x.webp"
	name := "data/web/static/webp/play-circle-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlayCircle6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlayCircle6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/play-circle-6x.webp"
	name := "data/web/static/webp/play-circle-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlayCircle8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlayCircle8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/play-circle-8x.webp"
	name := "data/web/static/webp/play-circle-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlayCircleWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlayCircleWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/play-circle.webp"
	name := "data/web/static/webp/play-circle.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlus2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlus2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/plus-2x.webp"
	name := "data/web/static/webp/plus-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlus3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlus3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/plus-3x.webp"
	name := "data/web/static/webp/plus-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlus4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlus4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/plus-4x.webp"
	name := "data/web/static/webp/plus-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlus6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlus6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/plus-6x.webp"
	name := "data/web/static/webp/plus-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlus8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlus8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/plus-8x.webp"
	name := "data/web/static/webp/plus-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPlusWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPlusWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/plus.webp"
	name := "data/web/static/webp/plus.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPowerStandby2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPowerStandby2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/power-standby-2x.webp"
	name := "data/web/static/webp/power-standby-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPowerStandby3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPowerStandby3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/power-standby-3x.webp"
	name := "data/web/static/webp/power-standby-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPowerStandby4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPowerStandby4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/power-standby-4x.webp"
	name := "data/web/static/webp/power-standby-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPowerStandby6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPowerStandby6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/power-standby-6x.webp"
	name := "data/web/static/webp/power-standby-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPowerStandby8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPowerStandby8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/power-standby-8x.webp"
	name := "data/web/static/webp/power-standby-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPowerStandbyWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPowerStandbyWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/power-standby.webp"
	name := "data/web/static/webp/power-standby.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPrint2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPrint2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/print-2x.webp"
	name := "data/web/static/webp/print-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPrint3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPrint3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/print-3x.webp"
	name := "data/web/static/webp/print-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPrint4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPrint4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/print-4x.webp"
	name := "data/web/static/webp/print-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPrint6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPrint6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/print-6x.webp"
	name := "data/web/static/webp/print-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPrint8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPrint8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/print-8x.webp"
	name := "data/web/static/webp/print-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPrintWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPrintWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/print.webp"
	name := "data/web/static/webp/print.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpProject2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpProject2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/project-2x.webp"
	name := "data/web/static/webp/project-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpProject3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpProject3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/project-3x.webp"
	name := "data/web/static/webp/project-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpProject4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpProject4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/project-4x.webp"
	name := "data/web/static/webp/project-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpProject6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpProject6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/project-6x.webp"
	name := "data/web/static/webp/project-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpProject8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpProject8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/project-8x.webp"
	name := "data/web/static/webp/project-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpProjectWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpProjectWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/project.webp"
	name := "data/web/static/webp/project.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPulse2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPulse2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pulse-2x.webp"
	name := "data/web/static/webp/pulse-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPulse3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPulse3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pulse-3x.webp"
	name := "data/web/static/webp/pulse-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPulse4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPulse4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pulse-4x.webp"
	name := "data/web/static/webp/pulse-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPulse6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPulse6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pulse-6x.webp"
	name := "data/web/static/webp/pulse-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPulse8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPulse8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pulse-8x.webp"
	name := "data/web/static/webp/pulse-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPulseWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPulseWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/pulse.webp"
	name := "data/web/static/webp/pulse.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPuzzlePiece2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPuzzlePiece2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/puzzle-piece-2x.webp"
	name := "data/web/static/webp/puzzle-piece-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPuzzlePiece3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPuzzlePiece3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/puzzle-piece-3x.webp"
	name := "data/web/static/webp/puzzle-piece-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPuzzlePiece4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPuzzlePiece4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/puzzle-piece-4x.webp"
	name := "data/web/static/webp/puzzle-piece-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPuzzlePiece6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPuzzlePiece6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/puzzle-piece-6x.webp"
	name := "data/web/static/webp/puzzle-piece-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPuzzlePiece8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPuzzlePiece8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/puzzle-piece-8x.webp"
	name := "data/web/static/webp/puzzle-piece-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpPuzzlePieceWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpPuzzlePieceWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/puzzle-piece.webp"
	name := "data/web/static/webp/puzzle-piece.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpQuestionMark2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpQuestionMark2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/question-mark-2x.webp"
	name := "data/web/static/webp/question-mark-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpQuestionMark3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpQuestionMark3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/question-mark-3x.webp"
	name := "data/web/static/webp/question-mark-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpQuestionMark4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpQuestionMark4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/question-mark-4x.webp"
	name := "data/web/static/webp/question-mark-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpQuestionMark6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpQuestionMark6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/question-mark-6x.webp"
	name := "data/web/static/webp/question-mark-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpQuestionMark8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpQuestionMark8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/question-mark-8x.webp"
	name := "data/web/static/webp/question-mark-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpQuestionMarkWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpQuestionMarkWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/question-mark.webp"
	name := "data/web/static/webp/question-mark.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRain2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRain2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rain-2x.webp"
	name := "data/web/static/webp/rain-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRain3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRain3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rain-3x.webp"
	name := "data/web/static/webp/rain-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRain4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRain4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rain-4x.webp"
	name := "data/web/static/webp/rain-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRain6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRain6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rain-6x.webp"
	name := "data/web/static/webp/rain-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRain8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRain8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rain-8x.webp"
	name := "data/web/static/webp/rain-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRainWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRainWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rain.webp"
	name := "data/web/static/webp/rain.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRandom2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRandom2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/random-2x.webp"
	name := "data/web/static/webp/random-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRandom3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRandom3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/random-3x.webp"
	name := "data/web/static/webp/random-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRandom4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRandom4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/random-4x.webp"
	name := "data/web/static/webp/random-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRandom6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRandom6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/random-6x.webp"
	name := "data/web/static/webp/random-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRandom8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRandom8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/random-8x.webp"
	name := "data/web/static/webp/random-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRandomWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRandomWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/random.webp"
	name := "data/web/static/webp/random.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpReload2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpReload2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/reload-2x.webp"
	name := "data/web/static/webp/reload-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpReload3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpReload3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/reload-3x.webp"
	name := "data/web/static/webp/reload-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpReload4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpReload4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/reload-4x.webp"
	name := "data/web/static/webp/reload-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpReload6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpReload6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/reload-6x.webp"
	name := "data/web/static/webp/reload-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpReload8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpReload8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/reload-8x.webp"
	name := "data/web/static/webp/reload-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpReloadWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpReloadWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/reload.webp"
	name := "data/web/static/webp/reload.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeBoth2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeBoth2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-both-2x.webp"
	name := "data/web/static/webp/resize-both-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeBoth3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeBoth3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-both-3x.webp"
	name := "data/web/static/webp/resize-both-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeBoth4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeBoth4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-both-4x.webp"
	name := "data/web/static/webp/resize-both-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeBoth6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeBoth6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-both-6x.webp"
	name := "data/web/static/webp/resize-both-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeBoth8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeBoth8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-both-8x.webp"
	name := "data/web/static/webp/resize-both-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeBothWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeBothWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-both.webp"
	name := "data/web/static/webp/resize-both.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeHeight2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeHeight2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-height-2x.webp"
	name := "data/web/static/webp/resize-height-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeHeight3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeHeight3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-height-3x.webp"
	name := "data/web/static/webp/resize-height-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeHeight4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeHeight4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-height-4x.webp"
	name := "data/web/static/webp/resize-height-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeHeight6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeHeight6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-height-6x.webp"
	name := "data/web/static/webp/resize-height-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeHeight8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeHeight8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-height-8x.webp"
	name := "data/web/static/webp/resize-height-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeHeightWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeHeightWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-height.webp"
	name := "data/web/static/webp/resize-height.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeWidth2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeWidth2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-width-2x.webp"
	name := "data/web/static/webp/resize-width-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeWidth3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeWidth3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-width-3x.webp"
	name := "data/web/static/webp/resize-width-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeWidth4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeWidth4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-width-4x.webp"
	name := "data/web/static/webp/resize-width-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeWidth6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeWidth6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-width-6x.webp"
	name := "data/web/static/webp/resize-width-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeWidth8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeWidth8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-width-8x.webp"
	name := "data/web/static/webp/resize-width-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpResizeWidthWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpResizeWidthWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/resize-width.webp"
	name := "data/web/static/webp/resize-width.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRss2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRss2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss-2x.webp"
	name := "data/web/static/webp/rss-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRss3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRss3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss-3x.webp"
	name := "data/web/static/webp/rss-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRss4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRss4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss-4x.webp"
	name := "data/web/static/webp/rss-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRss6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRss6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss-6x.webp"
	name := "data/web/static/webp/rss-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRss8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRss8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss-8x.webp"
	name := "data/web/static/webp/rss-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRssAlt2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRssAlt2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss-alt-2x.webp"
	name := "data/web/static/webp/rss-alt-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRssAlt3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRssAlt3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss-alt-3x.webp"
	name := "data/web/static/webp/rss-alt-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRssAlt4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRssAlt4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss-alt-4x.webp"
	name := "data/web/static/webp/rss-alt-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRssAlt6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRssAlt6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss-alt-6x.webp"
	name := "data/web/static/webp/rss-alt-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRssAlt8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRssAlt8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss-alt-8x.webp"
	name := "data/web/static/webp/rss-alt-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRssAltWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRssAltWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss-alt.webp"
	name := "data/web/static/webp/rss-alt.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpRssWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpRssWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/rss.webp"
	name := "data/web/static/webp/rss.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpScript2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpScript2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/script-2x.webp"
	name := "data/web/static/webp/script-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpScript3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpScript3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/script-3x.webp"
	name := "data/web/static/webp/script-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpScript4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpScript4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/script-4x.webp"
	name := "data/web/static/webp/script-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpScript6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpScript6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/script-6x.webp"
	name := "data/web/static/webp/script-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpScript8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpScript8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/script-8x.webp"
	name := "data/web/static/webp/script-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpScriptWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpScriptWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/script.webp"
	name := "data/web/static/webp/script.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShare2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShare2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share-2x.webp"
	name := "data/web/static/webp/share-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShare3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShare3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share-3x.webp"
	name := "data/web/static/webp/share-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShare4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShare4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share-4x.webp"
	name := "data/web/static/webp/share-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShare6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShare6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share-6x.webp"
	name := "data/web/static/webp/share-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShare8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShare8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share-8x.webp"
	name := "data/web/static/webp/share-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShareBoxed2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShareBoxed2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share-boxed-2x.webp"
	name := "data/web/static/webp/share-boxed-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShareBoxed3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShareBoxed3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share-boxed-3x.webp"
	name := "data/web/static/webp/share-boxed-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShareBoxed4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShareBoxed4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share-boxed-4x.webp"
	name := "data/web/static/webp/share-boxed-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShareBoxed6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShareBoxed6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share-boxed-6x.webp"
	name := "data/web/static/webp/share-boxed-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShareBoxed8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShareBoxed8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share-boxed-8x.webp"
	name := "data/web/static/webp/share-boxed-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShareBoxedWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShareBoxedWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share-boxed.webp"
	name := "data/web/static/webp/share-boxed.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShareWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShareWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/share.webp"
	name := "data/web/static/webp/share.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShield2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShield2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/shield-2x.webp"
	name := "data/web/static/webp/shield-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShield3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShield3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/shield-3x.webp"
	name := "data/web/static/webp/shield-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShield4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShield4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/shield-4x.webp"
	name := "data/web/static/webp/shield-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShield6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShield6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/shield-6x.webp"
	name := "data/web/static/webp/shield-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShield8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShield8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/shield-8x.webp"
	name := "data/web/static/webp/shield-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpShieldWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpShieldWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/shield.webp"
	name := "data/web/static/webp/shield.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignal2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignal2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signal-2x.webp"
	name := "data/web/static/webp/signal-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignal3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignal3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signal-3x.webp"
	name := "data/web/static/webp/signal-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignal4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignal4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signal-4x.webp"
	name := "data/web/static/webp/signal-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignal6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignal6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signal-6x.webp"
	name := "data/web/static/webp/signal-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignal8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignal8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signal-8x.webp"
	name := "data/web/static/webp/signal-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignalWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignalWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signal.webp"
	name := "data/web/static/webp/signal.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignpost2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignpost2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signpost-2x.webp"
	name := "data/web/static/webp/signpost-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignpost3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignpost3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signpost-3x.webp"
	name := "data/web/static/webp/signpost-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignpost4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignpost4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signpost-4x.webp"
	name := "data/web/static/webp/signpost-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignpost6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignpost6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signpost-6x.webp"
	name := "data/web/static/webp/signpost-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignpost8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignpost8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signpost-8x.webp"
	name := "data/web/static/webp/signpost-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSignpostWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSignpostWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/signpost.webp"
	name := "data/web/static/webp/signpost.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortAscending2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortAscending2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-ascending-2x.webp"
	name := "data/web/static/webp/sort-ascending-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortAscending3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortAscending3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-ascending-3x.webp"
	name := "data/web/static/webp/sort-ascending-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortAscending4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortAscending4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-ascending-4x.webp"
	name := "data/web/static/webp/sort-ascending-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortAscending6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortAscending6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-ascending-6x.webp"
	name := "data/web/static/webp/sort-ascending-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortAscending8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortAscending8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-ascending-8x.webp"
	name := "data/web/static/webp/sort-ascending-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortAscendingWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortAscendingWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-ascending.webp"
	name := "data/web/static/webp/sort-ascending.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortDescending2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortDescending2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-descending-2x.webp"
	name := "data/web/static/webp/sort-descending-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortDescending3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortDescending3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-descending-3x.webp"
	name := "data/web/static/webp/sort-descending-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortDescending4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortDescending4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-descending-4x.webp"
	name := "data/web/static/webp/sort-descending-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortDescending6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortDescending6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-descending-6x.webp"
	name := "data/web/static/webp/sort-descending-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortDescending8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortDescending8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-descending-8x.webp"
	name := "data/web/static/webp/sort-descending-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSortDescendingWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSortDescendingWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sort-descending.webp"
	name := "data/web/static/webp/sort-descending.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSpreadsheet2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSpreadsheet2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/spreadsheet-2x.webp"
	name := "data/web/static/webp/spreadsheet-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSpreadsheet3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSpreadsheet3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/spreadsheet-3x.webp"
	name := "data/web/static/webp/spreadsheet-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSpreadsheet4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSpreadsheet4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/spreadsheet-4x.webp"
	name := "data/web/static/webp/spreadsheet-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSpreadsheet6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSpreadsheet6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/spreadsheet-6x.webp"
	name := "data/web/static/webp/spreadsheet-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSpreadsheet8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSpreadsheet8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/spreadsheet-8x.webp"
	name := "data/web/static/webp/spreadsheet-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSpreadsheetWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSpreadsheetWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/spreadsheet.webp"
	name := "data/web/static/webp/spreadsheet.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpStar2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpStar2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/star-2x.webp"
	name := "data/web/static/webp/star-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpStar3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpStar3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/star-3x.webp"
	name := "data/web/static/webp/star-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpStar4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpStar4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/star-4x.webp"
	name := "data/web/static/webp/star-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpStar6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpStar6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/star-6x.webp"
	name := "data/web/static/webp/star-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpStar8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpStar8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/star-8x.webp"
	name := "data/web/static/webp/star-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpStarWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpStarWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/star.webp"
	name := "data/web/static/webp/star.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSun2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSun2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sun-2x.webp"
	name := "data/web/static/webp/sun-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSun3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSun3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sun-3x.webp"
	name := "data/web/static/webp/sun-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSun4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSun4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sun-4x.webp"
	name := "data/web/static/webp/sun-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSun6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSun6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sun-6x.webp"
	name := "data/web/static/webp/sun-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSun8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSun8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sun-8x.webp"
	name := "data/web/static/webp/sun-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpSunWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpSunWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/sun.webp"
	name := "data/web/static/webp/sun.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTablet2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTablet2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tablet-2x.webp"
	name := "data/web/static/webp/tablet-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTablet3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTablet3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tablet-3x.webp"
	name := "data/web/static/webp/tablet-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTablet4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTablet4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tablet-4x.webp"
	name := "data/web/static/webp/tablet-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTablet6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTablet6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tablet-6x.webp"
	name := "data/web/static/webp/tablet-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTablet8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTablet8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tablet-8x.webp"
	name := "data/web/static/webp/tablet-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTabletWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTabletWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tablet.webp"
	name := "data/web/static/webp/tablet.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTag2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTag2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tag-2x.webp"
	name := "data/web/static/webp/tag-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTag3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTag3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tag-3x.webp"
	name := "data/web/static/webp/tag-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTag4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTag4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tag-4x.webp"
	name := "data/web/static/webp/tag-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTag6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTag6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tag-6x.webp"
	name := "data/web/static/webp/tag-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTag8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTag8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tag-8x.webp"
	name := "data/web/static/webp/tag-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTagWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTagWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tag.webp"
	name := "data/web/static/webp/tag.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTags2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTags2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tags-2x.webp"
	name := "data/web/static/webp/tags-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTags3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTags3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tags-3x.webp"
	name := "data/web/static/webp/tags-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTags4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTags4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tags-4x.webp"
	name := "data/web/static/webp/tags-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTags6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTags6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tags-6x.webp"
	name := "data/web/static/webp/tags-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTags8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTags8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tags-8x.webp"
	name := "data/web/static/webp/tags-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTagsWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTagsWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/tags.webp"
	name := "data/web/static/webp/tags.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTarget2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTarget2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/target-2x.webp"
	name := "data/web/static/webp/target-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTarget3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTarget3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/target-3x.webp"
	name := "data/web/static/webp/target-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTarget4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTarget4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/target-4x.webp"
	name := "data/web/static/webp/target-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTarget6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTarget6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/target-6x.webp"
	name := "data/web/static/webp/target-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTarget8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTarget8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/target-8x.webp"
	name := "data/web/static/webp/target-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTargetWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTargetWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/target.webp"
	name := "data/web/static/webp/target.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTask2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTask2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/task-2x.webp"
	name := "data/web/static/webp/task-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTask3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTask3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/task-3x.webp"
	name := "data/web/static/webp/task-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTask4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTask4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/task-4x.webp"
	name := "data/web/static/webp/task-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTask6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTask6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/task-6x.webp"
	name := "data/web/static/webp/task-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTask8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTask8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/task-8x.webp"
	name := "data/web/static/webp/task-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTaskWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTaskWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/task.webp"
	name := "data/web/static/webp/task.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTerminal2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTerminal2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/terminal-2x.webp"
	name := "data/web/static/webp/terminal-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTerminal3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTerminal3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/terminal-3x.webp"
	name := "data/web/static/webp/terminal-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTerminal4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTerminal4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/terminal-4x.webp"
	name := "data/web/static/webp/terminal-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTerminal6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTerminal6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/terminal-6x.webp"
	name := "data/web/static/webp/terminal-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTerminal8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTerminal8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/terminal-8x.webp"
	name := "data/web/static/webp/terminal-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTerminalWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTerminalWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/terminal.webp"
	name := "data/web/static/webp/terminal.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpText2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpText2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/text-2x.webp"
	name := "data/web/static/webp/text-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpText3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpText3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/text-3x.webp"
	name := "data/web/static/webp/text-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpText4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpText4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/text-4x.webp"
	name := "data/web/static/webp/text-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpText6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpText6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/text-6x.webp"
	name := "data/web/static/webp/text-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpText8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpText8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/text-8x.webp"
	name := "data/web/static/webp/text-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTextWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTextWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/text.webp"
	name := "data/web/static/webp/text.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbDown2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbDown2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-down-2x.webp"
	name := "data/web/static/webp/thumb-down-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbDown3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbDown3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-down-3x.webp"
	name := "data/web/static/webp/thumb-down-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbDown4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbDown4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-down-4x.webp"
	name := "data/web/static/webp/thumb-down-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbDown6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbDown6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-down-6x.webp"
	name := "data/web/static/webp/thumb-down-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbDown8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbDown8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-down-8x.webp"
	name := "data/web/static/webp/thumb-down-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbDownWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbDownWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-down.webp"
	name := "data/web/static/webp/thumb-down.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbUp2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbUp2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-up-2x.webp"
	name := "data/web/static/webp/thumb-up-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbUp3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbUp3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-up-3x.webp"
	name := "data/web/static/webp/thumb-up-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbUp4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbUp4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-up-4x.webp"
	name := "data/web/static/webp/thumb-up-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbUp6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbUp6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-up-6x.webp"
	name := "data/web/static/webp/thumb-up-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbUp8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbUp8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-up-8x.webp"
	name := "data/web/static/webp/thumb-up-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpThumbUpWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpThumbUpWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/thumb-up.webp"
	name := "data/web/static/webp/thumb-up.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTimer2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTimer2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/timer-2x.webp"
	name := "data/web/static/webp/timer-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTimer3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTimer3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/timer-3x.webp"
	name := "data/web/static/webp/timer-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTimer4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTimer4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/timer-4x.webp"
	name := "data/web/static/webp/timer-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTimer6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTimer6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/timer-6x.webp"
	name := "data/web/static/webp/timer-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTimer8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTimer8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/timer-8x.webp"
	name := "data/web/static/webp/timer-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTimerWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTimerWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/timer.webp"
	name := "data/web/static/webp/timer.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTransfer2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTransfer2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/transfer-2x.webp"
	name := "data/web/static/webp/transfer-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTransfer3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTransfer3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/transfer-3x.webp"
	name := "data/web/static/webp/transfer-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTransfer4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTransfer4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/transfer-4x.webp"
	name := "data/web/static/webp/transfer-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTransfer6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTransfer6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/transfer-6x.webp"
	name := "data/web/static/webp/transfer-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTransfer8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTransfer8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/transfer-8x.webp"
	name := "data/web/static/webp/transfer-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTransferWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTransferWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/transfer.webp"
	name := "data/web/static/webp/transfer.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTrash2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTrash2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/trash-2x.webp"
	name := "data/web/static/webp/trash-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTrash3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTrash3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/trash-3x.webp"
	name := "data/web/static/webp/trash-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTrash4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTrash4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/trash-4x.webp"
	name := "data/web/static/webp/trash-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTrash6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTrash6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/trash-6x.webp"
	name := "data/web/static/webp/trash-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTrash8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTrash8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/trash-8x.webp"
	name := "data/web/static/webp/trash-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpTrashWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpTrashWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/trash.webp"
	name := "data/web/static/webp/trash.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpUnderline2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpUnderline2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/underline-2x.webp"
	name := "data/web/static/webp/underline-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpUnderline3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpUnderline3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/underline-3x.webp"
	name := "data/web/static/webp/underline-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpUnderline4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpUnderline4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/underline-4x.webp"
	name := "data/web/static/webp/underline-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpUnderline6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpUnderline6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/underline-6x.webp"
	name := "data/web/static/webp/underline-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpUnderline8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpUnderline8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/underline-8x.webp"
	name := "data/web/static/webp/underline-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpUnderlineWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpUnderlineWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/underline.webp"
	name := "data/web/static/webp/underline.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignBottom2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignBottom2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-bottom-2x.webp"
	name := "data/web/static/webp/vertical-align-bottom-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignBottom3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignBottom3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-bottom-3x.webp"
	name := "data/web/static/webp/vertical-align-bottom-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignBottom4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignBottom4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-bottom-4x.webp"
	name := "data/web/static/webp/vertical-align-bottom-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignBottom6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignBottom6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-bottom-6x.webp"
	name := "data/web/static/webp/vertical-align-bottom-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignBottom8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignBottom8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-bottom-8x.webp"
	name := "data/web/static/webp/vertical-align-bottom-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignBottomWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignBottomWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-bottom.webp"
	name := "data/web/static/webp/vertical-align-bottom.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignCenter2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignCenter2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-center-2x.webp"
	name := "data/web/static/webp/vertical-align-center-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignCenter3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignCenter3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-center-3x.webp"
	name := "data/web/static/webp/vertical-align-center-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignCenter4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignCenter4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-center-4x.webp"
	name := "data/web/static/webp/vertical-align-center-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignCenter6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignCenter6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-center-6x.webp"
	name := "data/web/static/webp/vertical-align-center-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignCenter8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignCenter8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-center-8x.webp"
	name := "data/web/static/webp/vertical-align-center-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignCenterWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignCenterWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-center.webp"
	name := "data/web/static/webp/vertical-align-center.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignTop2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignTop2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-top-2x.webp"
	name := "data/web/static/webp/vertical-align-top-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignTop3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignTop3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-top-3x.webp"
	name := "data/web/static/webp/vertical-align-top-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignTop4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignTop4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-top-4x.webp"
	name := "data/web/static/webp/vertical-align-top-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignTop6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignTop6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-top-6x.webp"
	name := "data/web/static/webp/vertical-align-top-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignTop8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignTop8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-top-8x.webp"
	name := "data/web/static/webp/vertical-align-top-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVerticalAlignTopWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVerticalAlignTopWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/vertical-align-top.webp"
	name := "data/web/static/webp/vertical-align-top.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVideo2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVideo2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/video-2x.webp"
	name := "data/web/static/webp/video-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVideo3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVideo3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/video-3x.webp"
	name := "data/web/static/webp/video-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVideo4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVideo4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/video-4x.webp"
	name := "data/web/static/webp/video-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVideo6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVideo6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/video-6x.webp"
	name := "data/web/static/webp/video-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVideo8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVideo8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/video-8x.webp"
	name := "data/web/static/webp/video-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVideoWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVideoWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/video.webp"
	name := "data/web/static/webp/video.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeHigh2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeHigh2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-high-2x.webp"
	name := "data/web/static/webp/volume-high-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeHigh3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeHigh3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-high-3x.webp"
	name := "data/web/static/webp/volume-high-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeHigh4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeHigh4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-high-4x.webp"
	name := "data/web/static/webp/volume-high-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeHigh6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeHigh6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-high-6x.webp"
	name := "data/web/static/webp/volume-high-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeHigh8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeHigh8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-high-8x.webp"
	name := "data/web/static/webp/volume-high-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeHighWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeHighWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-high.webp"
	name := "data/web/static/webp/volume-high.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeLow2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeLow2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-low-2x.webp"
	name := "data/web/static/webp/volume-low-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeLow3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeLow3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-low-3x.webp"
	name := "data/web/static/webp/volume-low-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeLow4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeLow4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-low-4x.webp"
	name := "data/web/static/webp/volume-low-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeLow6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeLow6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-low-6x.webp"
	name := "data/web/static/webp/volume-low-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeLow8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeLow8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-low-8x.webp"
	name := "data/web/static/webp/volume-low-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeLowWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeLowWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-low.webp"
	name := "data/web/static/webp/volume-low.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeOff2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeOff2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-off-2x.webp"
	name := "data/web/static/webp/volume-off-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeOff3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeOff3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-off-3x.webp"
	name := "data/web/static/webp/volume-off-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeOff4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeOff4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-off-4x.webp"
	name := "data/web/static/webp/volume-off-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeOff6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeOff6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-off-6x.webp"
	name := "data/web/static/webp/volume-off-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeOff8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeOff8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-off-8x.webp"
	name := "data/web/static/webp/volume-off-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpVolumeOffWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpVolumeOffWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/volume-off.webp"
	name := "data/web/static/webp/volume-off.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWarning2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWarning2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/warning-2x.webp"
	name := "data/web/static/webp/warning-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWarning3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWarning3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/warning-3x.webp"
	name := "data/web/static/webp/warning-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWarning4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWarning4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/warning-4x.webp"
	name := "data/web/static/webp/warning-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWarning6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWarning6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/warning-6x.webp"
	name := "data/web/static/webp/warning-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWarning8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWarning8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/warning-8x.webp"
	name := "data/web/static/webp/warning-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWarningWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWarningWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/warning.webp"
	name := "data/web/static/webp/warning.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWifi2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWifi2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wifi-2x.webp"
	name := "data/web/static/webp/wifi-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWifi3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWifi3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wifi-3x.webp"
	name := "data/web/static/webp/wifi-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWifi4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWifi4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wifi-4x.webp"
	name := "data/web/static/webp/wifi-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWifi6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWifi6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wifi-6x.webp"
	name := "data/web/static/webp/wifi-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWifi8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWifi8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wifi-8x.webp"
	name := "data/web/static/webp/wifi-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWifiWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWifiWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wifi.webp"
	name := "data/web/static/webp/wifi.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWrench2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWrench2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wrench-2x.webp"
	name := "data/web/static/webp/wrench-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWrench3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWrench3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wrench-3x.webp"
	name := "data/web/static/webp/wrench-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWrench4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWrench4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wrench-4x.webp"
	name := "data/web/static/webp/wrench-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWrench6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWrench6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wrench-6x.webp"
	name := "data/web/static/webp/wrench-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWrench8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWrench8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wrench-8x.webp"
	name := "data/web/static/webp/wrench-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpWrenchWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpWrenchWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/wrench.webp"
	name := "data/web/static/webp/wrench.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpX2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpX2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/x-2x.webp"
	name := "data/web/static/webp/x-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpX3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpX3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/x-3x.webp"
	name := "data/web/static/webp/x-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpX4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpX4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/x-4x.webp"
	name := "data/web/static/webp/x-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpX6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpX6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/x-6x.webp"
	name := "data/web/static/webp/x-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpX8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpX8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/x-8x.webp"
	name := "data/web/static/webp/x-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpXWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpXWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/x.webp"
	name := "data/web/static/webp/x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpYen2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpYen2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/yen-2x.webp"
	name := "data/web/static/webp/yen-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpYen3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpYen3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/yen-3x.webp"
	name := "data/web/static/webp/yen-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpYen4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpYen4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/yen-4x.webp"
	name := "data/web/static/webp/yen-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpYen6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpYen6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/yen-6x.webp"
	name := "data/web/static/webp/yen-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpYen8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpYen8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/yen-8x.webp"
	name := "data/web/static/webp/yen-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpYenWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpYenWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/yen.webp"
	name := "data/web/static/webp/yen.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomIn2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomIn2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-in-2x.webp"
	name := "data/web/static/webp/zoom-in-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomIn3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomIn3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-in-3x.webp"
	name := "data/web/static/webp/zoom-in-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomIn4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomIn4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-in-4x.webp"
	name := "data/web/static/webp/zoom-in-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomIn6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomIn6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-in-6x.webp"
	name := "data/web/static/webp/zoom-in-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomIn8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomIn8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-in-8x.webp"
	name := "data/web/static/webp/zoom-in-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomInWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomInWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-in.webp"
	name := "data/web/static/webp/zoom-in.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomOut2xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomOut2xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-out-2x.webp"
	name := "data/web/static/webp/zoom-out-2x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomOut3xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomOut3xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-out-3x.webp"
	name := "data/web/static/webp/zoom-out-3x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomOut4xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomOut4xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-out-4x.webp"
	name := "data/web/static/webp/zoom-out-4x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomOut6xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomOut6xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-out-6x.webp"
	name := "data/web/static/webp/zoom-out-6x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomOut8xWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomOut8xWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-out-8x.webp"
	name := "data/web/static/webp/zoom-out-8x.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebStaticWebpZoomOutWebp reads file data from disk. It returns an error on failure.
func dataWebStaticWebpZoomOutWebp() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/static/webp/zoom-out.webp"
	name := "data/web/static/webp/zoom-out.webp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebTemplates403Tpl reads file data from disk. It returns an error on failure.
func dataWebTemplates403Tpl() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/templates/403.tpl"
	name := "data/web/templates/403.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebTemplatesLayoutTpl reads file data from disk. It returns an error on failure.
func dataWebTemplatesLayoutTpl() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/templates/layout.tpl"
	name := "data/web/templates/layout.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebTemplatesNodeChildrenTpl reads file data from disk. It returns an error on failure.
func dataWebTemplatesNodeChildrenTpl() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/templates/node-children.tpl"
	name := "data/web/templates/node-children.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataWebTemplatesNodeContentTpl reads file data from disk. It returns an error on failure.
func dataWebTemplatesNodeContentTpl() (*asset, error) {
	path := "/home/jonathan/workspace/ldss/data/web/templates/node-content.tpl"
	name := "data/web/templates/node-content.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/help/config":                                      dataHelpConfig,
	"data/help/download":                                    dataHelpDownload,
	"data/help/help":                                        dataHelpHelp,
	"data/reference/eng":                                    dataReferenceEng,
	"data/reference/example":                                dataReferenceExample,
	"data/web/static/css/stylesheet.css":                    dataWebStaticCssStylesheetCss,
	"data/web/static/favicon.ico":                           dataWebStaticFaviconIco,
	"data/web/static/svg/account-login.svg":                 dataWebStaticSvgAccountLoginSvg,
	"data/web/static/svg/account-logout.svg":                dataWebStaticSvgAccountLogoutSvg,
	"data/web/static/svg/action-redo.svg":                   dataWebStaticSvgActionRedoSvg,
	"data/web/static/svg/action-undo.svg":                   dataWebStaticSvgActionUndoSvg,
	"data/web/static/svg/align-center.svg":                  dataWebStaticSvgAlignCenterSvg,
	"data/web/static/svg/align-left.svg":                    dataWebStaticSvgAlignLeftSvg,
	"data/web/static/svg/align-right.svg":                   dataWebStaticSvgAlignRightSvg,
	"data/web/static/svg/aperture.svg":                      dataWebStaticSvgApertureSvg,
	"data/web/static/svg/arrow-bottom.svg":                  dataWebStaticSvgArrowBottomSvg,
	"data/web/static/svg/arrow-circle-bottom.svg":           dataWebStaticSvgArrowCircleBottomSvg,
	"data/web/static/svg/arrow-circle-left.svg":             dataWebStaticSvgArrowCircleLeftSvg,
	"data/web/static/svg/arrow-circle-right.svg":            dataWebStaticSvgArrowCircleRightSvg,
	"data/web/static/svg/arrow-circle-top.svg":              dataWebStaticSvgArrowCircleTopSvg,
	"data/web/static/svg/arrow-left.svg":                    dataWebStaticSvgArrowLeftSvg,
	"data/web/static/svg/arrow-right.svg":                   dataWebStaticSvgArrowRightSvg,
	"data/web/static/svg/arrow-thick-bottom.svg":            dataWebStaticSvgArrowThickBottomSvg,
	"data/web/static/svg/arrow-thick-left.svg":              dataWebStaticSvgArrowThickLeftSvg,
	"data/web/static/svg/arrow-thick-right.svg":             dataWebStaticSvgArrowThickRightSvg,
	"data/web/static/svg/arrow-thick-top.svg":               dataWebStaticSvgArrowThickTopSvg,
	"data/web/static/svg/arrow-top.svg":                     dataWebStaticSvgArrowTopSvg,
	"data/web/static/svg/audio-spectrum.svg":                dataWebStaticSvgAudioSpectrumSvg,
	"data/web/static/svg/audio.svg":                         dataWebStaticSvgAudioSvg,
	"data/web/static/svg/badge.svg":                         dataWebStaticSvgBadgeSvg,
	"data/web/static/svg/ban.svg":                           dataWebStaticSvgBanSvg,
	"data/web/static/svg/bar-chart.svg":                     dataWebStaticSvgBarChartSvg,
	"data/web/static/svg/basket.svg":                        dataWebStaticSvgBasketSvg,
	"data/web/static/svg/battery-empty.svg":                 dataWebStaticSvgBatteryEmptySvg,
	"data/web/static/svg/battery-full.svg":                  dataWebStaticSvgBatteryFullSvg,
	"data/web/static/svg/beaker.svg":                        dataWebStaticSvgBeakerSvg,
	"data/web/static/svg/bell.svg":                          dataWebStaticSvgBellSvg,
	"data/web/static/svg/bluetooth.svg":                     dataWebStaticSvgBluetoothSvg,
	"data/web/static/svg/bold.svg":                          dataWebStaticSvgBoldSvg,
	"data/web/static/svg/bolt.svg":                          dataWebStaticSvgBoltSvg,
	"data/web/static/svg/book.svg":                          dataWebStaticSvgBookSvg,
	"data/web/static/svg/bookmark.svg":                      dataWebStaticSvgBookmarkSvg,
	"data/web/static/svg/box.svg":                           dataWebStaticSvgBoxSvg,
	"data/web/static/svg/briefcase.svg":                     dataWebStaticSvgBriefcaseSvg,
	"data/web/static/svg/british-pound.svg":                 dataWebStaticSvgBritishPoundSvg,
	"data/web/static/svg/browser.svg":                       dataWebStaticSvgBrowserSvg,
	"data/web/static/svg/brush.svg":                         dataWebStaticSvgBrushSvg,
	"data/web/static/svg/bug.svg":                           dataWebStaticSvgBugSvg,
	"data/web/static/svg/bullhorn.svg":                      dataWebStaticSvgBullhornSvg,
	"data/web/static/svg/calculator.svg":                    dataWebStaticSvgCalculatorSvg,
	"data/web/static/svg/calendar.svg":                      dataWebStaticSvgCalendarSvg,
	"data/web/static/svg/camera-slr.svg":                    dataWebStaticSvgCameraSlrSvg,
	"data/web/static/svg/caret-bottom.svg":                  dataWebStaticSvgCaretBottomSvg,
	"data/web/static/svg/caret-left.svg":                    dataWebStaticSvgCaretLeftSvg,
	"data/web/static/svg/caret-right.svg":                   dataWebStaticSvgCaretRightSvg,
	"data/web/static/svg/caret-top.svg":                     dataWebStaticSvgCaretTopSvg,
	"data/web/static/svg/cart.svg":                          dataWebStaticSvgCartSvg,
	"data/web/static/svg/chat.svg":                          dataWebStaticSvgChatSvg,
	"data/web/static/svg/check.svg":                         dataWebStaticSvgCheckSvg,
	"data/web/static/svg/chevron-bottom.svg":                dataWebStaticSvgChevronBottomSvg,
	"data/web/static/svg/chevron-left.svg":                  dataWebStaticSvgChevronLeftSvg,
	"data/web/static/svg/chevron-right.svg":                 dataWebStaticSvgChevronRightSvg,
	"data/web/static/svg/chevron-top.svg":                   dataWebStaticSvgChevronTopSvg,
	"data/web/static/svg/circle-check.svg":                  dataWebStaticSvgCircleCheckSvg,
	"data/web/static/svg/circle-x.svg":                      dataWebStaticSvgCircleXSvg,
	"data/web/static/svg/clipboard.svg":                     dataWebStaticSvgClipboardSvg,
	"data/web/static/svg/clock.svg":                         dataWebStaticSvgClockSvg,
	"data/web/static/svg/cloud-download.svg":                dataWebStaticSvgCloudDownloadSvg,
	"data/web/static/svg/cloud-upload.svg":                  dataWebStaticSvgCloudUploadSvg,
	"data/web/static/svg/cloud.svg":                         dataWebStaticSvgCloudSvg,
	"data/web/static/svg/cloudy.svg":                        dataWebStaticSvgCloudySvg,
	"data/web/static/svg/code.svg":                          dataWebStaticSvgCodeSvg,
	"data/web/static/svg/cog.svg":                           dataWebStaticSvgCogSvg,
	"data/web/static/svg/collapse-down.svg":                 dataWebStaticSvgCollapseDownSvg,
	"data/web/static/svg/collapse-left.svg":                 dataWebStaticSvgCollapseLeftSvg,
	"data/web/static/svg/collapse-right.svg":                dataWebStaticSvgCollapseRightSvg,
	"data/web/static/svg/collapse-up.svg":                   dataWebStaticSvgCollapseUpSvg,
	"data/web/static/svg/command.svg":                       dataWebStaticSvgCommandSvg,
	"data/web/static/svg/comment-square.svg":                dataWebStaticSvgCommentSquareSvg,
	"data/web/static/svg/compass.svg":                       dataWebStaticSvgCompassSvg,
	"data/web/static/svg/contrast.svg":                      dataWebStaticSvgContrastSvg,
	"data/web/static/svg/copywriting.svg":                   dataWebStaticSvgCopywritingSvg,
	"data/web/static/svg/credit-card.svg":                   dataWebStaticSvgCreditCardSvg,
	"data/web/static/svg/crop.svg":                          dataWebStaticSvgCropSvg,
	"data/web/static/svg/dashboard.svg":                     dataWebStaticSvgDashboardSvg,
	"data/web/static/svg/data-transfer-download.svg":        dataWebStaticSvgDataTransferDownloadSvg,
	"data/web/static/svg/data-transfer-upload.svg":          dataWebStaticSvgDataTransferUploadSvg,
	"data/web/static/svg/delete.svg":                        dataWebStaticSvgDeleteSvg,
	"data/web/static/svg/dial.svg":                          dataWebStaticSvgDialSvg,
	"data/web/static/svg/document.svg":                      dataWebStaticSvgDocumentSvg,
	"data/web/static/svg/dollar.svg":                        dataWebStaticSvgDollarSvg,
	"data/web/static/svg/double-quote-sans-left.svg":        dataWebStaticSvgDoubleQuoteSansLeftSvg,
	"data/web/static/svg/double-quote-sans-right.svg":       dataWebStaticSvgDoubleQuoteSansRightSvg,
	"data/web/static/svg/double-quote-serif-left.svg":       dataWebStaticSvgDoubleQuoteSerifLeftSvg,
	"data/web/static/svg/double-quote-serif-right.svg":      dataWebStaticSvgDoubleQuoteSerifRightSvg,
	"data/web/static/svg/droplet.svg":                       dataWebStaticSvgDropletSvg,
	"data/web/static/svg/eject.svg":                         dataWebStaticSvgEjectSvg,
	"data/web/static/svg/elevator.svg":                      dataWebStaticSvgElevatorSvg,
	"data/web/static/svg/ellipses.svg":                      dataWebStaticSvgEllipsesSvg,
	"data/web/static/svg/envelope-closed.svg":               dataWebStaticSvgEnvelopeClosedSvg,
	"data/web/static/svg/envelope-open.svg":                 dataWebStaticSvgEnvelopeOpenSvg,
	"data/web/static/svg/euro.svg":                          dataWebStaticSvgEuroSvg,
	"data/web/static/svg/excerpt.svg":                       dataWebStaticSvgExcerptSvg,
	"data/web/static/svg/expand-down.svg":                   dataWebStaticSvgExpandDownSvg,
	"data/web/static/svg/expand-left.svg":                   dataWebStaticSvgExpandLeftSvg,
	"data/web/static/svg/expand-right.svg":                  dataWebStaticSvgExpandRightSvg,
	"data/web/static/svg/expand-up.svg":                     dataWebStaticSvgExpandUpSvg,
	"data/web/static/svg/external-link.svg":                 dataWebStaticSvgExternalLinkSvg,
	"data/web/static/svg/eye.svg":                           dataWebStaticSvgEyeSvg,
	"data/web/static/svg/eyedropper.svg":                    dataWebStaticSvgEyedropperSvg,
	"data/web/static/svg/file.svg":                          dataWebStaticSvgFileSvg,
	"data/web/static/svg/fire.svg":                          dataWebStaticSvgFireSvg,
	"data/web/static/svg/flag.svg":                          dataWebStaticSvgFlagSvg,
	"data/web/static/svg/flash.svg":                         dataWebStaticSvgFlashSvg,
	"data/web/static/svg/folder.svg":                        dataWebStaticSvgFolderSvg,
	"data/web/static/svg/fork.svg":                          dataWebStaticSvgForkSvg,
	"data/web/static/svg/fullscreen-enter.svg":              dataWebStaticSvgFullscreenEnterSvg,
	"data/web/static/svg/fullscreen-exit.svg":               dataWebStaticSvgFullscreenExitSvg,
	"data/web/static/svg/globe.svg":                         dataWebStaticSvgGlobeSvg,
	"data/web/static/svg/graph.svg":                         dataWebStaticSvgGraphSvg,
	"data/web/static/svg/grid-four-up.svg":                  dataWebStaticSvgGridFourUpSvg,
	"data/web/static/svg/grid-three-up.svg":                 dataWebStaticSvgGridThreeUpSvg,
	"data/web/static/svg/grid-two-up.svg":                   dataWebStaticSvgGridTwoUpSvg,
	"data/web/static/svg/hard-drive.svg":                    dataWebStaticSvgHardDriveSvg,
	"data/web/static/svg/header.svg":                        dataWebStaticSvgHeaderSvg,
	"data/web/static/svg/headphones.svg":                    dataWebStaticSvgHeadphonesSvg,
	"data/web/static/svg/heart.svg":                         dataWebStaticSvgHeartSvg,
	"data/web/static/svg/home.svg":                          dataWebStaticSvgHomeSvg,
	"data/web/static/svg/image.svg":                         dataWebStaticSvgImageSvg,
	"data/web/static/svg/inbox.svg":                         dataWebStaticSvgInboxSvg,
	"data/web/static/svg/infinity.svg":                      dataWebStaticSvgInfinitySvg,
	"data/web/static/svg/info.svg":                          dataWebStaticSvgInfoSvg,
	"data/web/static/svg/italic.svg":                        dataWebStaticSvgItalicSvg,
	"data/web/static/svg/justify-center.svg":                dataWebStaticSvgJustifyCenterSvg,
	"data/web/static/svg/justify-left.svg":                  dataWebStaticSvgJustifyLeftSvg,
	"data/web/static/svg/justify-right.svg":                 dataWebStaticSvgJustifyRightSvg,
	"data/web/static/svg/key.svg":                           dataWebStaticSvgKeySvg,
	"data/web/static/svg/laptop.svg":                        dataWebStaticSvgLaptopSvg,
	"data/web/static/svg/layers.svg":                        dataWebStaticSvgLayersSvg,
	"data/web/static/svg/lightbulb.svg":                     dataWebStaticSvgLightbulbSvg,
	"data/web/static/svg/link-broken.svg":                   dataWebStaticSvgLinkBrokenSvg,
	"data/web/static/svg/link-intact.svg":                   dataWebStaticSvgLinkIntactSvg,
	"data/web/static/svg/list-rich.svg":                     dataWebStaticSvgListRichSvg,
	"data/web/static/svg/list.svg":                          dataWebStaticSvgListSvg,
	"data/web/static/svg/location.svg":                      dataWebStaticSvgLocationSvg,
	"data/web/static/svg/lock-locked.svg":                   dataWebStaticSvgLockLockedSvg,
	"data/web/static/svg/lock-unlocked.svg":                 dataWebStaticSvgLockUnlockedSvg,
	"data/web/static/svg/loop-circular.svg":                 dataWebStaticSvgLoopCircularSvg,
	"data/web/static/svg/loop-square.svg":                   dataWebStaticSvgLoopSquareSvg,
	"data/web/static/svg/loop.svg":                          dataWebStaticSvgLoopSvg,
	"data/web/static/svg/magnifying-glass.svg":              dataWebStaticSvgMagnifyingGlassSvg,
	"data/web/static/svg/map-marker.svg":                    dataWebStaticSvgMapMarkerSvg,
	"data/web/static/svg/map.svg":                           dataWebStaticSvgMapSvg,
	"data/web/static/svg/media-pause.svg":                   dataWebStaticSvgMediaPauseSvg,
	"data/web/static/svg/media-play.svg":                    dataWebStaticSvgMediaPlaySvg,
	"data/web/static/svg/media-record.svg":                  dataWebStaticSvgMediaRecordSvg,
	"data/web/static/svg/media-skip-backward.svg":           dataWebStaticSvgMediaSkipBackwardSvg,
	"data/web/static/svg/media-skip-forward.svg":            dataWebStaticSvgMediaSkipForwardSvg,
	"data/web/static/svg/media-step-backward.svg":           dataWebStaticSvgMediaStepBackwardSvg,
	"data/web/static/svg/media-step-forward.svg":            dataWebStaticSvgMediaStepForwardSvg,
	"data/web/static/svg/media-stop.svg":                    dataWebStaticSvgMediaStopSvg,
	"data/web/static/svg/medical-cross.svg":                 dataWebStaticSvgMedicalCrossSvg,
	"data/web/static/svg/menu.svg":                          dataWebStaticSvgMenuSvg,
	"data/web/static/svg/microphone.svg":                    dataWebStaticSvgMicrophoneSvg,
	"data/web/static/svg/minus.svg":                         dataWebStaticSvgMinusSvg,
	"data/web/static/svg/monitor.svg":                       dataWebStaticSvgMonitorSvg,
	"data/web/static/svg/moon.svg":                          dataWebStaticSvgMoonSvg,
	"data/web/static/svg/move.svg":                          dataWebStaticSvgMoveSvg,
	"data/web/static/svg/musical-note.svg":                  dataWebStaticSvgMusicalNoteSvg,
	"data/web/static/svg/paperclip.svg":                     dataWebStaticSvgPaperclipSvg,
	"data/web/static/svg/pencil.svg":                        dataWebStaticSvgPencilSvg,
	"data/web/static/svg/people.svg":                        dataWebStaticSvgPeopleSvg,
	"data/web/static/svg/person.svg":                        dataWebStaticSvgPersonSvg,
	"data/web/static/svg/phone.svg":                         dataWebStaticSvgPhoneSvg,
	"data/web/static/svg/pie-chart.svg":                     dataWebStaticSvgPieChartSvg,
	"data/web/static/svg/pin.svg":                           dataWebStaticSvgPinSvg,
	"data/web/static/svg/play-circle.svg":                   dataWebStaticSvgPlayCircleSvg,
	"data/web/static/svg/plus.svg":                          dataWebStaticSvgPlusSvg,
	"data/web/static/svg/power-standby.svg":                 dataWebStaticSvgPowerStandbySvg,
	"data/web/static/svg/print.svg":                         dataWebStaticSvgPrintSvg,
	"data/web/static/svg/project.svg":                       dataWebStaticSvgProjectSvg,
	"data/web/static/svg/pulse.svg":                         dataWebStaticSvgPulseSvg,
	"data/web/static/svg/puzzle-piece.svg":                  dataWebStaticSvgPuzzlePieceSvg,
	"data/web/static/svg/question-mark.svg":                 dataWebStaticSvgQuestionMarkSvg,
	"data/web/static/svg/rain.svg":                          dataWebStaticSvgRainSvg,
	"data/web/static/svg/random.svg":                        dataWebStaticSvgRandomSvg,
	"data/web/static/svg/reload.svg":                        dataWebStaticSvgReloadSvg,
	"data/web/static/svg/resize-both.svg":                   dataWebStaticSvgResizeBothSvg,
	"data/web/static/svg/resize-height.svg":                 dataWebStaticSvgResizeHeightSvg,
	"data/web/static/svg/resize-width.svg":                  dataWebStaticSvgResizeWidthSvg,
	"data/web/static/svg/rss-alt.svg":                       dataWebStaticSvgRssAltSvg,
	"data/web/static/svg/rss.svg":                           dataWebStaticSvgRssSvg,
	"data/web/static/svg/script.svg":                        dataWebStaticSvgScriptSvg,
	"data/web/static/svg/share-boxed.svg":                   dataWebStaticSvgShareBoxedSvg,
	"data/web/static/svg/share.svg":                         dataWebStaticSvgShareSvg,
	"data/web/static/svg/shield.svg":                        dataWebStaticSvgShieldSvg,
	"data/web/static/svg/signal.svg":                        dataWebStaticSvgSignalSvg,
	"data/web/static/svg/signpost.svg":                      dataWebStaticSvgSignpostSvg,
	"data/web/static/svg/sort-ascending.svg":                dataWebStaticSvgSortAscendingSvg,
	"data/web/static/svg/sort-descending.svg":               dataWebStaticSvgSortDescendingSvg,
	"data/web/static/svg/spreadsheet.svg":                   dataWebStaticSvgSpreadsheetSvg,
	"data/web/static/svg/star.svg":                          dataWebStaticSvgStarSvg,
	"data/web/static/svg/sun.svg":                           dataWebStaticSvgSunSvg,
	"data/web/static/svg/tablet.svg":                        dataWebStaticSvgTabletSvg,
	"data/web/static/svg/tag.svg":                           dataWebStaticSvgTagSvg,
	"data/web/static/svg/tags.svg":                          dataWebStaticSvgTagsSvg,
	"data/web/static/svg/target.svg":                        dataWebStaticSvgTargetSvg,
	"data/web/static/svg/task.svg":                          dataWebStaticSvgTaskSvg,
	"data/web/static/svg/terminal.svg":                      dataWebStaticSvgTerminalSvg,
	"data/web/static/svg/text.svg":                          dataWebStaticSvgTextSvg,
	"data/web/static/svg/thumb-down.svg":                    dataWebStaticSvgThumbDownSvg,
	"data/web/static/svg/thumb-up.svg":                      dataWebStaticSvgThumbUpSvg,
	"data/web/static/svg/timer.svg":                         dataWebStaticSvgTimerSvg,
	"data/web/static/svg/transfer.svg":                      dataWebStaticSvgTransferSvg,
	"data/web/static/svg/trash.svg":                         dataWebStaticSvgTrashSvg,
	"data/web/static/svg/underline.svg":                     dataWebStaticSvgUnderlineSvg,
	"data/web/static/svg/vertical-align-bottom.svg":         dataWebStaticSvgVerticalAlignBottomSvg,
	"data/web/static/svg/vertical-align-center.svg":         dataWebStaticSvgVerticalAlignCenterSvg,
	"data/web/static/svg/vertical-align-top.svg":            dataWebStaticSvgVerticalAlignTopSvg,
	"data/web/static/svg/video.svg":                         dataWebStaticSvgVideoSvg,
	"data/web/static/svg/volume-high.svg":                   dataWebStaticSvgVolumeHighSvg,
	"data/web/static/svg/volume-low.svg":                    dataWebStaticSvgVolumeLowSvg,
	"data/web/static/svg/volume-off.svg":                    dataWebStaticSvgVolumeOffSvg,
	"data/web/static/svg/warning.svg":                       dataWebStaticSvgWarningSvg,
	"data/web/static/svg/wifi.svg":                          dataWebStaticSvgWifiSvg,
	"data/web/static/svg/wrench.svg":                        dataWebStaticSvgWrenchSvg,
	"data/web/static/svg/x.svg":                             dataWebStaticSvgXSvg,
	"data/web/static/svg/yen.svg":                           dataWebStaticSvgYenSvg,
	"data/web/static/svg/zoom-in.svg":                       dataWebStaticSvgZoomInSvg,
	"data/web/static/svg/zoom-out.svg":                      dataWebStaticSvgZoomOutSvg,
	"data/web/static/webp/account-login-2x.webp":            dataWebStaticWebpAccountLogin2xWebp,
	"data/web/static/webp/account-login-3x.webp":            dataWebStaticWebpAccountLogin3xWebp,
	"data/web/static/webp/account-login-4x.webp":            dataWebStaticWebpAccountLogin4xWebp,
	"data/web/static/webp/account-login-6x.webp":            dataWebStaticWebpAccountLogin6xWebp,
	"data/web/static/webp/account-login-8x.webp":            dataWebStaticWebpAccountLogin8xWebp,
	"data/web/static/webp/account-login.webp":               dataWebStaticWebpAccountLoginWebp,
	"data/web/static/webp/account-logout-2x.webp":           dataWebStaticWebpAccountLogout2xWebp,
	"data/web/static/webp/account-logout-3x.webp":           dataWebStaticWebpAccountLogout3xWebp,
	"data/web/static/webp/account-logout-4x.webp":           dataWebStaticWebpAccountLogout4xWebp,
	"data/web/static/webp/account-logout-6x.webp":           dataWebStaticWebpAccountLogout6xWebp,
	"data/web/static/webp/account-logout-8x.webp":           dataWebStaticWebpAccountLogout8xWebp,
	"data/web/static/webp/account-logout.webp":              dataWebStaticWebpAccountLogoutWebp,
	"data/web/static/webp/action-redo-2x.webp":              dataWebStaticWebpActionRedo2xWebp,
	"data/web/static/webp/action-redo-3x.webp":              dataWebStaticWebpActionRedo3xWebp,
	"data/web/static/webp/action-redo-4x.webp":              dataWebStaticWebpActionRedo4xWebp,
	"data/web/static/webp/action-redo-6x.webp":              dataWebStaticWebpActionRedo6xWebp,
	"data/web/static/webp/action-redo-8x.webp":              dataWebStaticWebpActionRedo8xWebp,
	"data/web/static/webp/action-redo.webp":                 dataWebStaticWebpActionRedoWebp,
	"data/web/static/webp/action-undo-2x.webp":              dataWebStaticWebpActionUndo2xWebp,
	"data/web/static/webp/action-undo-3x.webp":              dataWebStaticWebpActionUndo3xWebp,
	"data/web/static/webp/action-undo-4x.webp":              dataWebStaticWebpActionUndo4xWebp,
	"data/web/static/webp/action-undo-6x.webp":              dataWebStaticWebpActionUndo6xWebp,
	"data/web/static/webp/action-undo-8x.webp":              dataWebStaticWebpActionUndo8xWebp,
	"data/web/static/webp/action-undo.webp":                 dataWebStaticWebpActionUndoWebp,
	"data/web/static/webp/align-center-2x.webp":             dataWebStaticWebpAlignCenter2xWebp,
	"data/web/static/webp/align-center-3x.webp":             dataWebStaticWebpAlignCenter3xWebp,
	"data/web/static/webp/align-center-4x.webp":             dataWebStaticWebpAlignCenter4xWebp,
	"data/web/static/webp/align-center-6x.webp":             dataWebStaticWebpAlignCenter6xWebp,
	"data/web/static/webp/align-center-8x.webp":             dataWebStaticWebpAlignCenter8xWebp,
	"data/web/static/webp/align-center.webp":                dataWebStaticWebpAlignCenterWebp,
	"data/web/static/webp/align-left-2x.webp":               dataWebStaticWebpAlignLeft2xWebp,
	"data/web/static/webp/align-left-3x.webp":               dataWebStaticWebpAlignLeft3xWebp,
	"data/web/static/webp/align-left-4x.webp":               dataWebStaticWebpAlignLeft4xWebp,
	"data/web/static/webp/align-left-6x.webp":               dataWebStaticWebpAlignLeft6xWebp,
	"data/web/static/webp/align-left-8x.webp":               dataWebStaticWebpAlignLeft8xWebp,
	"data/web/static/webp/align-left.webp":                  dataWebStaticWebpAlignLeftWebp,
	"data/web/static/webp/align-right-2x.webp":              dataWebStaticWebpAlignRight2xWebp,
	"data/web/static/webp/align-right-3x.webp":              dataWebStaticWebpAlignRight3xWebp,
	"data/web/static/webp/align-right-4x.webp":              dataWebStaticWebpAlignRight4xWebp,
	"data/web/static/webp/align-right-6x.webp":              dataWebStaticWebpAlignRight6xWebp,
	"data/web/static/webp/align-right-8x.webp":              dataWebStaticWebpAlignRight8xWebp,
	"data/web/static/webp/align-right.webp":                 dataWebStaticWebpAlignRightWebp,
	"data/web/static/webp/aperture-2x.webp":                 dataWebStaticWebpAperture2xWebp,
	"data/web/static/webp/aperture-3x.webp":                 dataWebStaticWebpAperture3xWebp,
	"data/web/static/webp/aperture-4x.webp":                 dataWebStaticWebpAperture4xWebp,
	"data/web/static/webp/aperture-6x.webp":                 dataWebStaticWebpAperture6xWebp,
	"data/web/static/webp/aperture-8x.webp":                 dataWebStaticWebpAperture8xWebp,
	"data/web/static/webp/aperture.webp":                    dataWebStaticWebpApertureWebp,
	"data/web/static/webp/arrow-bottom-2x.webp":             dataWebStaticWebpArrowBottom2xWebp,
	"data/web/static/webp/arrow-bottom-3x.webp":             dataWebStaticWebpArrowBottom3xWebp,
	"data/web/static/webp/arrow-bottom-4x.webp":             dataWebStaticWebpArrowBottom4xWebp,
	"data/web/static/webp/arrow-bottom-6x.webp":             dataWebStaticWebpArrowBottom6xWebp,
	"data/web/static/webp/arrow-bottom-8x.webp":             dataWebStaticWebpArrowBottom8xWebp,
	"data/web/static/webp/arrow-bottom.webp":                dataWebStaticWebpArrowBottomWebp,
	"data/web/static/webp/arrow-circle-bottom-2x.webp":      dataWebStaticWebpArrowCircleBottom2xWebp,
	"data/web/static/webp/arrow-circle-bottom-3x.webp":      dataWebStaticWebpArrowCircleBottom3xWebp,
	"data/web/static/webp/arrow-circle-bottom-4x.webp":      dataWebStaticWebpArrowCircleBottom4xWebp,
	"data/web/static/webp/arrow-circle-bottom-6x.webp":      dataWebStaticWebpArrowCircleBottom6xWebp,
	"data/web/static/webp/arrow-circle-bottom-8x.webp":      dataWebStaticWebpArrowCircleBottom8xWebp,
	"data/web/static/webp/arrow-circle-bottom.webp":         dataWebStaticWebpArrowCircleBottomWebp,
	"data/web/static/webp/arrow-circle-left-2x.webp":        dataWebStaticWebpArrowCircleLeft2xWebp,
	"data/web/static/webp/arrow-circle-left-3x.webp":        dataWebStaticWebpArrowCircleLeft3xWebp,
	"data/web/static/webp/arrow-circle-left-4x.webp":        dataWebStaticWebpArrowCircleLeft4xWebp,
	"data/web/static/webp/arrow-circle-left-6x.webp":        dataWebStaticWebpArrowCircleLeft6xWebp,
	"data/web/static/webp/arrow-circle-left-8x.webp":        dataWebStaticWebpArrowCircleLeft8xWebp,
	"data/web/static/webp/arrow-circle-left.webp":           dataWebStaticWebpArrowCircleLeftWebp,
	"data/web/static/webp/arrow-circle-right-2x.webp":       dataWebStaticWebpArrowCircleRight2xWebp,
	"data/web/static/webp/arrow-circle-right-3x.webp":       dataWebStaticWebpArrowCircleRight3xWebp,
	"data/web/static/webp/arrow-circle-right-4x.webp":       dataWebStaticWebpArrowCircleRight4xWebp,
	"data/web/static/webp/arrow-circle-right-6x.webp":       dataWebStaticWebpArrowCircleRight6xWebp,
	"data/web/static/webp/arrow-circle-right-8x.webp":       dataWebStaticWebpArrowCircleRight8xWebp,
	"data/web/static/webp/arrow-circle-right.webp":          dataWebStaticWebpArrowCircleRightWebp,
	"data/web/static/webp/arrow-circle-top-2x.webp":         dataWebStaticWebpArrowCircleTop2xWebp,
	"data/web/static/webp/arrow-circle-top-3x.webp":         dataWebStaticWebpArrowCircleTop3xWebp,
	"data/web/static/webp/arrow-circle-top-4x.webp":         dataWebStaticWebpArrowCircleTop4xWebp,
	"data/web/static/webp/arrow-circle-top-6x.webp":         dataWebStaticWebpArrowCircleTop6xWebp,
	"data/web/static/webp/arrow-circle-top-8x.webp":         dataWebStaticWebpArrowCircleTop8xWebp,
	"data/web/static/webp/arrow-circle-top.webp":            dataWebStaticWebpArrowCircleTopWebp,
	"data/web/static/webp/arrow-left-2x.webp":               dataWebStaticWebpArrowLeft2xWebp,
	"data/web/static/webp/arrow-left-3x.webp":               dataWebStaticWebpArrowLeft3xWebp,
	"data/web/static/webp/arrow-left-4x.webp":               dataWebStaticWebpArrowLeft4xWebp,
	"data/web/static/webp/arrow-left-6x.webp":               dataWebStaticWebpArrowLeft6xWebp,
	"data/web/static/webp/arrow-left-8x.webp":               dataWebStaticWebpArrowLeft8xWebp,
	"data/web/static/webp/arrow-left.webp":                  dataWebStaticWebpArrowLeftWebp,
	"data/web/static/webp/arrow-right-2x.webp":              dataWebStaticWebpArrowRight2xWebp,
	"data/web/static/webp/arrow-right-3x.webp":              dataWebStaticWebpArrowRight3xWebp,
	"data/web/static/webp/arrow-right-4x.webp":              dataWebStaticWebpArrowRight4xWebp,
	"data/web/static/webp/arrow-right-6x.webp":              dataWebStaticWebpArrowRight6xWebp,
	"data/web/static/webp/arrow-right-8x.webp":              dataWebStaticWebpArrowRight8xWebp,
	"data/web/static/webp/arrow-right.webp":                 dataWebStaticWebpArrowRightWebp,
	"data/web/static/webp/arrow-thick-bottom-2x.webp":       dataWebStaticWebpArrowThickBottom2xWebp,
	"data/web/static/webp/arrow-thick-bottom-3x.webp":       dataWebStaticWebpArrowThickBottom3xWebp,
	"data/web/static/webp/arrow-thick-bottom-4x.webp":       dataWebStaticWebpArrowThickBottom4xWebp,
	"data/web/static/webp/arrow-thick-bottom-6x.webp":       dataWebStaticWebpArrowThickBottom6xWebp,
	"data/web/static/webp/arrow-thick-bottom-8x.webp":       dataWebStaticWebpArrowThickBottom8xWebp,
	"data/web/static/webp/arrow-thick-bottom.webp":          dataWebStaticWebpArrowThickBottomWebp,
	"data/web/static/webp/arrow-thick-left-2x.webp":         dataWebStaticWebpArrowThickLeft2xWebp,
	"data/web/static/webp/arrow-thick-left-3x.webp":         dataWebStaticWebpArrowThickLeft3xWebp,
	"data/web/static/webp/arrow-thick-left-4x.webp":         dataWebStaticWebpArrowThickLeft4xWebp,
	"data/web/static/webp/arrow-thick-left-6x.webp":         dataWebStaticWebpArrowThickLeft6xWebp,
	"data/web/static/webp/arrow-thick-left-8x.webp":         dataWebStaticWebpArrowThickLeft8xWebp,
	"data/web/static/webp/arrow-thick-left.webp":            dataWebStaticWebpArrowThickLeftWebp,
	"data/web/static/webp/arrow-thick-right-2x.webp":        dataWebStaticWebpArrowThickRight2xWebp,
	"data/web/static/webp/arrow-thick-right-3x.webp":        dataWebStaticWebpArrowThickRight3xWebp,
	"data/web/static/webp/arrow-thick-right-4x.webp":        dataWebStaticWebpArrowThickRight4xWebp,
	"data/web/static/webp/arrow-thick-right-6x.webp":        dataWebStaticWebpArrowThickRight6xWebp,
	"data/web/static/webp/arrow-thick-right-8x.webp":        dataWebStaticWebpArrowThickRight8xWebp,
	"data/web/static/webp/arrow-thick-right.webp":           dataWebStaticWebpArrowThickRightWebp,
	"data/web/static/webp/arrow-thick-top-2x.webp":          dataWebStaticWebpArrowThickTop2xWebp,
	"data/web/static/webp/arrow-thick-top-3x.webp":          dataWebStaticWebpArrowThickTop3xWebp,
	"data/web/static/webp/arrow-thick-top-4x.webp":          dataWebStaticWebpArrowThickTop4xWebp,
	"data/web/static/webp/arrow-thick-top-6x.webp":          dataWebStaticWebpArrowThickTop6xWebp,
	"data/web/static/webp/arrow-thick-top-8x.webp":          dataWebStaticWebpArrowThickTop8xWebp,
	"data/web/static/webp/arrow-thick-top.webp":             dataWebStaticWebpArrowThickTopWebp,
	"data/web/static/webp/arrow-top-2x.webp":                dataWebStaticWebpArrowTop2xWebp,
	"data/web/static/webp/arrow-top-3x.webp":                dataWebStaticWebpArrowTop3xWebp,
	"data/web/static/webp/arrow-top-4x.webp":                dataWebStaticWebpArrowTop4xWebp,
	"data/web/static/webp/arrow-top-6x.webp":                dataWebStaticWebpArrowTop6xWebp,
	"data/web/static/webp/arrow-top-8x.webp":                dataWebStaticWebpArrowTop8xWebp,
	"data/web/static/webp/arrow-top.webp":                   dataWebStaticWebpArrowTopWebp,
	"data/web/static/webp/audio-2x.webp":                    dataWebStaticWebpAudio2xWebp,
	"data/web/static/webp/audio-3x.webp":                    dataWebStaticWebpAudio3xWebp,
	"data/web/static/webp/audio-4x.webp":                    dataWebStaticWebpAudio4xWebp,
	"data/web/static/webp/audio-6x.webp":                    dataWebStaticWebpAudio6xWebp,
	"data/web/static/webp/audio-8x.webp":                    dataWebStaticWebpAudio8xWebp,
	"data/web/static/webp/audio-spectrum-2x.webp":           dataWebStaticWebpAudioSpectrum2xWebp,
	"data/web/static/webp/audio-spectrum-3x.webp":           dataWebStaticWebpAudioSpectrum3xWebp,
	"data/web/static/webp/audio-spectrum-4x.webp":           dataWebStaticWebpAudioSpectrum4xWebp,
	"data/web/static/webp/audio-spectrum-6x.webp":           dataWebStaticWebpAudioSpectrum6xWebp,
	"data/web/static/webp/audio-spectrum-8x.webp":           dataWebStaticWebpAudioSpectrum8xWebp,
	"data/web/static/webp/audio-spectrum.webp":              dataWebStaticWebpAudioSpectrumWebp,
	"data/web/static/webp/audio.webp":                       dataWebStaticWebpAudioWebp,
	"data/web/static/webp/badge-2x.webp":                    dataWebStaticWebpBadge2xWebp,
	"data/web/static/webp/badge-3x.webp":                    dataWebStaticWebpBadge3xWebp,
	"data/web/static/webp/badge-4x.webp":                    dataWebStaticWebpBadge4xWebp,
	"data/web/static/webp/badge-6x.webp":                    dataWebStaticWebpBadge6xWebp,
	"data/web/static/webp/badge-8x.webp":                    dataWebStaticWebpBadge8xWebp,
	"data/web/static/webp/badge.webp":                       dataWebStaticWebpBadgeWebp,
	"data/web/static/webp/ban-2x.webp":                      dataWebStaticWebpBan2xWebp,
	"data/web/static/webp/ban-3x.webp":                      dataWebStaticWebpBan3xWebp,
	"data/web/static/webp/ban-4x.webp":                      dataWebStaticWebpBan4xWebp,
	"data/web/static/webp/ban-6x.webp":                      dataWebStaticWebpBan6xWebp,
	"data/web/static/webp/ban-8x.webp":                      dataWebStaticWebpBan8xWebp,
	"data/web/static/webp/ban.webp":                         dataWebStaticWebpBanWebp,
	"data/web/static/webp/bar-chart-2x.webp":                dataWebStaticWebpBarChart2xWebp,
	"data/web/static/webp/bar-chart-3x.webp":                dataWebStaticWebpBarChart3xWebp,
	"data/web/static/webp/bar-chart-4x.webp":                dataWebStaticWebpBarChart4xWebp,
	"data/web/static/webp/bar-chart-6x.webp":                dataWebStaticWebpBarChart6xWebp,
	"data/web/static/webp/bar-chart-8x.webp":                dataWebStaticWebpBarChart8xWebp,
	"data/web/static/webp/bar-chart.webp":                   dataWebStaticWebpBarChartWebp,
	"data/web/static/webp/basket-2x.webp":                   dataWebStaticWebpBasket2xWebp,
	"data/web/static/webp/basket-3x.webp":                   dataWebStaticWebpBasket3xWebp,
	"data/web/static/webp/basket-4x.webp":                   dataWebStaticWebpBasket4xWebp,
	"data/web/static/webp/basket-6x.webp":                   dataWebStaticWebpBasket6xWebp,
	"data/web/static/webp/basket-8x.webp":                   dataWebStaticWebpBasket8xWebp,
	"data/web/static/webp/basket.webp":                      dataWebStaticWebpBasketWebp,
	"data/web/static/webp/battery-empty-2x.webp":            dataWebStaticWebpBatteryEmpty2xWebp,
	"data/web/static/webp/battery-empty-3x.webp":            dataWebStaticWebpBatteryEmpty3xWebp,
	"data/web/static/webp/battery-empty-4x.webp":            dataWebStaticWebpBatteryEmpty4xWebp,
	"data/web/static/webp/battery-empty-6x.webp":            dataWebStaticWebpBatteryEmpty6xWebp,
	"data/web/static/webp/battery-empty-8x.webp":            dataWebStaticWebpBatteryEmpty8xWebp,
	"data/web/static/webp/battery-empty.webp":               dataWebStaticWebpBatteryEmptyWebp,
	"data/web/static/webp/battery-full-2x.webp":             dataWebStaticWebpBatteryFull2xWebp,
	"data/web/static/webp/battery-full-3x.webp":             dataWebStaticWebpBatteryFull3xWebp,
	"data/web/static/webp/battery-full-4x.webp":             dataWebStaticWebpBatteryFull4xWebp,
	"data/web/static/webp/battery-full-6x.webp":             dataWebStaticWebpBatteryFull6xWebp,
	"data/web/static/webp/battery-full-8x.webp":             dataWebStaticWebpBatteryFull8xWebp,
	"data/web/static/webp/battery-full.webp":                dataWebStaticWebpBatteryFullWebp,
	"data/web/static/webp/beaker-2x.webp":                   dataWebStaticWebpBeaker2xWebp,
	"data/web/static/webp/beaker-3x.webp":                   dataWebStaticWebpBeaker3xWebp,
	"data/web/static/webp/beaker-4x.webp":                   dataWebStaticWebpBeaker4xWebp,
	"data/web/static/webp/beaker-6x.webp":                   dataWebStaticWebpBeaker6xWebp,
	"data/web/static/webp/beaker-8x.webp":                   dataWebStaticWebpBeaker8xWebp,
	"data/web/static/webp/beaker.webp":                      dataWebStaticWebpBeakerWebp,
	"data/web/static/webp/bell-2x.webp":                     dataWebStaticWebpBell2xWebp,
	"data/web/static/webp/bell-3x.webp":                     dataWebStaticWebpBell3xWebp,
	"data/web/static/webp/bell-4x.webp":                     dataWebStaticWebpBell4xWebp,
	"data/web/static/webp/bell-6x.webp":                     dataWebStaticWebpBell6xWebp,
	"data/web/static/webp/bell-8x.webp":                     dataWebStaticWebpBell8xWebp,
	"data/web/static/webp/bell.webp":                        dataWebStaticWebpBellWebp,
	"data/web/static/webp/bluetooth-2x.webp":                dataWebStaticWebpBluetooth2xWebp,
	"data/web/static/webp/bluetooth-3x.webp":                dataWebStaticWebpBluetooth3xWebp,
	"data/web/static/webp/bluetooth-4x.webp":                dataWebStaticWebpBluetooth4xWebp,
	"data/web/static/webp/bluetooth-6x.webp":                dataWebStaticWebpBluetooth6xWebp,
	"data/web/static/webp/bluetooth-8x.webp":                dataWebStaticWebpBluetooth8xWebp,
	"data/web/static/webp/bluetooth.webp":                   dataWebStaticWebpBluetoothWebp,
	"data/web/static/webp/bold-2x.webp":                     dataWebStaticWebpBold2xWebp,
	"data/web/static/webp/bold-3x.webp":                     dataWebStaticWebpBold3xWebp,
	"data/web/static/webp/bold-4x.webp":                     dataWebStaticWebpBold4xWebp,
	"data/web/static/webp/bold-6x.webp":                     dataWebStaticWebpBold6xWebp,
	"data/web/static/webp/bold-8x.webp":                     dataWebStaticWebpBold8xWebp,
	"data/web/static/webp/bold.webp":                        dataWebStaticWebpBoldWebp,
	"data/web/static/webp/bolt-2x.webp":                     dataWebStaticWebpBolt2xWebp,
	"data/web/static/webp/bolt-3x.webp":                     dataWebStaticWebpBolt3xWebp,
	"data/web/static/webp/bolt-4x.webp":                     dataWebStaticWebpBolt4xWebp,
	"data/web/static/webp/bolt-6x.webp":                     dataWebStaticWebpBolt6xWebp,
	"data/web/static/webp/bolt-8x.webp":                     dataWebStaticWebpBolt8xWebp,
	"data/web/static/webp/bolt.webp":                        dataWebStaticWebpBoltWebp,
	"data/web/static/webp/book-2x.webp":                     dataWebStaticWebpBook2xWebp,
	"data/web/static/webp/book-3x.webp":                     dataWebStaticWebpBook3xWebp,
	"data/web/static/webp/book-4x.webp":                     dataWebStaticWebpBook4xWebp,
	"data/web/static/webp/book-6x.webp":                     dataWebStaticWebpBook6xWebp,
	"data/web/static/webp/book-8x.webp":                     dataWebStaticWebpBook8xWebp,
	"data/web/static/webp/book.webp":                        dataWebStaticWebpBookWebp,
	"data/web/static/webp/bookmark-2x.webp":                 dataWebStaticWebpBookmark2xWebp,
	"data/web/static/webp/bookmark-3x.webp":                 dataWebStaticWebpBookmark3xWebp,
	"data/web/static/webp/bookmark-4x.webp":                 dataWebStaticWebpBookmark4xWebp,
	"data/web/static/webp/bookmark-6x.webp":                 dataWebStaticWebpBookmark6xWebp,
	"data/web/static/webp/bookmark-8x.webp":                 dataWebStaticWebpBookmark8xWebp,
	"data/web/static/webp/bookmark.webp":                    dataWebStaticWebpBookmarkWebp,
	"data/web/static/webp/box-2x.webp":                      dataWebStaticWebpBox2xWebp,
	"data/web/static/webp/box-3x.webp":                      dataWebStaticWebpBox3xWebp,
	"data/web/static/webp/box-4x.webp":                      dataWebStaticWebpBox4xWebp,
	"data/web/static/webp/box-6x.webp":                      dataWebStaticWebpBox6xWebp,
	"data/web/static/webp/box-8x.webp":                      dataWebStaticWebpBox8xWebp,
	"data/web/static/webp/box.webp":                         dataWebStaticWebpBoxWebp,
	"data/web/static/webp/briefcase-2x.webp":                dataWebStaticWebpBriefcase2xWebp,
	"data/web/static/webp/briefcase-3x.webp":                dataWebStaticWebpBriefcase3xWebp,
	"data/web/static/webp/briefcase-4x.webp":                dataWebStaticWebpBriefcase4xWebp,
	"data/web/static/webp/briefcase-6x.webp":                dataWebStaticWebpBriefcase6xWebp,
	"data/web/static/webp/briefcase-8x.webp":                dataWebStaticWebpBriefcase8xWebp,
	"data/web/static/webp/briefcase.webp":                   dataWebStaticWebpBriefcaseWebp,
	"data/web/static/webp/british-pound-2x.webp":            dataWebStaticWebpBritishPound2xWebp,
	"data/web/static/webp/british-pound-3x.webp":            dataWebStaticWebpBritishPound3xWebp,
	"data/web/static/webp/british-pound-4x.webp":            dataWebStaticWebpBritishPound4xWebp,
	"data/web/static/webp/british-pound-6x.webp":            dataWebStaticWebpBritishPound6xWebp,
	"data/web/static/webp/british-pound-8x.webp":            dataWebStaticWebpBritishPound8xWebp,
	"data/web/static/webp/british-pound.webp":               dataWebStaticWebpBritishPoundWebp,
	"data/web/static/webp/browser-2x.webp":                  dataWebStaticWebpBrowser2xWebp,
	"data/web/static/webp/browser-3x.webp":                  dataWebStaticWebpBrowser3xWebp,
	"data/web/static/webp/browser-4x.webp":                  dataWebStaticWebpBrowser4xWebp,
	"data/web/static/webp/browser-6x.webp":                  dataWebStaticWebpBrowser6xWebp,
	"data/web/static/webp/browser-8x.webp":                  dataWebStaticWebpBrowser8xWebp,
	"data/web/static/webp/browser.webp":                     dataWebStaticWebpBrowserWebp,
	"data/web/static/webp/brush-2x.webp":                    dataWebStaticWebpBrush2xWebp,
	"data/web/static/webp/brush-3x.webp":                    dataWebStaticWebpBrush3xWebp,
	"data/web/static/webp/brush-4x.webp":                    dataWebStaticWebpBrush4xWebp,
	"data/web/static/webp/brush-6x.webp":                    dataWebStaticWebpBrush6xWebp,
	"data/web/static/webp/brush-8x.webp":                    dataWebStaticWebpBrush8xWebp,
	"data/web/static/webp/brush.webp":                       dataWebStaticWebpBrushWebp,
	"data/web/static/webp/bug-2x.webp":                      dataWebStaticWebpBug2xWebp,
	"data/web/static/webp/bug-3x.webp":                      dataWebStaticWebpBug3xWebp,
	"data/web/static/webp/bug-4x.webp":                      dataWebStaticWebpBug4xWebp,
	"data/web/static/webp/bug-6x.webp":                      dataWebStaticWebpBug6xWebp,
	"data/web/static/webp/bug-8x.webp":                      dataWebStaticWebpBug8xWebp,
	"data/web/static/webp/bug.webp":                         dataWebStaticWebpBugWebp,
	"data/web/static/webp/bullhorn-2x.webp":                 dataWebStaticWebpBullhorn2xWebp,
	"data/web/static/webp/bullhorn-3x.webp":                 dataWebStaticWebpBullhorn3xWebp,
	"data/web/static/webp/bullhorn-4x.webp":                 dataWebStaticWebpBullhorn4xWebp,
	"data/web/static/webp/bullhorn-6x.webp":                 dataWebStaticWebpBullhorn6xWebp,
	"data/web/static/webp/bullhorn-8x.webp":                 dataWebStaticWebpBullhorn8xWebp,
	"data/web/static/webp/bullhorn.webp":                    dataWebStaticWebpBullhornWebp,
	"data/web/static/webp/calculator-2x.webp":               dataWebStaticWebpCalculator2xWebp,
	"data/web/static/webp/calculator-3x.webp":               dataWebStaticWebpCalculator3xWebp,
	"data/web/static/webp/calculator-4x.webp":               dataWebStaticWebpCalculator4xWebp,
	"data/web/static/webp/calculator-6x.webp":               dataWebStaticWebpCalculator6xWebp,
	"data/web/static/webp/calculator-8x.webp":               dataWebStaticWebpCalculator8xWebp,
	"data/web/static/webp/calculator.webp":                  dataWebStaticWebpCalculatorWebp,
	"data/web/static/webp/calendar-2x.webp":                 dataWebStaticWebpCalendar2xWebp,
	"data/web/static/webp/calendar-3x.webp":                 dataWebStaticWebpCalendar3xWebp,
	"data/web/static/webp/calendar-4x.webp":                 dataWebStaticWebpCalendar4xWebp,
	"data/web/static/webp/calendar-6x.webp":                 dataWebStaticWebpCalendar6xWebp,
	"data/web/static/webp/calendar-8x.webp":                 dataWebStaticWebpCalendar8xWebp,
	"data/web/static/webp/calendar.webp":                    dataWebStaticWebpCalendarWebp,
	"data/web/static/webp/camera-slr-2x.webp":               dataWebStaticWebpCameraSlr2xWebp,
	"data/web/static/webp/camera-slr-3x.webp":               dataWebStaticWebpCameraSlr3xWebp,
	"data/web/static/webp/camera-slr-4x.webp":               dataWebStaticWebpCameraSlr4xWebp,
	"data/web/static/webp/camera-slr-6x.webp":               dataWebStaticWebpCameraSlr6xWebp,
	"data/web/static/webp/camera-slr-8x.webp":               dataWebStaticWebpCameraSlr8xWebp,
	"data/web/static/webp/camera-slr.webp":                  dataWebStaticWebpCameraSlrWebp,
	"data/web/static/webp/caret-bottom-2x.webp":             dataWebStaticWebpCaretBottom2xWebp,
	"data/web/static/webp/caret-bottom-3x.webp":             dataWebStaticWebpCaretBottom3xWebp,
	"data/web/static/webp/caret-bottom-4x.webp":             dataWebStaticWebpCaretBottom4xWebp,
	"data/web/static/webp/caret-bottom-6x.webp":             dataWebStaticWebpCaretBottom6xWebp,
	"data/web/static/webp/caret-bottom-8x.webp":             dataWebStaticWebpCaretBottom8xWebp,
	"data/web/static/webp/caret-bottom.webp":                dataWebStaticWebpCaretBottomWebp,
	"data/web/static/webp/caret-left-2x.webp":               dataWebStaticWebpCaretLeft2xWebp,
	"data/web/static/webp/caret-left-3x.webp":               dataWebStaticWebpCaretLeft3xWebp,
	"data/web/static/webp/caret-left-4x.webp":               dataWebStaticWebpCaretLeft4xWebp,
	"data/web/static/webp/caret-left-6x.webp":               dataWebStaticWebpCaretLeft6xWebp,
	"data/web/static/webp/caret-left-8x.webp":               dataWebStaticWebpCaretLeft8xWebp,
	"data/web/static/webp/caret-left.webp":                  dataWebStaticWebpCaretLeftWebp,
	"data/web/static/webp/caret-right-2x.webp":              dataWebStaticWebpCaretRight2xWebp,
	"data/web/static/webp/caret-right-3x.webp":              dataWebStaticWebpCaretRight3xWebp,
	"data/web/static/webp/caret-right-4x.webp":              dataWebStaticWebpCaretRight4xWebp,
	"data/web/static/webp/caret-right-6x.webp":              dataWebStaticWebpCaretRight6xWebp,
	"data/web/static/webp/caret-right-8x.webp":              dataWebStaticWebpCaretRight8xWebp,
	"data/web/static/webp/caret-right.webp":                 dataWebStaticWebpCaretRightWebp,
	"data/web/static/webp/caret-top-2x.webp":                dataWebStaticWebpCaretTop2xWebp,
	"data/web/static/webp/caret-top-3x.webp":                dataWebStaticWebpCaretTop3xWebp,
	"data/web/static/webp/caret-top-4x.webp":                dataWebStaticWebpCaretTop4xWebp,
	"data/web/static/webp/caret-top-6x.webp":                dataWebStaticWebpCaretTop6xWebp,
	"data/web/static/webp/caret-top-8x.webp":                dataWebStaticWebpCaretTop8xWebp,
	"data/web/static/webp/caret-top.webp":                   dataWebStaticWebpCaretTopWebp,
	"data/web/static/webp/cart-2x.webp":                     dataWebStaticWebpCart2xWebp,
	"data/web/static/webp/cart-3x.webp":                     dataWebStaticWebpCart3xWebp,
	"data/web/static/webp/cart-4x.webp":                     dataWebStaticWebpCart4xWebp,
	"data/web/static/webp/cart-6x.webp":                     dataWebStaticWebpCart6xWebp,
	"data/web/static/webp/cart-8x.webp":                     dataWebStaticWebpCart8xWebp,
	"data/web/static/webp/cart.webp":                        dataWebStaticWebpCartWebp,
	"data/web/static/webp/chat-2x.webp":                     dataWebStaticWebpChat2xWebp,
	"data/web/static/webp/chat-3x.webp":                     dataWebStaticWebpChat3xWebp,
	"data/web/static/webp/chat-4x.webp":                     dataWebStaticWebpChat4xWebp,
	"data/web/static/webp/chat-6x.webp":                     dataWebStaticWebpChat6xWebp,
	"data/web/static/webp/chat-8x.webp":                     dataWebStaticWebpChat8xWebp,
	"data/web/static/webp/chat.webp":                        dataWebStaticWebpChatWebp,
	"data/web/static/webp/check-2x.webp":                    dataWebStaticWebpCheck2xWebp,
	"data/web/static/webp/check-3x.webp":                    dataWebStaticWebpCheck3xWebp,
	"data/web/static/webp/check-4x.webp":                    dataWebStaticWebpCheck4xWebp,
	"data/web/static/webp/check-6x.webp":                    dataWebStaticWebpCheck6xWebp,
	"data/web/static/webp/check-8x.webp":                    dataWebStaticWebpCheck8xWebp,
	"data/web/static/webp/check.webp":                       dataWebStaticWebpCheckWebp,
	"data/web/static/webp/chevron-bottom-2x.webp":           dataWebStaticWebpChevronBottom2xWebp,
	"data/web/static/webp/chevron-bottom-3x.webp":           dataWebStaticWebpChevronBottom3xWebp,
	"data/web/static/webp/chevron-bottom-4x.webp":           dataWebStaticWebpChevronBottom4xWebp,
	"data/web/static/webp/chevron-bottom-6x.webp":           dataWebStaticWebpChevronBottom6xWebp,
	"data/web/static/webp/chevron-bottom-8x.webp":           dataWebStaticWebpChevronBottom8xWebp,
	"data/web/static/webp/chevron-bottom.webp":              dataWebStaticWebpChevronBottomWebp,
	"data/web/static/webp/chevron-left-2x.webp":             dataWebStaticWebpChevronLeft2xWebp,
	"data/web/static/webp/chevron-left-3x.webp":             dataWebStaticWebpChevronLeft3xWebp,
	"data/web/static/webp/chevron-left-4x.webp":             dataWebStaticWebpChevronLeft4xWebp,
	"data/web/static/webp/chevron-left-6x.webp":             dataWebStaticWebpChevronLeft6xWebp,
	"data/web/static/webp/chevron-left-8x.webp":             dataWebStaticWebpChevronLeft8xWebp,
	"data/web/static/webp/chevron-left.webp":                dataWebStaticWebpChevronLeftWebp,
	"data/web/static/webp/chevron-right-2x.webp":            dataWebStaticWebpChevronRight2xWebp,
	"data/web/static/webp/chevron-right-3x.webp":            dataWebStaticWebpChevronRight3xWebp,
	"data/web/static/webp/chevron-right-4x.webp":            dataWebStaticWebpChevronRight4xWebp,
	"data/web/static/webp/chevron-right-6x.webp":            dataWebStaticWebpChevronRight6xWebp,
	"data/web/static/webp/chevron-right-8x.webp":            dataWebStaticWebpChevronRight8xWebp,
	"data/web/static/webp/chevron-right.webp":               dataWebStaticWebpChevronRightWebp,
	"data/web/static/webp/chevron-top-2x.webp":              dataWebStaticWebpChevronTop2xWebp,
	"data/web/static/webp/chevron-top-3x.webp":              dataWebStaticWebpChevronTop3xWebp,
	"data/web/static/webp/chevron-top-4x.webp":              dataWebStaticWebpChevronTop4xWebp,
	"data/web/static/webp/chevron-top-6x.webp":              dataWebStaticWebpChevronTop6xWebp,
	"data/web/static/webp/chevron-top-8x.webp":              dataWebStaticWebpChevronTop8xWebp,
	"data/web/static/webp/chevron-top.webp":                 dataWebStaticWebpChevronTopWebp,
	"data/web/static/webp/circle-check-2x.webp":             dataWebStaticWebpCircleCheck2xWebp,
	"data/web/static/webp/circle-check-3x.webp":             dataWebStaticWebpCircleCheck3xWebp,
	"data/web/static/webp/circle-check-4x.webp":             dataWebStaticWebpCircleCheck4xWebp,
	"data/web/static/webp/circle-check-6x.webp":             dataWebStaticWebpCircleCheck6xWebp,
	"data/web/static/webp/circle-check-8x.webp":             dataWebStaticWebpCircleCheck8xWebp,
	"data/web/static/webp/circle-check.webp":                dataWebStaticWebpCircleCheckWebp,
	"data/web/static/webp/circle-x-2x.webp":                 dataWebStaticWebpCircleX2xWebp,
	"data/web/static/webp/circle-x-3x.webp":                 dataWebStaticWebpCircleX3xWebp,
	"data/web/static/webp/circle-x-4x.webp":                 dataWebStaticWebpCircleX4xWebp,
	"data/web/static/webp/circle-x-6x.webp":                 dataWebStaticWebpCircleX6xWebp,
	"data/web/static/webp/circle-x-8x.webp":                 dataWebStaticWebpCircleX8xWebp,
	"data/web/static/webp/circle-x.webp":                    dataWebStaticWebpCircleXWebp,
	"data/web/static/webp/clipboard-2x.webp":                dataWebStaticWebpClipboard2xWebp,
	"data/web/static/webp/clipboard-3x.webp":                dataWebStaticWebpClipboard3xWebp,
	"data/web/static/webp/clipboard-4x.webp":                dataWebStaticWebpClipboard4xWebp,
	"data/web/static/webp/clipboard-6x.webp":                dataWebStaticWebpClipboard6xWebp,
	"data/web/static/webp/clipboard-8x.webp":                dataWebStaticWebpClipboard8xWebp,
	"data/web/static/webp/clipboard.webp":                   dataWebStaticWebpClipboardWebp,
	"data/web/static/webp/clock-2x.webp":                    dataWebStaticWebpClock2xWebp,
	"data/web/static/webp/clock-3x.webp":                    dataWebStaticWebpClock3xWebp,
	"data/web/static/webp/clock-4x.webp":                    dataWebStaticWebpClock4xWebp,
	"data/web/static/webp/clock-6x.webp":                    dataWebStaticWebpClock6xWebp,
	"data/web/static/webp/clock-8x.webp":                    dataWebStaticWebpClock8xWebp,
	"data/web/static/webp/clock.webp":                       dataWebStaticWebpClockWebp,
	"data/web/static/webp/cloud-2x.webp":                    dataWebStaticWebpCloud2xWebp,
	"data/web/static/webp/cloud-3x.webp":                    dataWebStaticWebpCloud3xWebp,
	"data/web/static/webp/cloud-4x.webp":                    dataWebStaticWebpCloud4xWebp,
	"data/web/static/webp/cloud-6x.webp":                    dataWebStaticWebpCloud6xWebp,
	"data/web/static/webp/cloud-8x.webp":                    dataWebStaticWebpCloud8xWebp,
	"data/web/static/webp/cloud-download-2x.webp":           dataWebStaticWebpCloudDownload2xWebp,
	"data/web/static/webp/cloud-download-3x.webp":           dataWebStaticWebpCloudDownload3xWebp,
	"data/web/static/webp/cloud-download-4x.webp":           dataWebStaticWebpCloudDownload4xWebp,
	"data/web/static/webp/cloud-download-6x.webp":           dataWebStaticWebpCloudDownload6xWebp,
	"data/web/static/webp/cloud-download-8x.webp":           dataWebStaticWebpCloudDownload8xWebp,
	"data/web/static/webp/cloud-download.webp":              dataWebStaticWebpCloudDownloadWebp,
	"data/web/static/webp/cloud-upload-2x.webp":             dataWebStaticWebpCloudUpload2xWebp,
	"data/web/static/webp/cloud-upload-3x.webp":             dataWebStaticWebpCloudUpload3xWebp,
	"data/web/static/webp/cloud-upload-4x.webp":             dataWebStaticWebpCloudUpload4xWebp,
	"data/web/static/webp/cloud-upload-6x.webp":             dataWebStaticWebpCloudUpload6xWebp,
	"data/web/static/webp/cloud-upload-8x.webp":             dataWebStaticWebpCloudUpload8xWebp,
	"data/web/static/webp/cloud-upload.webp":                dataWebStaticWebpCloudUploadWebp,
	"data/web/static/webp/cloud.webp":                       dataWebStaticWebpCloudWebp,
	"data/web/static/webp/cloudy-2x.webp":                   dataWebStaticWebpCloudy2xWebp,
	"data/web/static/webp/cloudy-3x.webp":                   dataWebStaticWebpCloudy3xWebp,
	"data/web/static/webp/cloudy-4x.webp":                   dataWebStaticWebpCloudy4xWebp,
	"data/web/static/webp/cloudy-6x.webp":                   dataWebStaticWebpCloudy6xWebp,
	"data/web/static/webp/cloudy-8x.webp":                   dataWebStaticWebpCloudy8xWebp,
	"data/web/static/webp/cloudy.webp":                      dataWebStaticWebpCloudyWebp,
	"data/web/static/webp/code-2x.webp":                     dataWebStaticWebpCode2xWebp,
	"data/web/static/webp/code-3x.webp":                     dataWebStaticWebpCode3xWebp,
	"data/web/static/webp/code-4x.webp":                     dataWebStaticWebpCode4xWebp,
	"data/web/static/webp/code-6x.webp":                     dataWebStaticWebpCode6xWebp,
	"data/web/static/webp/code-8x.webp":                     dataWebStaticWebpCode8xWebp,
	"data/web/static/webp/code.webp":                        dataWebStaticWebpCodeWebp,
	"data/web/static/webp/cog-2x.webp":                      dataWebStaticWebpCog2xWebp,
	"data/web/static/webp/cog-3x.webp":                      dataWebStaticWebpCog3xWebp,
	"data/web/static/webp/cog-4x.webp":                      dataWebStaticWebpCog4xWebp,
	"data/web/static/webp/cog-6x.webp":                      dataWebStaticWebpCog6xWebp,
	"data/web/static/webp/cog-8x.webp":                      dataWebStaticWebpCog8xWebp,
	"data/web/static/webp/cog.webp":                         dataWebStaticWebpCogWebp,
	"data/web/static/webp/collapse-down-2x.webp":            dataWebStaticWebpCollapseDown2xWebp,
	"data/web/static/webp/collapse-down-3x.webp":            dataWebStaticWebpCollapseDown3xWebp,
	"data/web/static/webp/collapse-down-4x.webp":            dataWebStaticWebpCollapseDown4xWebp,
	"data/web/static/webp/collapse-down-6x.webp":            dataWebStaticWebpCollapseDown6xWebp,
	"data/web/static/webp/collapse-down-8x.webp":            dataWebStaticWebpCollapseDown8xWebp,
	"data/web/static/webp/collapse-down.webp":               dataWebStaticWebpCollapseDownWebp,
	"data/web/static/webp/collapse-left-2x.webp":            dataWebStaticWebpCollapseLeft2xWebp,
	"data/web/static/webp/collapse-left-3x.webp":            dataWebStaticWebpCollapseLeft3xWebp,
	"data/web/static/webp/collapse-left-4x.webp":            dataWebStaticWebpCollapseLeft4xWebp,
	"data/web/static/webp/collapse-left-6x.webp":            dataWebStaticWebpCollapseLeft6xWebp,
	"data/web/static/webp/collapse-left-8x.webp":            dataWebStaticWebpCollapseLeft8xWebp,
	"data/web/static/webp/collapse-left.webp":               dataWebStaticWebpCollapseLeftWebp,
	"data/web/static/webp/collapse-right-2x.webp":           dataWebStaticWebpCollapseRight2xWebp,
	"data/web/static/webp/collapse-right-3x.webp":           dataWebStaticWebpCollapseRight3xWebp,
	"data/web/static/webp/collapse-right-4x.webp":           dataWebStaticWebpCollapseRight4xWebp,
	"data/web/static/webp/collapse-right-6x.webp":           dataWebStaticWebpCollapseRight6xWebp,
	"data/web/static/webp/collapse-right-8x.webp":           dataWebStaticWebpCollapseRight8xWebp,
	"data/web/static/webp/collapse-right.webp":              dataWebStaticWebpCollapseRightWebp,
	"data/web/static/webp/collapse-up-2x.webp":              dataWebStaticWebpCollapseUp2xWebp,
	"data/web/static/webp/collapse-up-3x.webp":              dataWebStaticWebpCollapseUp3xWebp,
	"data/web/static/webp/collapse-up-4x.webp":              dataWebStaticWebpCollapseUp4xWebp,
	"data/web/static/webp/collapse-up-6x.webp":              dataWebStaticWebpCollapseUp6xWebp,
	"data/web/static/webp/collapse-up-8x.webp":              dataWebStaticWebpCollapseUp8xWebp,
	"data/web/static/webp/collapse-up.webp":                 dataWebStaticWebpCollapseUpWebp,
	"data/web/static/webp/command-2x.webp":                  dataWebStaticWebpCommand2xWebp,
	"data/web/static/webp/command-3x.webp":                  dataWebStaticWebpCommand3xWebp,
	"data/web/static/webp/command-4x.webp":                  dataWebStaticWebpCommand4xWebp,
	"data/web/static/webp/command-6x.webp":                  dataWebStaticWebpCommand6xWebp,
	"data/web/static/webp/command-8x.webp":                  dataWebStaticWebpCommand8xWebp,
	"data/web/static/webp/command.webp":                     dataWebStaticWebpCommandWebp,
	"data/web/static/webp/comment-square-2x.webp":           dataWebStaticWebpCommentSquare2xWebp,
	"data/web/static/webp/comment-square-3x.webp":           dataWebStaticWebpCommentSquare3xWebp,
	"data/web/static/webp/comment-square-4x.webp":           dataWebStaticWebpCommentSquare4xWebp,
	"data/web/static/webp/comment-square-6x.webp":           dataWebStaticWebpCommentSquare6xWebp,
	"data/web/static/webp/comment-square-8x.webp":           dataWebStaticWebpCommentSquare8xWebp,
	"data/web/static/webp/comment-square.webp":              dataWebStaticWebpCommentSquareWebp,
	"data/web/static/webp/compass-2x.webp":                  dataWebStaticWebpCompass2xWebp,
	"data/web/static/webp/compass-3x.webp":                  dataWebStaticWebpCompass3xWebp,
	"data/web/static/webp/compass-4x.webp":                  dataWebStaticWebpCompass4xWebp,
	"data/web/static/webp/compass-6x.webp":                  dataWebStaticWebpCompass6xWebp,
	"data/web/static/webp/compass-8x.webp":                  dataWebStaticWebpCompass8xWebp,
	"data/web/static/webp/compass.webp":                     dataWebStaticWebpCompassWebp,
	"data/web/static/webp/contrast-2x.webp":                 dataWebStaticWebpContrast2xWebp,
	"data/web/static/webp/contrast-3x.webp":                 dataWebStaticWebpContrast3xWebp,
	"data/web/static/webp/contrast-4x.webp":                 dataWebStaticWebpContrast4xWebp,
	"data/web/static/webp/contrast-6x.webp":                 dataWebStaticWebpContrast6xWebp,
	"data/web/static/webp/contrast-8x.webp":                 dataWebStaticWebpContrast8xWebp,
	"data/web/static/webp/contrast.webp":                    dataWebStaticWebpContrastWebp,
	"data/web/static/webp/copywriting-2x.webp":              dataWebStaticWebpCopywriting2xWebp,
	"data/web/static/webp/copywriting-3x.webp":              dataWebStaticWebpCopywriting3xWebp,
	"data/web/static/webp/copywriting-4x.webp":              dataWebStaticWebpCopywriting4xWebp,
	"data/web/static/webp/copywriting-6x.webp":              dataWebStaticWebpCopywriting6xWebp,
	"data/web/static/webp/copywriting-8x.webp":              dataWebStaticWebpCopywriting8xWebp,
	"data/web/static/webp/copywriting.webp":                 dataWebStaticWebpCopywritingWebp,
	"data/web/static/webp/credit-card-2x.webp":              dataWebStaticWebpCreditCard2xWebp,
	"data/web/static/webp/credit-card-3x.webp":              dataWebStaticWebpCreditCard3xWebp,
	"data/web/static/webp/credit-card-4x.webp":              dataWebStaticWebpCreditCard4xWebp,
	"data/web/static/webp/credit-card-6x.webp":              dataWebStaticWebpCreditCard6xWebp,
	"data/web/static/webp/credit-card-8x.webp":              dataWebStaticWebpCreditCard8xWebp,
	"data/web/static/webp/credit-card.webp":                 dataWebStaticWebpCreditCardWebp,
	"data/web/static/webp/crop-2x.webp":                     dataWebStaticWebpCrop2xWebp,
	"data/web/static/webp/crop-3x.webp":                     dataWebStaticWebpCrop3xWebp,
	"data/web/static/webp/crop-4x.webp":                     dataWebStaticWebpCrop4xWebp,
	"data/web/static/webp/crop-6x.webp":                     dataWebStaticWebpCrop6xWebp,
	"data/web/static/webp/crop-8x.webp":                     dataWebStaticWebpCrop8xWebp,
	"data/web/static/webp/crop.webp":                        dataWebStaticWebpCropWebp,
	"data/web/static/webp/dashboard-2x.webp":                dataWebStaticWebpDashboard2xWebp,
	"data/web/static/webp/dashboard-3x.webp":                dataWebStaticWebpDashboard3xWebp,
	"data/web/static/webp/dashboard-4x.webp":                dataWebStaticWebpDashboard4xWebp,
	"data/web/static/webp/dashboard-6x.webp":                dataWebStaticWebpDashboard6xWebp,
	"data/web/static/webp/dashboard-8x.webp":                dataWebStaticWebpDashboard8xWebp,
	"data/web/static/webp/dashboard.webp":                   dataWebStaticWebpDashboardWebp,
	"data/web/static/webp/data-transfer-download-2x.webp":   dataWebStaticWebpDataTransferDownload2xWebp,
	"data/web/static/webp/data-transfer-download-3x.webp":   dataWebStaticWebpDataTransferDownload3xWebp,
	"data/web/static/webp/data-transfer-download-4x.webp":   dataWebStaticWebpDataTransferDownload4xWebp,
	"data/web/static/webp/data-transfer-download-6x.webp":   dataWebStaticWebpDataTransferDownload6xWebp,
	"data/web/static/webp/data-transfer-download-8x.webp":   dataWebStaticWebpDataTransferDownload8xWebp,
	"data/web/static/webp/data-transfer-download.webp":      dataWebStaticWebpDataTransferDownloadWebp,
	"data/web/static/webp/data-transfer-upload-2x.webp":     dataWebStaticWebpDataTransferUpload2xWebp,
	"data/web/static/webp/data-transfer-upload-3x.webp":     dataWebStaticWebpDataTransferUpload3xWebp,
	"data/web/static/webp/data-transfer-upload-4x.webp":     dataWebStaticWebpDataTransferUpload4xWebp,
	"data/web/static/webp/data-transfer-upload-6x.webp":     dataWebStaticWebpDataTransferUpload6xWebp,
	"data/web/static/webp/data-transfer-upload-8x.webp":     dataWebStaticWebpDataTransferUpload8xWebp,
	"data/web/static/webp/data-transfer-upload.webp":        dataWebStaticWebpDataTransferUploadWebp,
	"data/web/static/webp/delete-2x.webp":                   dataWebStaticWebpDelete2xWebp,
	"data/web/static/webp/delete-3x.webp":                   dataWebStaticWebpDelete3xWebp,
	"data/web/static/webp/delete-4x.webp":                   dataWebStaticWebpDelete4xWebp,
	"data/web/static/webp/delete-6x.webp":                   dataWebStaticWebpDelete6xWebp,
	"data/web/static/webp/delete-8x.webp":                   dataWebStaticWebpDelete8xWebp,
	"data/web/static/webp/delete.webp":                      dataWebStaticWebpDeleteWebp,
	"data/web/static/webp/dial-2x.webp":                     dataWebStaticWebpDial2xWebp,
	"data/web/static/webp/dial-3x.webp":                     dataWebStaticWebpDial3xWebp,
	"data/web/static/webp/dial-4x.webp":                     dataWebStaticWebpDial4xWebp,
	"data/web/static/webp/dial-6x.webp":                     dataWebStaticWebpDial6xWebp,
	"data/web/static/webp/dial-8x.webp":                     dataWebStaticWebpDial8xWebp,
	"data/web/static/webp/dial.webp":                        dataWebStaticWebpDialWebp,
	"data/web/static/webp/document-2x.webp":                 dataWebStaticWebpDocument2xWebp,
	"data/web/static/webp/document-3x.webp":                 dataWebStaticWebpDocument3xWebp,
	"data/web/static/webp/document-4x.webp":                 dataWebStaticWebpDocument4xWebp,
	"data/web/static/webp/document-6x.webp":                 dataWebStaticWebpDocument6xWebp,
	"data/web/static/webp/document-8x.webp":                 dataWebStaticWebpDocument8xWebp,
	"data/web/static/webp/document.webp":                    dataWebStaticWebpDocumentWebp,
	"data/web/static/webp/dollar-2x.webp":                   dataWebStaticWebpDollar2xWebp,
	"data/web/static/webp/dollar-3x.webp":                   dataWebStaticWebpDollar3xWebp,
	"data/web/static/webp/dollar-4x.webp":                   dataWebStaticWebpDollar4xWebp,
	"data/web/static/webp/dollar-6x.webp":                   dataWebStaticWebpDollar6xWebp,
	"data/web/static/webp/dollar-8x.webp":                   dataWebStaticWebpDollar8xWebp,
	"data/web/static/webp/dollar.webp":                      dataWebStaticWebpDollarWebp,
	"data/web/static/webp/double-quote-sans-left-2x.webp":   dataWebStaticWebpDoubleQuoteSansLeft2xWebp,
	"data/web/static/webp/double-quote-sans-left-3x.webp":   dataWebStaticWebpDoubleQuoteSansLeft3xWebp,
	"data/web/static/webp/double-quote-sans-left-4x.webp":   dataWebStaticWebpDoubleQuoteSansLeft4xWebp,
	"data/web/static/webp/double-quote-sans-left-6x.webp":   dataWebStaticWebpDoubleQuoteSansLeft6xWebp,
	"data/web/static/webp/double-quote-sans-left-8x.webp":   dataWebStaticWebpDoubleQuoteSansLeft8xWebp,
	"data/web/static/webp/double-quote-sans-left.webp":      dataWebStaticWebpDoubleQuoteSansLeftWebp,
	"data/web/static/webp/double-quote-sans-right-2x.webp":  dataWebStaticWebpDoubleQuoteSansRight2xWebp,
	"data/web/static/webp/double-quote-sans-right-3x.webp":  dataWebStaticWebpDoubleQuoteSansRight3xWebp,
	"data/web/static/webp/double-quote-sans-right-4x.webp":  dataWebStaticWebpDoubleQuoteSansRight4xWebp,
	"data/web/static/webp/double-quote-sans-right-6x.webp":  dataWebStaticWebpDoubleQuoteSansRight6xWebp,
	"data/web/static/webp/double-quote-sans-right-8x.webp":  dataWebStaticWebpDoubleQuoteSansRight8xWebp,
	"data/web/static/webp/double-quote-sans-right.webp":     dataWebStaticWebpDoubleQuoteSansRightWebp,
	"data/web/static/webp/double-quote-serif-left-2x.webp":  dataWebStaticWebpDoubleQuoteSerifLeft2xWebp,
	"data/web/static/webp/double-quote-serif-left-3x.webp":  dataWebStaticWebpDoubleQuoteSerifLeft3xWebp,
	"data/web/static/webp/double-quote-serif-left-4x.webp":  dataWebStaticWebpDoubleQuoteSerifLeft4xWebp,
	"data/web/static/webp/double-quote-serif-left-6x.webp":  dataWebStaticWebpDoubleQuoteSerifLeft6xWebp,
	"data/web/static/webp/double-quote-serif-left-8x.webp":  dataWebStaticWebpDoubleQuoteSerifLeft8xWebp,
	"data/web/static/webp/double-quote-serif-left.webp":     dataWebStaticWebpDoubleQuoteSerifLeftWebp,
	"data/web/static/webp/double-quote-serif-right-2x.webp": dataWebStaticWebpDoubleQuoteSerifRight2xWebp,
	"data/web/static/webp/double-quote-serif-right-3x.webp": dataWebStaticWebpDoubleQuoteSerifRight3xWebp,
	"data/web/static/webp/double-quote-serif-right-4x.webp": dataWebStaticWebpDoubleQuoteSerifRight4xWebp,
	"data/web/static/webp/double-quote-serif-right-6x.webp": dataWebStaticWebpDoubleQuoteSerifRight6xWebp,
	"data/web/static/webp/double-quote-serif-right-8x.webp": dataWebStaticWebpDoubleQuoteSerifRight8xWebp,
	"data/web/static/webp/double-quote-serif-right.webp":    dataWebStaticWebpDoubleQuoteSerifRightWebp,
	"data/web/static/webp/droplet-2x.webp":                  dataWebStaticWebpDroplet2xWebp,
	"data/web/static/webp/droplet-3x.webp":                  dataWebStaticWebpDroplet3xWebp,
	"data/web/static/webp/droplet-4x.webp":                  dataWebStaticWebpDroplet4xWebp,
	"data/web/static/webp/droplet-6x.webp":                  dataWebStaticWebpDroplet6xWebp,
	"data/web/static/webp/droplet-8x.webp":                  dataWebStaticWebpDroplet8xWebp,
	"data/web/static/webp/droplet.webp":                     dataWebStaticWebpDropletWebp,
	"data/web/static/webp/eject-2x.webp":                    dataWebStaticWebpEject2xWebp,
	"data/web/static/webp/eject-3x.webp":                    dataWebStaticWebpEject3xWebp,
	"data/web/static/webp/eject-4x.webp":                    dataWebStaticWebpEject4xWebp,
	"data/web/static/webp/eject-6x.webp":                    dataWebStaticWebpEject6xWebp,
	"data/web/static/webp/eject-8x.webp":                    dataWebStaticWebpEject8xWebp,
	"data/web/static/webp/eject.webp":                       dataWebStaticWebpEjectWebp,
	"data/web/static/webp/elevator-2x.webp":                 dataWebStaticWebpElevator2xWebp,
	"data/web/static/webp/elevator-3x.webp":                 dataWebStaticWebpElevator3xWebp,
	"data/web/static/webp/elevator-4x.webp":                 dataWebStaticWebpElevator4xWebp,
	"data/web/static/webp/elevator-6x.webp":                 dataWebStaticWebpElevator6xWebp,
	"data/web/static/webp/elevator-8x.webp":                 dataWebStaticWebpElevator8xWebp,
	"data/web/static/webp/elevator.webp":                    dataWebStaticWebpElevatorWebp,
	"data/web/static/webp/ellipses-2x.webp":                 dataWebStaticWebpEllipses2xWebp,
	"data/web/static/webp/ellipses-3x.webp":                 dataWebStaticWebpEllipses3xWebp,
	"data/web/static/webp/ellipses-4x.webp":                 dataWebStaticWebpEllipses4xWebp,
	"data/web/static/webp/ellipses-6x.webp":                 dataWebStaticWebpEllipses6xWebp,
	"data/web/static/webp/ellipses-8x.webp":                 dataWebStaticWebpEllipses8xWebp,
	"data/web/static/webp/ellipses.webp":                    dataWebStaticWebpEllipsesWebp,
	"data/web/static/webp/envelope-closed-2x.webp":          dataWebStaticWebpEnvelopeClosed2xWebp,
	"data/web/static/webp/envelope-closed-3x.webp":          dataWebStaticWebpEnvelopeClosed3xWebp,
	"data/web/static/webp/envelope-closed-4x.webp":          dataWebStaticWebpEnvelopeClosed4xWebp,
	"data/web/static/webp/envelope-closed-6x.webp":          dataWebStaticWebpEnvelopeClosed6xWebp,
	"data/web/static/webp/envelope-closed-8x.webp":          dataWebStaticWebpEnvelopeClosed8xWebp,
	"data/web/static/webp/envelope-closed.webp":             dataWebStaticWebpEnvelopeClosedWebp,
	"data/web/static/webp/envelope-open-2x.webp":            dataWebStaticWebpEnvelopeOpen2xWebp,
	"data/web/static/webp/envelope-open-3x.webp":            dataWebStaticWebpEnvelopeOpen3xWebp,
	"data/web/static/webp/envelope-open-4x.webp":            dataWebStaticWebpEnvelopeOpen4xWebp,
	"data/web/static/webp/envelope-open-6x.webp":            dataWebStaticWebpEnvelopeOpen6xWebp,
	"data/web/static/webp/envelope-open-8x.webp":            dataWebStaticWebpEnvelopeOpen8xWebp,
	"data/web/static/webp/envelope-open.webp":               dataWebStaticWebpEnvelopeOpenWebp,
	"data/web/static/webp/euro-2x.webp":                     dataWebStaticWebpEuro2xWebp,
	"data/web/static/webp/euro-3x.webp":                     dataWebStaticWebpEuro3xWebp,
	"data/web/static/webp/euro-4x.webp":                     dataWebStaticWebpEuro4xWebp,
	"data/web/static/webp/euro-6x.webp":                     dataWebStaticWebpEuro6xWebp,
	"data/web/static/webp/euro-8x.webp":                     dataWebStaticWebpEuro8xWebp,
	"data/web/static/webp/euro.webp":                        dataWebStaticWebpEuroWebp,
	"data/web/static/webp/excerpt-2x.webp":                  dataWebStaticWebpExcerpt2xWebp,
	"data/web/static/webp/excerpt-3x.webp":                  dataWebStaticWebpExcerpt3xWebp,
	"data/web/static/webp/excerpt-4x.webp":                  dataWebStaticWebpExcerpt4xWebp,
	"data/web/static/webp/excerpt-6x.webp":                  dataWebStaticWebpExcerpt6xWebp,
	"data/web/static/webp/excerpt-8x.webp":                  dataWebStaticWebpExcerpt8xWebp,
	"data/web/static/webp/excerpt.webp":                     dataWebStaticWebpExcerptWebp,
	"data/web/static/webp/expand-down-2x.webp":              dataWebStaticWebpExpandDown2xWebp,
	"data/web/static/webp/expand-down-3x.webp":              dataWebStaticWebpExpandDown3xWebp,
	"data/web/static/webp/expand-down-4x.webp":              dataWebStaticWebpExpandDown4xWebp,
	"data/web/static/webp/expand-down-6x.webp":              dataWebStaticWebpExpandDown6xWebp,
	"data/web/static/webp/expand-down-8x.webp":              dataWebStaticWebpExpandDown8xWebp,
	"data/web/static/webp/expand-down.webp":                 dataWebStaticWebpExpandDownWebp,
	"data/web/static/webp/expand-left-2x.webp":              dataWebStaticWebpExpandLeft2xWebp,
	"data/web/static/webp/expand-left-3x.webp":              dataWebStaticWebpExpandLeft3xWebp,
	"data/web/static/webp/expand-left-4x.webp":              dataWebStaticWebpExpandLeft4xWebp,
	"data/web/static/webp/expand-left-6x.webp":              dataWebStaticWebpExpandLeft6xWebp,
	"data/web/static/webp/expand-left-8x.webp":              dataWebStaticWebpExpandLeft8xWebp,
	"data/web/static/webp/expand-left.webp":                 dataWebStaticWebpExpandLeftWebp,
	"data/web/static/webp/expand-right-2x.webp":             dataWebStaticWebpExpandRight2xWebp,
	"data/web/static/webp/expand-right-3x.webp":             dataWebStaticWebpExpandRight3xWebp,
	"data/web/static/webp/expand-right-4x.webp":             dataWebStaticWebpExpandRight4xWebp,
	"data/web/static/webp/expand-right-6x.webp":             dataWebStaticWebpExpandRight6xWebp,
	"data/web/static/webp/expand-right-8x.webp":             dataWebStaticWebpExpandRight8xWebp,
	"data/web/static/webp/expand-right.webp":                dataWebStaticWebpExpandRightWebp,
	"data/web/static/webp/expand-up-2x.webp":                dataWebStaticWebpExpandUp2xWebp,
	"data/web/static/webp/expand-up-3x.webp":                dataWebStaticWebpExpandUp3xWebp,
	"data/web/static/webp/expand-up-4x.webp":                dataWebStaticWebpExpandUp4xWebp,
	"data/web/static/webp/expand-up-6x.webp":                dataWebStaticWebpExpandUp6xWebp,
	"data/web/static/webp/expand-up-8x.webp":                dataWebStaticWebpExpandUp8xWebp,
	"data/web/static/webp/expand-up.webp":                   dataWebStaticWebpExpandUpWebp,
	"data/web/static/webp/external-link-2x.webp":            dataWebStaticWebpExternalLink2xWebp,
	"data/web/static/webp/external-link-3x.webp":            dataWebStaticWebpExternalLink3xWebp,
	"data/web/static/webp/external-link-4x.webp":            dataWebStaticWebpExternalLink4xWebp,
	"data/web/static/webp/external-link-6x.webp":            dataWebStaticWebpExternalLink6xWebp,
	"data/web/static/webp/external-link-8x.webp":            dataWebStaticWebpExternalLink8xWebp,
	"data/web/static/webp/external-link.webp":               dataWebStaticWebpExternalLinkWebp,
	"data/web/static/webp/eye-2x.webp":                      dataWebStaticWebpEye2xWebp,
	"data/web/static/webp/eye-3x.webp":                      dataWebStaticWebpEye3xWebp,
	"data/web/static/webp/eye-4x.webp":                      dataWebStaticWebpEye4xWebp,
	"data/web/static/webp/eye-6x.webp":                      dataWebStaticWebpEye6xWebp,
	"data/web/static/webp/eye-8x.webp":                      dataWebStaticWebpEye8xWebp,
	"data/web/static/webp/eye.webp":                         dataWebStaticWebpEyeWebp,
	"data/web/static/webp/eyedropper-2x.webp":               dataWebStaticWebpEyedropper2xWebp,
	"data/web/static/webp/eyedropper-3x.webp":               dataWebStaticWebpEyedropper3xWebp,
	"data/web/static/webp/eyedropper-4x.webp":               dataWebStaticWebpEyedropper4xWebp,
	"data/web/static/webp/eyedropper-6x.webp":               dataWebStaticWebpEyedropper6xWebp,
	"data/web/static/webp/eyedropper-8x.webp":               dataWebStaticWebpEyedropper8xWebp,
	"data/web/static/webp/eyedropper.webp":                  dataWebStaticWebpEyedropperWebp,
	"data/web/static/webp/file-2x.webp":                     dataWebStaticWebpFile2xWebp,
	"data/web/static/webp/file-3x.webp":                     dataWebStaticWebpFile3xWebp,
	"data/web/static/webp/file-4x.webp":                     dataWebStaticWebpFile4xWebp,
	"data/web/static/webp/file-6x.webp":                     dataWebStaticWebpFile6xWebp,
	"data/web/static/webp/file-8x.webp":                     dataWebStaticWebpFile8xWebp,
	"data/web/static/webp/file.webp":                        dataWebStaticWebpFileWebp,
	"data/web/static/webp/fire-2x.webp":                     dataWebStaticWebpFire2xWebp,
	"data/web/static/webp/fire-3x.webp":                     dataWebStaticWebpFire3xWebp,
	"data/web/static/webp/fire-4x.webp":                     dataWebStaticWebpFire4xWebp,
	"data/web/static/webp/fire-6x.webp":                     dataWebStaticWebpFire6xWebp,
	"data/web/static/webp/fire-8x.webp":                     dataWebStaticWebpFire8xWebp,
	"data/web/static/webp/fire.webp":                        dataWebStaticWebpFireWebp,
	"data/web/static/webp/flag-2x.webp":                     dataWebStaticWebpFlag2xWebp,
	"data/web/static/webp/flag-3x.webp":                     dataWebStaticWebpFlag3xWebp,
	"data/web/static/webp/flag-4x.webp":                     dataWebStaticWebpFlag4xWebp,
	"data/web/static/webp/flag-6x.webp":                     dataWebStaticWebpFlag6xWebp,
	"data/web/static/webp/flag-8x.webp":                     dataWebStaticWebpFlag8xWebp,
	"data/web/static/webp/flag.webp":                        dataWebStaticWebpFlagWebp,
	"data/web/static/webp/flash-2x.webp":                    dataWebStaticWebpFlash2xWebp,
	"data/web/static/webp/flash-3x.webp":                    dataWebStaticWebpFlash3xWebp,
	"data/web/static/webp/flash-4x.webp":                    dataWebStaticWebpFlash4xWebp,
	"data/web/static/webp/flash-6x.webp":                    dataWebStaticWebpFlash6xWebp,
	"data/web/static/webp/flash-8x.webp":                    dataWebStaticWebpFlash8xWebp,
	"data/web/static/webp/flash.webp":                       dataWebStaticWebpFlashWebp,
	"data/web/static/webp/folder-2x.webp":                   dataWebStaticWebpFolder2xWebp,
	"data/web/static/webp/folder-3x.webp":                   dataWebStaticWebpFolder3xWebp,
	"data/web/static/webp/folder-4x.webp":                   dataWebStaticWebpFolder4xWebp,
	"data/web/static/webp/folder-6x.webp":                   dataWebStaticWebpFolder6xWebp,
	"data/web/static/webp/folder-8x.webp":                   dataWebStaticWebpFolder8xWebp,
	"data/web/static/webp/folder.webp":                      dataWebStaticWebpFolderWebp,
	"data/web/static/webp/fork-2x.webp":                     dataWebStaticWebpFork2xWebp,
	"data/web/static/webp/fork-3x.webp":                     dataWebStaticWebpFork3xWebp,
	"data/web/static/webp/fork-4x.webp":                     dataWebStaticWebpFork4xWebp,
	"data/web/static/webp/fork-6x.webp":                     dataWebStaticWebpFork6xWebp,
	"data/web/static/webp/fork-8x.webp":                     dataWebStaticWebpFork8xWebp,
	"data/web/static/webp/fork.webp":                        dataWebStaticWebpForkWebp,
	"data/web/static/webp/fullscreen-enter-2x.webp":         dataWebStaticWebpFullscreenEnter2xWebp,
	"data/web/static/webp/fullscreen-enter-3x.webp":         dataWebStaticWebpFullscreenEnter3xWebp,
	"data/web/static/webp/fullscreen-enter-4x.webp":         dataWebStaticWebpFullscreenEnter4xWebp,
	"data/web/static/webp/fullscreen-enter-6x.webp":         dataWebStaticWebpFullscreenEnter6xWebp,
	"data/web/static/webp/fullscreen-enter-8x.webp":         dataWebStaticWebpFullscreenEnter8xWebp,
	"data/web/static/webp/fullscreen-enter.webp":            dataWebStaticWebpFullscreenEnterWebp,
	"data/web/static/webp/fullscreen-exit-2x.webp":          dataWebStaticWebpFullscreenExit2xWebp,
	"data/web/static/webp/fullscreen-exit-3x.webp":          dataWebStaticWebpFullscreenExit3xWebp,
	"data/web/static/webp/fullscreen-exit-4x.webp":          dataWebStaticWebpFullscreenExit4xWebp,
	"data/web/static/webp/fullscreen-exit-6x.webp":          dataWebStaticWebpFullscreenExit6xWebp,
	"data/web/static/webp/fullscreen-exit-8x.webp":          dataWebStaticWebpFullscreenExit8xWebp,
	"data/web/static/webp/fullscreen-exit.webp":             dataWebStaticWebpFullscreenExitWebp,
	"data/web/static/webp/globe-2x.webp":                    dataWebStaticWebpGlobe2xWebp,
	"data/web/static/webp/globe-3x.webp":                    dataWebStaticWebpGlobe3xWebp,
	"data/web/static/webp/globe-4x.webp":                    dataWebStaticWebpGlobe4xWebp,
	"data/web/static/webp/globe-6x.webp":                    dataWebStaticWebpGlobe6xWebp,
	"data/web/static/webp/globe-8x.webp":                    dataWebStaticWebpGlobe8xWebp,
	"data/web/static/webp/globe.webp":                       dataWebStaticWebpGlobeWebp,
	"data/web/static/webp/graph-2x.webp":                    dataWebStaticWebpGraph2xWebp,
	"data/web/static/webp/graph-3x.webp":                    dataWebStaticWebpGraph3xWebp,
	"data/web/static/webp/graph-4x.webp":                    dataWebStaticWebpGraph4xWebp,
	"data/web/static/webp/graph-6x.webp":                    dataWebStaticWebpGraph6xWebp,
	"data/web/static/webp/graph-8x.webp":                    dataWebStaticWebpGraph8xWebp,
	"data/web/static/webp/graph.webp":                       dataWebStaticWebpGraphWebp,
	"data/web/static/webp/grid-four-up-2x.webp":             dataWebStaticWebpGridFourUp2xWebp,
	"data/web/static/webp/grid-four-up-3x.webp":             dataWebStaticWebpGridFourUp3xWebp,
	"data/web/static/webp/grid-four-up-4x.webp":             dataWebStaticWebpGridFourUp4xWebp,
	"data/web/static/webp/grid-four-up-6x.webp":             dataWebStaticWebpGridFourUp6xWebp,
	"data/web/static/webp/grid-four-up-8x.webp":             dataWebStaticWebpGridFourUp8xWebp,
	"data/web/static/webp/grid-four-up.webp":                dataWebStaticWebpGridFourUpWebp,
	"data/web/static/webp/grid-three-up-2x.webp":            dataWebStaticWebpGridThreeUp2xWebp,
	"data/web/static/webp/grid-three-up-3x.webp":            dataWebStaticWebpGridThreeUp3xWebp,
	"data/web/static/webp/grid-three-up-4x.webp":            dataWebStaticWebpGridThreeUp4xWebp,
	"data/web/static/webp/grid-three-up-6x.webp":            dataWebStaticWebpGridThreeUp6xWebp,
	"data/web/static/webp/grid-three-up-8x.webp":            dataWebStaticWebpGridThreeUp8xWebp,
	"data/web/static/webp/grid-three-up.webp":               dataWebStaticWebpGridThreeUpWebp,
	"data/web/static/webp/grid-two-up-2x.webp":              dataWebStaticWebpGridTwoUp2xWebp,
	"data/web/static/webp/grid-two-up-3x.webp":              dataWebStaticWebpGridTwoUp3xWebp,
	"data/web/static/webp/grid-two-up-4x.webp":              dataWebStaticWebpGridTwoUp4xWebp,
	"data/web/static/webp/grid-two-up-6x.webp":              dataWebStaticWebpGridTwoUp6xWebp,
	"data/web/static/webp/grid-two-up-8x.webp":              dataWebStaticWebpGridTwoUp8xWebp,
	"data/web/static/webp/grid-two-up.webp":                 dataWebStaticWebpGridTwoUpWebp,
	"data/web/static/webp/hard-drive-2x.webp":               dataWebStaticWebpHardDrive2xWebp,
	"data/web/static/webp/hard-drive-3x.webp":               dataWebStaticWebpHardDrive3xWebp,
	"data/web/static/webp/hard-drive-4x.webp":               dataWebStaticWebpHardDrive4xWebp,
	"data/web/static/webp/hard-drive-6x.webp":               dataWebStaticWebpHardDrive6xWebp,
	"data/web/static/webp/hard-drive-8x.webp":               dataWebStaticWebpHardDrive8xWebp,
	"data/web/static/webp/hard-drive.webp":                  dataWebStaticWebpHardDriveWebp,
	"data/web/static/webp/header-2x.webp":                   dataWebStaticWebpHeader2xWebp,
	"data/web/static/webp/header-3x.webp":                   dataWebStaticWebpHeader3xWebp,
	"data/web/static/webp/header-4x.webp":                   dataWebStaticWebpHeader4xWebp,
	"data/web/static/webp/header-6x.webp":                   dataWebStaticWebpHeader6xWebp,
	"data/web/static/webp/header-8x.webp":                   dataWebStaticWebpHeader8xWebp,
	"data/web/static/webp/header.webp":                      dataWebStaticWebpHeaderWebp,
	"data/web/static/webp/headphones-2x.webp":               dataWebStaticWebpHeadphones2xWebp,
	"data/web/static/webp/headphones-3x.webp":               dataWebStaticWebpHeadphones3xWebp,
	"data/web/static/webp/headphones-4x.webp":               dataWebStaticWebpHeadphones4xWebp,
	"data/web/static/webp/headphones-6x.webp":               dataWebStaticWebpHeadphones6xWebp,
	"data/web/static/webp/headphones-8x.webp":               dataWebStaticWebpHeadphones8xWebp,
	"data/web/static/webp/headphones.webp":                  dataWebStaticWebpHeadphonesWebp,
	"data/web/static/webp/heart-2x.webp":                    dataWebStaticWebpHeart2xWebp,
	"data/web/static/webp/heart-3x.webp":                    dataWebStaticWebpHeart3xWebp,
	"data/web/static/webp/heart-4x.webp":                    dataWebStaticWebpHeart4xWebp,
	"data/web/static/webp/heart-6x.webp":                    dataWebStaticWebpHeart6xWebp,
	"data/web/static/webp/heart-8x.webp":                    dataWebStaticWebpHeart8xWebp,
	"data/web/static/webp/heart.webp":                       dataWebStaticWebpHeartWebp,
	"data/web/static/webp/home-2x.webp":                     dataWebStaticWebpHome2xWebp,
	"data/web/static/webp/home-3x.webp":                     dataWebStaticWebpHome3xWebp,
	"data/web/static/webp/home-4x.webp":                     dataWebStaticWebpHome4xWebp,
	"data/web/static/webp/home-6x.webp":                     dataWebStaticWebpHome6xWebp,
	"data/web/static/webp/home-8x.webp":                     dataWebStaticWebpHome8xWebp,
	"data/web/static/webp/home.webp":                        dataWebStaticWebpHomeWebp,
	"data/web/static/webp/image-2x.webp":                    dataWebStaticWebpImage2xWebp,
	"data/web/static/webp/image-3x.webp":                    dataWebStaticWebpImage3xWebp,
	"data/web/static/webp/image-4x.webp":                    dataWebStaticWebpImage4xWebp,
	"data/web/static/webp/image-6x.webp":                    dataWebStaticWebpImage6xWebp,
	"data/web/static/webp/image-8x.webp":                    dataWebStaticWebpImage8xWebp,
	"data/web/static/webp/image.webp":                       dataWebStaticWebpImageWebp,
	"data/web/static/webp/inbox-2x.webp":                    dataWebStaticWebpInbox2xWebp,
	"data/web/static/webp/inbox-3x.webp":                    dataWebStaticWebpInbox3xWebp,
	"data/web/static/webp/inbox-4x.webp":                    dataWebStaticWebpInbox4xWebp,
	"data/web/static/webp/inbox-6x.webp":                    dataWebStaticWebpInbox6xWebp,
	"data/web/static/webp/inbox-8x.webp":                    dataWebStaticWebpInbox8xWebp,
	"data/web/static/webp/inbox.webp":                       dataWebStaticWebpInboxWebp,
	"data/web/static/webp/infinity-2x.webp":                 dataWebStaticWebpInfinity2xWebp,
	"data/web/static/webp/infinity-3x.webp":                 dataWebStaticWebpInfinity3xWebp,
	"data/web/static/webp/infinity-4x.webp":                 dataWebStaticWebpInfinity4xWebp,
	"data/web/static/webp/infinity-6x.webp":                 dataWebStaticWebpInfinity6xWebp,
	"data/web/static/webp/infinity-8x.webp":                 dataWebStaticWebpInfinity8xWebp,
	"data/web/static/webp/infinity.webp":                    dataWebStaticWebpInfinityWebp,
	"data/web/static/webp/info-2x.webp":                     dataWebStaticWebpInfo2xWebp,
	"data/web/static/webp/info-3x.webp":                     dataWebStaticWebpInfo3xWebp,
	"data/web/static/webp/info-4x.webp":                     dataWebStaticWebpInfo4xWebp,
	"data/web/static/webp/info-6x.webp":                     dataWebStaticWebpInfo6xWebp,
	"data/web/static/webp/info-8x.webp":                     dataWebStaticWebpInfo8xWebp,
	"data/web/static/webp/info.webp":                        dataWebStaticWebpInfoWebp,
	"data/web/static/webp/italic-2x.webp":                   dataWebStaticWebpItalic2xWebp,
	"data/web/static/webp/italic-3x.webp":                   dataWebStaticWebpItalic3xWebp,
	"data/web/static/webp/italic-4x.webp":                   dataWebStaticWebpItalic4xWebp,
	"data/web/static/webp/italic-6x.webp":                   dataWebStaticWebpItalic6xWebp,
	"data/web/static/webp/italic-8x.webp":                   dataWebStaticWebpItalic8xWebp,
	"data/web/static/webp/italic.webp":                      dataWebStaticWebpItalicWebp,
	"data/web/static/webp/justify-center-2x.webp":           dataWebStaticWebpJustifyCenter2xWebp,
	"data/web/static/webp/justify-center-3x.webp":           dataWebStaticWebpJustifyCenter3xWebp,
	"data/web/static/webp/justify-center-4x.webp":           dataWebStaticWebpJustifyCenter4xWebp,
	"data/web/static/webp/justify-center-6x.webp":           dataWebStaticWebpJustifyCenter6xWebp,
	"data/web/static/webp/justify-center-8x.webp":           dataWebStaticWebpJustifyCenter8xWebp,
	"data/web/static/webp/justify-center.webp":              dataWebStaticWebpJustifyCenterWebp,
	"data/web/static/webp/justify-left-2x.webp":             dataWebStaticWebpJustifyLeft2xWebp,
	"data/web/static/webp/justify-left-3x.webp":             dataWebStaticWebpJustifyLeft3xWebp,
	"data/web/static/webp/justify-left-4x.webp":             dataWebStaticWebpJustifyLeft4xWebp,
	"data/web/static/webp/justify-left-6x.webp":             dataWebStaticWebpJustifyLeft6xWebp,
	"data/web/static/webp/justify-left-8x.webp":             dataWebStaticWebpJustifyLeft8xWebp,
	"data/web/static/webp/justify-left.webp":                dataWebStaticWebpJustifyLeftWebp,
	"data/web/static/webp/justify-right-2x.webp":            dataWebStaticWebpJustifyRight2xWebp,
	"data/web/static/webp/justify-right-3x.webp":            dataWebStaticWebpJustifyRight3xWebp,
	"data/web/static/webp/justify-right-4x.webp":            dataWebStaticWebpJustifyRight4xWebp,
	"data/web/static/webp/justify-right-6x.webp":            dataWebStaticWebpJustifyRight6xWebp,
	"data/web/static/webp/justify-right-8x.webp":            dataWebStaticWebpJustifyRight8xWebp,
	"data/web/static/webp/justify-right.webp":               dataWebStaticWebpJustifyRightWebp,
	"data/web/static/webp/key-2x.webp":                      dataWebStaticWebpKey2xWebp,
	"data/web/static/webp/key-3x.webp":                      dataWebStaticWebpKey3xWebp,
	"data/web/static/webp/key-4x.webp":                      dataWebStaticWebpKey4xWebp,
	"data/web/static/webp/key-6x.webp":                      dataWebStaticWebpKey6xWebp,
	"data/web/static/webp/key-8x.webp":                      dataWebStaticWebpKey8xWebp,
	"data/web/static/webp/key.webp":                         dataWebStaticWebpKeyWebp,
	"data/web/static/webp/laptop-2x.webp":                   dataWebStaticWebpLaptop2xWebp,
	"data/web/static/webp/laptop-3x.webp":                   dataWebStaticWebpLaptop3xWebp,
	"data/web/static/webp/laptop-4x.webp":                   dataWebStaticWebpLaptop4xWebp,
	"data/web/static/webp/laptop-6x.webp":                   dataWebStaticWebpLaptop6xWebp,
	"data/web/static/webp/laptop-8x.webp":                   dataWebStaticWebpLaptop8xWebp,
	"data/web/static/webp/laptop.webp":                      dataWebStaticWebpLaptopWebp,
	"data/web/static/webp/layers-2x.webp":                   dataWebStaticWebpLayers2xWebp,
	"data/web/static/webp/layers-3x.webp":                   dataWebStaticWebpLayers3xWebp,
	"data/web/static/webp/layers-4x.webp":                   dataWebStaticWebpLayers4xWebp,
	"data/web/static/webp/layers-6x.webp":                   dataWebStaticWebpLayers6xWebp,
	"data/web/static/webp/layers-8x.webp":                   dataWebStaticWebpLayers8xWebp,
	"data/web/static/webp/layers.webp":                      dataWebStaticWebpLayersWebp,
	"data/web/static/webp/lightbulb-2x.webp":                dataWebStaticWebpLightbulb2xWebp,
	"data/web/static/webp/lightbulb-3x.webp":                dataWebStaticWebpLightbulb3xWebp,
	"data/web/static/webp/lightbulb-4x.webp":                dataWebStaticWebpLightbulb4xWebp,
	"data/web/static/webp/lightbulb-6x.webp":                dataWebStaticWebpLightbulb6xWebp,
	"data/web/static/webp/lightbulb-8x.webp":                dataWebStaticWebpLightbulb8xWebp,
	"data/web/static/webp/lightbulb.webp":                   dataWebStaticWebpLightbulbWebp,
	"data/web/static/webp/link-broken-2x.webp":              dataWebStaticWebpLinkBroken2xWebp,
	"data/web/static/webp/link-broken-3x.webp":              dataWebStaticWebpLinkBroken3xWebp,
	"data/web/static/webp/link-broken-4x.webp":              dataWebStaticWebpLinkBroken4xWebp,
	"data/web/static/webp/link-broken-6x.webp":              dataWebStaticWebpLinkBroken6xWebp,
	"data/web/static/webp/link-broken-8x.webp":              dataWebStaticWebpLinkBroken8xWebp,
	"data/web/static/webp/link-broken.webp":                 dataWebStaticWebpLinkBrokenWebp,
	"data/web/static/webp/link-intact-2x.webp":              dataWebStaticWebpLinkIntact2xWebp,
	"data/web/static/webp/link-intact-3x.webp":              dataWebStaticWebpLinkIntact3xWebp,
	"data/web/static/webp/link-intact-4x.webp":              dataWebStaticWebpLinkIntact4xWebp,
	"data/web/static/webp/link-intact-6x.webp":              dataWebStaticWebpLinkIntact6xWebp,
	"data/web/static/webp/link-intact-8x.webp":              dataWebStaticWebpLinkIntact8xWebp,
	"data/web/static/webp/link-intact.webp":                 dataWebStaticWebpLinkIntactWebp,
	"data/web/static/webp/list-2x.webp":                     dataWebStaticWebpList2xWebp,
	"data/web/static/webp/list-3x.webp":                     dataWebStaticWebpList3xWebp,
	"data/web/static/webp/list-4x.webp":                     dataWebStaticWebpList4xWebp,
	"data/web/static/webp/list-6x.webp":                     dataWebStaticWebpList6xWebp,
	"data/web/static/webp/list-8x.webp":                     dataWebStaticWebpList8xWebp,
	"data/web/static/webp/list-rich-2x.webp":                dataWebStaticWebpListRich2xWebp,
	"data/web/static/webp/list-rich-3x.webp":                dataWebStaticWebpListRich3xWebp,
	"data/web/static/webp/list-rich-4x.webp":                dataWebStaticWebpListRich4xWebp,
	"data/web/static/webp/list-rich-6x.webp":                dataWebStaticWebpListRich6xWebp,
	"data/web/static/webp/list-rich-8x.webp":                dataWebStaticWebpListRich8xWebp,
	"data/web/static/webp/list-rich.webp":                   dataWebStaticWebpListRichWebp,
	"data/web/static/webp/list.webp":                        dataWebStaticWebpListWebp,
	"data/web/static/webp/location-2x.webp":                 dataWebStaticWebpLocation2xWebp,
	"data/web/static/webp/location-3x.webp":                 dataWebStaticWebpLocation3xWebp,
	"data/web/static/webp/location-4x.webp":                 dataWebStaticWebpLocation4xWebp,
	"data/web/static/webp/location-6x.webp":                 dataWebStaticWebpLocation6xWebp,
	"data/web/static/webp/location-8x.webp":                 dataWebStaticWebpLocation8xWebp,
	"data/web/static/webp/location.webp":                    dataWebStaticWebpLocationWebp,
	"data/web/static/webp/lock-locked-2x.webp":              dataWebStaticWebpLockLocked2xWebp,
	"data/web/static/webp/lock-locked-3x.webp":              dataWebStaticWebpLockLocked3xWebp,
	"data/web/static/webp/lock-locked-4x.webp":              dataWebStaticWebpLockLocked4xWebp,
	"data/web/static/webp/lock-locked-6x.webp":              dataWebStaticWebpLockLocked6xWebp,
	"data/web/static/webp/lock-locked-8x.webp":              dataWebStaticWebpLockLocked8xWebp,
	"data/web/static/webp/lock-locked.webp":                 dataWebStaticWebpLockLockedWebp,
	"data/web/static/webp/lock-unlocked-2x.webp":            dataWebStaticWebpLockUnlocked2xWebp,
	"data/web/static/webp/lock-unlocked-3x.webp":            dataWebStaticWebpLockUnlocked3xWebp,
	"data/web/static/webp/lock-unlocked-4x.webp":            dataWebStaticWebpLockUnlocked4xWebp,
	"data/web/static/webp/lock-unlocked-6x.webp":            dataWebStaticWebpLockUnlocked6xWebp,
	"data/web/static/webp/lock-unlocked-8x.webp":            dataWebStaticWebpLockUnlocked8xWebp,
	"data/web/static/webp/lock-unlocked.webp":               dataWebStaticWebpLockUnlockedWebp,
	"data/web/static/webp/loop-2x.webp":                     dataWebStaticWebpLoop2xWebp,
	"data/web/static/webp/loop-3x.webp":                     dataWebStaticWebpLoop3xWebp,
	"data/web/static/webp/loop-4x.webp":                     dataWebStaticWebpLoop4xWebp,
	"data/web/static/webp/loop-6x.webp":                     dataWebStaticWebpLoop6xWebp,
	"data/web/static/webp/loop-8x.webp":                     dataWebStaticWebpLoop8xWebp,
	"data/web/static/webp/loop-circular-2x.webp":            dataWebStaticWebpLoopCircular2xWebp,
	"data/web/static/webp/loop-circular-3x.webp":            dataWebStaticWebpLoopCircular3xWebp,
	"data/web/static/webp/loop-circular-4x.webp":            dataWebStaticWebpLoopCircular4xWebp,
	"data/web/static/webp/loop-circular-6x.webp":            dataWebStaticWebpLoopCircular6xWebp,
	"data/web/static/webp/loop-circular-8x.webp":            dataWebStaticWebpLoopCircular8xWebp,
	"data/web/static/webp/loop-circular.webp":               dataWebStaticWebpLoopCircularWebp,
	"data/web/static/webp/loop-square-2x.webp":              dataWebStaticWebpLoopSquare2xWebp,
	"data/web/static/webp/loop-square-3x.webp":              dataWebStaticWebpLoopSquare3xWebp,
	"data/web/static/webp/loop-square-4x.webp":              dataWebStaticWebpLoopSquare4xWebp,
	"data/web/static/webp/loop-square-6x.webp":              dataWebStaticWebpLoopSquare6xWebp,
	"data/web/static/webp/loop-square-8x.webp":              dataWebStaticWebpLoopSquare8xWebp,
	"data/web/static/webp/loop-square.webp":                 dataWebStaticWebpLoopSquareWebp,
	"data/web/static/webp/loop.webp":                        dataWebStaticWebpLoopWebp,
	"data/web/static/webp/magnifying-glass-2x.webp":         dataWebStaticWebpMagnifyingGlass2xWebp,
	"data/web/static/webp/magnifying-glass-3x.webp":         dataWebStaticWebpMagnifyingGlass3xWebp,
	"data/web/static/webp/magnifying-glass-4x.webp":         dataWebStaticWebpMagnifyingGlass4xWebp,
	"data/web/static/webp/magnifying-glass-6x.webp":         dataWebStaticWebpMagnifyingGlass6xWebp,
	"data/web/static/webp/magnifying-glass-8x.webp":         dataWebStaticWebpMagnifyingGlass8xWebp,
	"data/web/static/webp/magnifying-glass.webp":            dataWebStaticWebpMagnifyingGlassWebp,
	"data/web/static/webp/map-2x.webp":                      dataWebStaticWebpMap2xWebp,
	"data/web/static/webp/map-3x.webp":                      dataWebStaticWebpMap3xWebp,
	"data/web/static/webp/map-4x.webp":                      dataWebStaticWebpMap4xWebp,
	"data/web/static/webp/map-6x.webp":                      dataWebStaticWebpMap6xWebp,
	"data/web/static/webp/map-8x.webp":                      dataWebStaticWebpMap8xWebp,
	"data/web/static/webp/map-marker-2x.webp":               dataWebStaticWebpMapMarker2xWebp,
	"data/web/static/webp/map-marker-3x.webp":               dataWebStaticWebpMapMarker3xWebp,
	"data/web/static/webp/map-marker-4x.webp":               dataWebStaticWebpMapMarker4xWebp,
	"data/web/static/webp/map-marker-6x.webp":               dataWebStaticWebpMapMarker6xWebp,
	"data/web/static/webp/map-marker-8x.webp":               dataWebStaticWebpMapMarker8xWebp,
	"data/web/static/webp/map-marker.webp":                  dataWebStaticWebpMapMarkerWebp,
	"data/web/static/webp/map.webp":                         dataWebStaticWebpMapWebp,
	"data/web/static/webp/media-pause-2x.webp":              dataWebStaticWebpMediaPause2xWebp,
	"data/web/static/webp/media-pause-3x.webp":              dataWebStaticWebpMediaPause3xWebp,
	"data/web/static/webp/media-pause-4x.webp":              dataWebStaticWebpMediaPause4xWebp,
	"data/web/static/webp/media-pause-6x.webp":              dataWebStaticWebpMediaPause6xWebp,
	"data/web/static/webp/media-pause-8x.webp":              dataWebStaticWebpMediaPause8xWebp,
	"data/web/static/webp/media-pause.webp":                 dataWebStaticWebpMediaPauseWebp,
	"data/web/static/webp/media-play-2x.webp":               dataWebStaticWebpMediaPlay2xWebp,
	"data/web/static/webp/media-play-3x.webp":               dataWebStaticWebpMediaPlay3xWebp,
	"data/web/static/webp/media-play-4x.webp":               dataWebStaticWebpMediaPlay4xWebp,
	"data/web/static/webp/media-play-6x.webp":               dataWebStaticWebpMediaPlay6xWebp,
	"data/web/static/webp/media-play-8x.webp":               dataWebStaticWebpMediaPlay8xWebp,
	"data/web/static/webp/media-play.webp":                  dataWebStaticWebpMediaPlayWebp,
	"data/web/static/webp/media-record-2x.webp":             dataWebStaticWebpMediaRecord2xWebp,
	"data/web/static/webp/media-record-3x.webp":             dataWebStaticWebpMediaRecord3xWebp,
	"data/web/static/webp/media-record-4x.webp":             dataWebStaticWebpMediaRecord4xWebp,
	"data/web/static/webp/media-record-6x.webp":             dataWebStaticWebpMediaRecord6xWebp,
	"data/web/static/webp/media-record-8x.webp":             dataWebStaticWebpMediaRecord8xWebp,
	"data/web/static/webp/media-record.webp":                dataWebStaticWebpMediaRecordWebp,
	"data/web/static/webp/media-skip-backward-2x.webp":      dataWebStaticWebpMediaSkipBackward2xWebp,
	"data/web/static/webp/media-skip-backward-3x.webp":      dataWebStaticWebpMediaSkipBackward3xWebp,
	"data/web/static/webp/media-skip-backward-4x.webp":      dataWebStaticWebpMediaSkipBackward4xWebp,
	"data/web/static/webp/media-skip-backward-6x.webp":      dataWebStaticWebpMediaSkipBackward6xWebp,
	"data/web/static/webp/media-skip-backward-8x.webp":      dataWebStaticWebpMediaSkipBackward8xWebp,
	"data/web/static/webp/media-skip-backward.webp":         dataWebStaticWebpMediaSkipBackwardWebp,
	"data/web/static/webp/media-skip-forward-2x.webp":       dataWebStaticWebpMediaSkipForward2xWebp,
	"data/web/static/webp/media-skip-forward-3x.webp":       dataWebStaticWebpMediaSkipForward3xWebp,
	"data/web/static/webp/media-skip-forward-4x.webp":       dataWebStaticWebpMediaSkipForward4xWebp,
	"data/web/static/webp/media-skip-forward-6x.webp":       dataWebStaticWebpMediaSkipForward6xWebp,
	"data/web/static/webp/media-skip-forward-8x.webp":       dataWebStaticWebpMediaSkipForward8xWebp,
	"data/web/static/webp/media-skip-forward.webp":          dataWebStaticWebpMediaSkipForwardWebp,
	"data/web/static/webp/media-step-backward-2x.webp":      dataWebStaticWebpMediaStepBackward2xWebp,
	"data/web/static/webp/media-step-backward-3x.webp":      dataWebStaticWebpMediaStepBackward3xWebp,
	"data/web/static/webp/media-step-backward-4x.webp":      dataWebStaticWebpMediaStepBackward4xWebp,
	"data/web/static/webp/media-step-backward-6x.webp":      dataWebStaticWebpMediaStepBackward6xWebp,
	"data/web/static/webp/media-step-backward-8x.webp":      dataWebStaticWebpMediaStepBackward8xWebp,
	"data/web/static/webp/media-step-backward.webp":         dataWebStaticWebpMediaStepBackwardWebp,
	"data/web/static/webp/media-step-forward-2x.webp":       dataWebStaticWebpMediaStepForward2xWebp,
	"data/web/static/webp/media-step-forward-3x.webp":       dataWebStaticWebpMediaStepForward3xWebp,
	"data/web/static/webp/media-step-forward-4x.webp":       dataWebStaticWebpMediaStepForward4xWebp,
	"data/web/static/webp/media-step-forward-6x.webp":       dataWebStaticWebpMediaStepForward6xWebp,
	"data/web/static/webp/media-step-forward-8x.webp":       dataWebStaticWebpMediaStepForward8xWebp,
	"data/web/static/webp/media-step-forward.webp":          dataWebStaticWebpMediaStepForwardWebp,
	"data/web/static/webp/media-stop-2x.webp":               dataWebStaticWebpMediaStop2xWebp,
	"data/web/static/webp/media-stop-3x.webp":               dataWebStaticWebpMediaStop3xWebp,
	"data/web/static/webp/media-stop-4x.webp":               dataWebStaticWebpMediaStop4xWebp,
	"data/web/static/webp/media-stop-6x.webp":               dataWebStaticWebpMediaStop6xWebp,
	"data/web/static/webp/media-stop-8x.webp":               dataWebStaticWebpMediaStop8xWebp,
	"data/web/static/webp/media-stop.webp":                  dataWebStaticWebpMediaStopWebp,
	"data/web/static/webp/medical-cross-2x.webp":            dataWebStaticWebpMedicalCross2xWebp,
	"data/web/static/webp/medical-cross-3x.webp":            dataWebStaticWebpMedicalCross3xWebp,
	"data/web/static/webp/medical-cross-4x.webp":            dataWebStaticWebpMedicalCross4xWebp,
	"data/web/static/webp/medical-cross-6x.webp":            dataWebStaticWebpMedicalCross6xWebp,
	"data/web/static/webp/medical-cross-8x.webp":            dataWebStaticWebpMedicalCross8xWebp,
	"data/web/static/webp/medical-cross.webp":               dataWebStaticWebpMedicalCrossWebp,
	"data/web/static/webp/menu-2x.webp":                     dataWebStaticWebpMenu2xWebp,
	"data/web/static/webp/menu-3x.webp":                     dataWebStaticWebpMenu3xWebp,
	"data/web/static/webp/menu-4x.webp":                     dataWebStaticWebpMenu4xWebp,
	"data/web/static/webp/menu-6x.webp":                     dataWebStaticWebpMenu6xWebp,
	"data/web/static/webp/menu-8x.webp":                     dataWebStaticWebpMenu8xWebp,
	"data/web/static/webp/menu.webp":                        dataWebStaticWebpMenuWebp,
	"data/web/static/webp/microphone-2x.webp":               dataWebStaticWebpMicrophone2xWebp,
	"data/web/static/webp/microphone-3x.webp":               dataWebStaticWebpMicrophone3xWebp,
	"data/web/static/webp/microphone-4x.webp":               dataWebStaticWebpMicrophone4xWebp,
	"data/web/static/webp/microphone-6x.webp":               dataWebStaticWebpMicrophone6xWebp,
	"data/web/static/webp/microphone-8x.webp":               dataWebStaticWebpMicrophone8xWebp,
	"data/web/static/webp/microphone.webp":                  dataWebStaticWebpMicrophoneWebp,
	"data/web/static/webp/minus-2x.webp":                    dataWebStaticWebpMinus2xWebp,
	"data/web/static/webp/minus-3x.webp":                    dataWebStaticWebpMinus3xWebp,
	"data/web/static/webp/minus-4x.webp":                    dataWebStaticWebpMinus4xWebp,
	"data/web/static/webp/minus-6x.webp":                    dataWebStaticWebpMinus6xWebp,
	"data/web/static/webp/minus-8x.webp":                    dataWebStaticWebpMinus8xWebp,
	"data/web/static/webp/minus.webp":                       dataWebStaticWebpMinusWebp,
	"data/web/static/webp/monitor-2x.webp":                  dataWebStaticWebpMonitor2xWebp,
	"data/web/static/webp/monitor-3x.webp":                  dataWebStaticWebpMonitor3xWebp,
	"data/web/static/webp/monitor-4x.webp":                  dataWebStaticWebpMonitor4xWebp,
	"data/web/static/webp/monitor-6x.webp":                  dataWebStaticWebpMonitor6xWebp,
	"data/web/static/webp/monitor-8x.webp":                  dataWebStaticWebpMonitor8xWebp,
	"data/web/static/webp/monitor.webp":                     dataWebStaticWebpMonitorWebp,
	"data/web/static/webp/moon-2x.webp":                     dataWebStaticWebpMoon2xWebp,
	"data/web/static/webp/moon-3x.webp":                     dataWebStaticWebpMoon3xWebp,
	"data/web/static/webp/moon-4x.webp":                     dataWebStaticWebpMoon4xWebp,
	"data/web/static/webp/moon-6x.webp":                     dataWebStaticWebpMoon6xWebp,
	"data/web/static/webp/moon-8x.webp":                     dataWebStaticWebpMoon8xWebp,
	"data/web/static/webp/moon.webp":                        dataWebStaticWebpMoonWebp,
	"data/web/static/webp/move-2x.webp":                     dataWebStaticWebpMove2xWebp,
	"data/web/static/webp/move-3x.webp":                     dataWebStaticWebpMove3xWebp,
	"data/web/static/webp/move-4x.webp":                     dataWebStaticWebpMove4xWebp,
	"data/web/static/webp/move-6x.webp":                     dataWebStaticWebpMove6xWebp,
	"data/web/static/webp/move-8x.webp":                     dataWebStaticWebpMove8xWebp,
	"data/web/static/webp/move.webp":                        dataWebStaticWebpMoveWebp,
	"data/web/static/webp/musical-note-2x.webp":             dataWebStaticWebpMusicalNote2xWebp,
	"data/web/static/webp/musical-note-3x.webp":             dataWebStaticWebpMusicalNote3xWebp,
	"data/web/static/webp/musical-note-4x.webp":             dataWebStaticWebpMusicalNote4xWebp,
	"data/web/static/webp/musical-note-6x.webp":             dataWebStaticWebpMusicalNote6xWebp,
	"data/web/static/webp/musical-note-8x.webp":             dataWebStaticWebpMusicalNote8xWebp,
	"data/web/static/webp/musical-note.webp":                dataWebStaticWebpMusicalNoteWebp,
	"data/web/static/webp/paperclip-2x.webp":                dataWebStaticWebpPaperclip2xWebp,
	"data/web/static/webp/paperclip-3x.webp":                dataWebStaticWebpPaperclip3xWebp,
	"data/web/static/webp/paperclip-4x.webp":                dataWebStaticWebpPaperclip4xWebp,
	"data/web/static/webp/paperclip-6x.webp":                dataWebStaticWebpPaperclip6xWebp,
	"data/web/static/webp/paperclip-8x.webp":                dataWebStaticWebpPaperclip8xWebp,
	"data/web/static/webp/paperclip.webp":                   dataWebStaticWebpPaperclipWebp,
	"data/web/static/webp/pencil-2x.webp":                   dataWebStaticWebpPencil2xWebp,
	"data/web/static/webp/pencil-3x.webp":                   dataWebStaticWebpPencil3xWebp,
	"data/web/static/webp/pencil-4x.webp":                   dataWebStaticWebpPencil4xWebp,
	"data/web/static/webp/pencil-6x.webp":                   dataWebStaticWebpPencil6xWebp,
	"data/web/static/webp/pencil-8x.webp":                   dataWebStaticWebpPencil8xWebp,
	"data/web/static/webp/pencil.webp":                      dataWebStaticWebpPencilWebp,
	"data/web/static/webp/people-2x.webp":                   dataWebStaticWebpPeople2xWebp,
	"data/web/static/webp/people-3x.webp":                   dataWebStaticWebpPeople3xWebp,
	"data/web/static/webp/people-4x.webp":                   dataWebStaticWebpPeople4xWebp,
	"data/web/static/webp/people-6x.webp":                   dataWebStaticWebpPeople6xWebp,
	"data/web/static/webp/people-8x.webp":                   dataWebStaticWebpPeople8xWebp,
	"data/web/static/webp/people.webp":                      dataWebStaticWebpPeopleWebp,
	"data/web/static/webp/person-2x.webp":                   dataWebStaticWebpPerson2xWebp,
	"data/web/static/webp/person-3x.webp":                   dataWebStaticWebpPerson3xWebp,
	"data/web/static/webp/person-4x.webp":                   dataWebStaticWebpPerson4xWebp,
	"data/web/static/webp/person-6x.webp":                   dataWebStaticWebpPerson6xWebp,
	"data/web/static/webp/person-8x.webp":                   dataWebStaticWebpPerson8xWebp,
	"data/web/static/webp/person.webp":                      dataWebStaticWebpPersonWebp,
	"data/web/static/webp/phone-2x.webp":                    dataWebStaticWebpPhone2xWebp,
	"data/web/static/webp/phone-3x.webp":                    dataWebStaticWebpPhone3xWebp,
	"data/web/static/webp/phone-4x.webp":                    dataWebStaticWebpPhone4xWebp,
	"data/web/static/webp/phone-6x.webp":                    dataWebStaticWebpPhone6xWebp,
	"data/web/static/webp/phone-8x.webp":                    dataWebStaticWebpPhone8xWebp,
	"data/web/static/webp/phone.webp":                       dataWebStaticWebpPhoneWebp,
	"data/web/static/webp/pie-chart-2x.webp":                dataWebStaticWebpPieChart2xWebp,
	"data/web/static/webp/pie-chart-3x.webp":                dataWebStaticWebpPieChart3xWebp,
	"data/web/static/webp/pie-chart-4x.webp":                dataWebStaticWebpPieChart4xWebp,
	"data/web/static/webp/pie-chart-6x.webp":                dataWebStaticWebpPieChart6xWebp,
	"data/web/static/webp/pie-chart-8x.webp":                dataWebStaticWebpPieChart8xWebp,
	"data/web/static/webp/pie-chart.webp":                   dataWebStaticWebpPieChartWebp,
	"data/web/static/webp/pin-2x.webp":                      dataWebStaticWebpPin2xWebp,
	"data/web/static/webp/pin-3x.webp":                      dataWebStaticWebpPin3xWebp,
	"data/web/static/webp/pin-4x.webp":                      dataWebStaticWebpPin4xWebp,
	"data/web/static/webp/pin-6x.webp":                      dataWebStaticWebpPin6xWebp,
	"data/web/static/webp/pin-8x.webp":                      dataWebStaticWebpPin8xWebp,
	"data/web/static/webp/pin.webp":                         dataWebStaticWebpPinWebp,
	"data/web/static/webp/play-circle-2x.webp":              dataWebStaticWebpPlayCircle2xWebp,
	"data/web/static/webp/play-circle-3x.webp":              dataWebStaticWebpPlayCircle3xWebp,
	"data/web/static/webp/play-circle-4x.webp":              dataWebStaticWebpPlayCircle4xWebp,
	"data/web/static/webp/play-circle-6x.webp":              dataWebStaticWebpPlayCircle6xWebp,
	"data/web/static/webp/play-circle-8x.webp":              dataWebStaticWebpPlayCircle8xWebp,
	"data/web/static/webp/play-circle.webp":                 dataWebStaticWebpPlayCircleWebp,
	"data/web/static/webp/plus-2x.webp":                     dataWebStaticWebpPlus2xWebp,
	"data/web/static/webp/plus-3x.webp":                     dataWebStaticWebpPlus3xWebp,
	"data/web/static/webp/plus-4x.webp":                     dataWebStaticWebpPlus4xWebp,
	"data/web/static/webp/plus-6x.webp":                     dataWebStaticWebpPlus6xWebp,
	"data/web/static/webp/plus-8x.webp":                     dataWebStaticWebpPlus8xWebp,
	"data/web/static/webp/plus.webp":                        dataWebStaticWebpPlusWebp,
	"data/web/static/webp/power-standby-2x.webp":            dataWebStaticWebpPowerStandby2xWebp,
	"data/web/static/webp/power-standby-3x.webp":            dataWebStaticWebpPowerStandby3xWebp,
	"data/web/static/webp/power-standby-4x.webp":            dataWebStaticWebpPowerStandby4xWebp,
	"data/web/static/webp/power-standby-6x.webp":            dataWebStaticWebpPowerStandby6xWebp,
	"data/web/static/webp/power-standby-8x.webp":            dataWebStaticWebpPowerStandby8xWebp,
	"data/web/static/webp/power-standby.webp":               dataWebStaticWebpPowerStandbyWebp,
	"data/web/static/webp/print-2x.webp":                    dataWebStaticWebpPrint2xWebp,
	"data/web/static/webp/print-3x.webp":                    dataWebStaticWebpPrint3xWebp,
	"data/web/static/webp/print-4x.webp":                    dataWebStaticWebpPrint4xWebp,
	"data/web/static/webp/print-6x.webp":                    dataWebStaticWebpPrint6xWebp,
	"data/web/static/webp/print-8x.webp":                    dataWebStaticWebpPrint8xWebp,
	"data/web/static/webp/print.webp":                       dataWebStaticWebpPrintWebp,
	"data/web/static/webp/project-2x.webp":                  dataWebStaticWebpProject2xWebp,
	"data/web/static/webp/project-3x.webp":                  dataWebStaticWebpProject3xWebp,
	"data/web/static/webp/project-4x.webp":                  dataWebStaticWebpProject4xWebp,
	"data/web/static/webp/project-6x.webp":                  dataWebStaticWebpProject6xWebp,
	"data/web/static/webp/project-8x.webp":                  dataWebStaticWebpProject8xWebp,
	"data/web/static/webp/project.webp":                     dataWebStaticWebpProjectWebp,
	"data/web/static/webp/pulse-2x.webp":                    dataWebStaticWebpPulse2xWebp,
	"data/web/static/webp/pulse-3x.webp":                    dataWebStaticWebpPulse3xWebp,
	"data/web/static/webp/pulse-4x.webp":                    dataWebStaticWebpPulse4xWebp,
	"data/web/static/webp/pulse-6x.webp":                    dataWebStaticWebpPulse6xWebp,
	"data/web/static/webp/pulse-8x.webp":                    dataWebStaticWebpPulse8xWebp,
	"data/web/static/webp/pulse.webp":                       dataWebStaticWebpPulseWebp,
	"data/web/static/webp/puzzle-piece-2x.webp":             dataWebStaticWebpPuzzlePiece2xWebp,
	"data/web/static/webp/puzzle-piece-3x.webp":             dataWebStaticWebpPuzzlePiece3xWebp,
	"data/web/static/webp/puzzle-piece-4x.webp":             dataWebStaticWebpPuzzlePiece4xWebp,
	"data/web/static/webp/puzzle-piece-6x.webp":             dataWebStaticWebpPuzzlePiece6xWebp,
	"data/web/static/webp/puzzle-piece-8x.webp":             dataWebStaticWebpPuzzlePiece8xWebp,
	"data/web/static/webp/puzzle-piece.webp":                dataWebStaticWebpPuzzlePieceWebp,
	"data/web/static/webp/question-mark-2x.webp":            dataWebStaticWebpQuestionMark2xWebp,
	"data/web/static/webp/question-mark-3x.webp":            dataWebStaticWebpQuestionMark3xWebp,
	"data/web/static/webp/question-mark-4x.webp":            dataWebStaticWebpQuestionMark4xWebp,
	"data/web/static/webp/question-mark-6x.webp":            dataWebStaticWebpQuestionMark6xWebp,
	"data/web/static/webp/question-mark-8x.webp":            dataWebStaticWebpQuestionMark8xWebp,
	"data/web/static/webp/question-mark.webp":               dataWebStaticWebpQuestionMarkWebp,
	"data/web/static/webp/rain-2x.webp":                     dataWebStaticWebpRain2xWebp,
	"data/web/static/webp/rain-3x.webp":                     dataWebStaticWebpRain3xWebp,
	"data/web/static/webp/rain-4x.webp":                     dataWebStaticWebpRain4xWebp,
	"data/web/static/webp/rain-6x.webp":                     dataWebStaticWebpRain6xWebp,
	"data/web/static/webp/rain-8x.webp":                     dataWebStaticWebpRain8xWebp,
	"data/web/static/webp/rain.webp":                        dataWebStaticWebpRainWebp,
	"data/web/static/webp/random-2x.webp":                   dataWebStaticWebpRandom2xWebp,
	"data/web/static/webp/random-3x.webp":                   dataWebStaticWebpRandom3xWebp,
	"data/web/static/webp/random-4x.webp":                   dataWebStaticWebpRandom4xWebp,
	"data/web/static/webp/random-6x.webp":                   dataWebStaticWebpRandom6xWebp,
	"data/web/static/webp/random-8x.webp":                   dataWebStaticWebpRandom8xWebp,
	"data/web/static/webp/random.webp":                      dataWebStaticWebpRandomWebp,
	"data/web/static/webp/reload-2x.webp":                   dataWebStaticWebpReload2xWebp,
	"data/web/static/webp/reload-3x.webp":                   dataWebStaticWebpReload3xWebp,
	"data/web/static/webp/reload-4x.webp":                   dataWebStaticWebpReload4xWebp,
	"data/web/static/webp/reload-6x.webp":                   dataWebStaticWebpReload6xWebp,
	"data/web/static/webp/reload-8x.webp":                   dataWebStaticWebpReload8xWebp,
	"data/web/static/webp/reload.webp":                      dataWebStaticWebpReloadWebp,
	"data/web/static/webp/resize-both-2x.webp":              dataWebStaticWebpResizeBoth2xWebp,
	"data/web/static/webp/resize-both-3x.webp":              dataWebStaticWebpResizeBoth3xWebp,
	"data/web/static/webp/resize-both-4x.webp":              dataWebStaticWebpResizeBoth4xWebp,
	"data/web/static/webp/resize-both-6x.webp":              dataWebStaticWebpResizeBoth6xWebp,
	"data/web/static/webp/resize-both-8x.webp":              dataWebStaticWebpResizeBoth8xWebp,
	"data/web/static/webp/resize-both.webp":                 dataWebStaticWebpResizeBothWebp,
	"data/web/static/webp/resize-height-2x.webp":            dataWebStaticWebpResizeHeight2xWebp,
	"data/web/static/webp/resize-height-3x.webp":            dataWebStaticWebpResizeHeight3xWebp,
	"data/web/static/webp/resize-height-4x.webp":            dataWebStaticWebpResizeHeight4xWebp,
	"data/web/static/webp/resize-height-6x.webp":            dataWebStaticWebpResizeHeight6xWebp,
	"data/web/static/webp/resize-height-8x.webp":            dataWebStaticWebpResizeHeight8xWebp,
	"data/web/static/webp/resize-height.webp":               dataWebStaticWebpResizeHeightWebp,
	"data/web/static/webp/resize-width-2x.webp":             dataWebStaticWebpResizeWidth2xWebp,
	"data/web/static/webp/resize-width-3x.webp":             dataWebStaticWebpResizeWidth3xWebp,
	"data/web/static/webp/resize-width-4x.webp":             dataWebStaticWebpResizeWidth4xWebp,
	"data/web/static/webp/resize-width-6x.webp":             dataWebStaticWebpResizeWidth6xWebp,
	"data/web/static/webp/resize-width-8x.webp":             dataWebStaticWebpResizeWidth8xWebp,
	"data/web/static/webp/resize-width.webp":                dataWebStaticWebpResizeWidthWebp,
	"data/web/static/webp/rss-2x.webp":                      dataWebStaticWebpRss2xWebp,
	"data/web/static/webp/rss-3x.webp":                      dataWebStaticWebpRss3xWebp,
	"data/web/static/webp/rss-4x.webp":                      dataWebStaticWebpRss4xWebp,
	"data/web/static/webp/rss-6x.webp":                      dataWebStaticWebpRss6xWebp,
	"data/web/static/webp/rss-8x.webp":                      dataWebStaticWebpRss8xWebp,
	"data/web/static/webp/rss-alt-2x.webp":                  dataWebStaticWebpRssAlt2xWebp,
	"data/web/static/webp/rss-alt-3x.webp":                  dataWebStaticWebpRssAlt3xWebp,
	"data/web/static/webp/rss-alt-4x.webp":                  dataWebStaticWebpRssAlt4xWebp,
	"data/web/static/webp/rss-alt-6x.webp":                  dataWebStaticWebpRssAlt6xWebp,
	"data/web/static/webp/rss-alt-8x.webp":                  dataWebStaticWebpRssAlt8xWebp,
	"data/web/static/webp/rss-alt.webp":                     dataWebStaticWebpRssAltWebp,
	"data/web/static/webp/rss.webp":                         dataWebStaticWebpRssWebp,
	"data/web/static/webp/script-2x.webp":                   dataWebStaticWebpScript2xWebp,
	"data/web/static/webp/script-3x.webp":                   dataWebStaticWebpScript3xWebp,
	"data/web/static/webp/script-4x.webp":                   dataWebStaticWebpScript4xWebp,
	"data/web/static/webp/script-6x.webp":                   dataWebStaticWebpScript6xWebp,
	"data/web/static/webp/script-8x.webp":                   dataWebStaticWebpScript8xWebp,
	"data/web/static/webp/script.webp":                      dataWebStaticWebpScriptWebp,
	"data/web/static/webp/share-2x.webp":                    dataWebStaticWebpShare2xWebp,
	"data/web/static/webp/share-3x.webp":                    dataWebStaticWebpShare3xWebp,
	"data/web/static/webp/share-4x.webp":                    dataWebStaticWebpShare4xWebp,
	"data/web/static/webp/share-6x.webp":                    dataWebStaticWebpShare6xWebp,
	"data/web/static/webp/share-8x.webp":                    dataWebStaticWebpShare8xWebp,
	"data/web/static/webp/share-boxed-2x.webp":              dataWebStaticWebpShareBoxed2xWebp,
	"data/web/static/webp/share-boxed-3x.webp":              dataWebStaticWebpShareBoxed3xWebp,
	"data/web/static/webp/share-boxed-4x.webp":              dataWebStaticWebpShareBoxed4xWebp,
	"data/web/static/webp/share-boxed-6x.webp":              dataWebStaticWebpShareBoxed6xWebp,
	"data/web/static/webp/share-boxed-8x.webp":              dataWebStaticWebpShareBoxed8xWebp,
	"data/web/static/webp/share-boxed.webp":                 dataWebStaticWebpShareBoxedWebp,
	"data/web/static/webp/share.webp":                       dataWebStaticWebpShareWebp,
	"data/web/static/webp/shield-2x.webp":                   dataWebStaticWebpShield2xWebp,
	"data/web/static/webp/shield-3x.webp":                   dataWebStaticWebpShield3xWebp,
	"data/web/static/webp/shield-4x.webp":                   dataWebStaticWebpShield4xWebp,
	"data/web/static/webp/shield-6x.webp":                   dataWebStaticWebpShield6xWebp,
	"data/web/static/webp/shield-8x.webp":                   dataWebStaticWebpShield8xWebp,
	"data/web/static/webp/shield.webp":                      dataWebStaticWebpShieldWebp,
	"data/web/static/webp/signal-2x.webp":                   dataWebStaticWebpSignal2xWebp,
	"data/web/static/webp/signal-3x.webp":                   dataWebStaticWebpSignal3xWebp,
	"data/web/static/webp/signal-4x.webp":                   dataWebStaticWebpSignal4xWebp,
	"data/web/static/webp/signal-6x.webp":                   dataWebStaticWebpSignal6xWebp,
	"data/web/static/webp/signal-8x.webp":                   dataWebStaticWebpSignal8xWebp,
	"data/web/static/webp/signal.webp":                      dataWebStaticWebpSignalWebp,
	"data/web/static/webp/signpost-2x.webp":                 dataWebStaticWebpSignpost2xWebp,
	"data/web/static/webp/signpost-3x.webp":                 dataWebStaticWebpSignpost3xWebp,
	"data/web/static/webp/signpost-4x.webp":                 dataWebStaticWebpSignpost4xWebp,
	"data/web/static/webp/signpost-6x.webp":                 dataWebStaticWebpSignpost6xWebp,
	"data/web/static/webp/signpost-8x.webp":                 dataWebStaticWebpSignpost8xWebp,
	"data/web/static/webp/signpost.webp":                    dataWebStaticWebpSignpostWebp,
	"data/web/static/webp/sort-ascending-2x.webp":           dataWebStaticWebpSortAscending2xWebp,
	"data/web/static/webp/sort-ascending-3x.webp":           dataWebStaticWebpSortAscending3xWebp,
	"data/web/static/webp/sort-ascending-4x.webp":           dataWebStaticWebpSortAscending4xWebp,
	"data/web/static/webp/sort-ascending-6x.webp":           dataWebStaticWebpSortAscending6xWebp,
	"data/web/static/webp/sort-ascending-8x.webp":           dataWebStaticWebpSortAscending8xWebp,
	"data/web/static/webp/sort-ascending.webp":              dataWebStaticWebpSortAscendingWebp,
	"data/web/static/webp/sort-descending-2x.webp":          dataWebStaticWebpSortDescending2xWebp,
	"data/web/static/webp/sort-descending-3x.webp":          dataWebStaticWebpSortDescending3xWebp,
	"data/web/static/webp/sort-descending-4x.webp":          dataWebStaticWebpSortDescending4xWebp,
	"data/web/static/webp/sort-descending-6x.webp":          dataWebStaticWebpSortDescending6xWebp,
	"data/web/static/webp/sort-descending-8x.webp":          dataWebStaticWebpSortDescending8xWebp,
	"data/web/static/webp/sort-descending.webp":             dataWebStaticWebpSortDescendingWebp,
	"data/web/static/webp/spreadsheet-2x.webp":              dataWebStaticWebpSpreadsheet2xWebp,
	"data/web/static/webp/spreadsheet-3x.webp":              dataWebStaticWebpSpreadsheet3xWebp,
	"data/web/static/webp/spreadsheet-4x.webp":              dataWebStaticWebpSpreadsheet4xWebp,
	"data/web/static/webp/spreadsheet-6x.webp":              dataWebStaticWebpSpreadsheet6xWebp,
	"data/web/static/webp/spreadsheet-8x.webp":              dataWebStaticWebpSpreadsheet8xWebp,
	"data/web/static/webp/spreadsheet.webp":                 dataWebStaticWebpSpreadsheetWebp,
	"data/web/static/webp/star-2x.webp":                     dataWebStaticWebpStar2xWebp,
	"data/web/static/webp/star-3x.webp":                     dataWebStaticWebpStar3xWebp,
	"data/web/static/webp/star-4x.webp":                     dataWebStaticWebpStar4xWebp,
	"data/web/static/webp/star-6x.webp":                     dataWebStaticWebpStar6xWebp,
	"data/web/static/webp/star-8x.webp":                     dataWebStaticWebpStar8xWebp,
	"data/web/static/webp/star.webp":                        dataWebStaticWebpStarWebp,
	"data/web/static/webp/sun-2x.webp":                      dataWebStaticWebpSun2xWebp,
	"data/web/static/webp/sun-3x.webp":                      dataWebStaticWebpSun3xWebp,
	"data/web/static/webp/sun-4x.webp":                      dataWebStaticWebpSun4xWebp,
	"data/web/static/webp/sun-6x.webp":                      dataWebStaticWebpSun6xWebp,
	"data/web/static/webp/sun-8x.webp":                      dataWebStaticWebpSun8xWebp,
	"data/web/static/webp/sun.webp":                         dataWebStaticWebpSunWebp,
	"data/web/static/webp/tablet-2x.webp":                   dataWebStaticWebpTablet2xWebp,
	"data/web/static/webp/tablet-3x.webp":                   dataWebStaticWebpTablet3xWebp,
	"data/web/static/webp/tablet-4x.webp":                   dataWebStaticWebpTablet4xWebp,
	"data/web/static/webp/tablet-6x.webp":                   dataWebStaticWebpTablet6xWebp,
	"data/web/static/webp/tablet-8x.webp":                   dataWebStaticWebpTablet8xWebp,
	"data/web/static/webp/tablet.webp":                      dataWebStaticWebpTabletWebp,
	"data/web/static/webp/tag-2x.webp":                      dataWebStaticWebpTag2xWebp,
	"data/web/static/webp/tag-3x.webp":                      dataWebStaticWebpTag3xWebp,
	"data/web/static/webp/tag-4x.webp":                      dataWebStaticWebpTag4xWebp,
	"data/web/static/webp/tag-6x.webp":                      dataWebStaticWebpTag6xWebp,
	"data/web/static/webp/tag-8x.webp":                      dataWebStaticWebpTag8xWebp,
	"data/web/static/webp/tag.webp":                         dataWebStaticWebpTagWebp,
	"data/web/static/webp/tags-2x.webp":                     dataWebStaticWebpTags2xWebp,
	"data/web/static/webp/tags-3x.webp":                     dataWebStaticWebpTags3xWebp,
	"data/web/static/webp/tags-4x.webp":                     dataWebStaticWebpTags4xWebp,
	"data/web/static/webp/tags-6x.webp":                     dataWebStaticWebpTags6xWebp,
	"data/web/static/webp/tags-8x.webp":                     dataWebStaticWebpTags8xWebp,
	"data/web/static/webp/tags.webp":                        dataWebStaticWebpTagsWebp,
	"data/web/static/webp/target-2x.webp":                   dataWebStaticWebpTarget2xWebp,
	"data/web/static/webp/target-3x.webp":                   dataWebStaticWebpTarget3xWebp,
	"data/web/static/webp/target-4x.webp":                   dataWebStaticWebpTarget4xWebp,
	"data/web/static/webp/target-6x.webp":                   dataWebStaticWebpTarget6xWebp,
	"data/web/static/webp/target-8x.webp":                   dataWebStaticWebpTarget8xWebp,
	"data/web/static/webp/target.webp":                      dataWebStaticWebpTargetWebp,
	"data/web/static/webp/task-2x.webp":                     dataWebStaticWebpTask2xWebp,
	"data/web/static/webp/task-3x.webp":                     dataWebStaticWebpTask3xWebp,
	"data/web/static/webp/task-4x.webp":                     dataWebStaticWebpTask4xWebp,
	"data/web/static/webp/task-6x.webp":                     dataWebStaticWebpTask6xWebp,
	"data/web/static/webp/task-8x.webp":                     dataWebStaticWebpTask8xWebp,
	"data/web/static/webp/task.webp":                        dataWebStaticWebpTaskWebp,
	"data/web/static/webp/terminal-2x.webp":                 dataWebStaticWebpTerminal2xWebp,
	"data/web/static/webp/terminal-3x.webp":                 dataWebStaticWebpTerminal3xWebp,
	"data/web/static/webp/terminal-4x.webp":                 dataWebStaticWebpTerminal4xWebp,
	"data/web/static/webp/terminal-6x.webp":                 dataWebStaticWebpTerminal6xWebp,
	"data/web/static/webp/terminal-8x.webp":                 dataWebStaticWebpTerminal8xWebp,
	"data/web/static/webp/terminal.webp":                    dataWebStaticWebpTerminalWebp,
	"data/web/static/webp/text-2x.webp":                     dataWebStaticWebpText2xWebp,
	"data/web/static/webp/text-3x.webp":                     dataWebStaticWebpText3xWebp,
	"data/web/static/webp/text-4x.webp":                     dataWebStaticWebpText4xWebp,
	"data/web/static/webp/text-6x.webp":                     dataWebStaticWebpText6xWebp,
	"data/web/static/webp/text-8x.webp":                     dataWebStaticWebpText8xWebp,
	"data/web/static/webp/text.webp":                        dataWebStaticWebpTextWebp,
	"data/web/static/webp/thumb-down-2x.webp":               dataWebStaticWebpThumbDown2xWebp,
	"data/web/static/webp/thumb-down-3x.webp":               dataWebStaticWebpThumbDown3xWebp,
	"data/web/static/webp/thumb-down-4x.webp":               dataWebStaticWebpThumbDown4xWebp,
	"data/web/static/webp/thumb-down-6x.webp":               dataWebStaticWebpThumbDown6xWebp,
	"data/web/static/webp/thumb-down-8x.webp":               dataWebStaticWebpThumbDown8xWebp,
	"data/web/static/webp/thumb-down.webp":                  dataWebStaticWebpThumbDownWebp,
	"data/web/static/webp/thumb-up-2x.webp":                 dataWebStaticWebpThumbUp2xWebp,
	"data/web/static/webp/thumb-up-3x.webp":                 dataWebStaticWebpThumbUp3xWebp,
	"data/web/static/webp/thumb-up-4x.webp":                 dataWebStaticWebpThumbUp4xWebp,
	"data/web/static/webp/thumb-up-6x.webp":                 dataWebStaticWebpThumbUp6xWebp,
	"data/web/static/webp/thumb-up-8x.webp":                 dataWebStaticWebpThumbUp8xWebp,
	"data/web/static/webp/thumb-up.webp":                    dataWebStaticWebpThumbUpWebp,
	"data/web/static/webp/timer-2x.webp":                    dataWebStaticWebpTimer2xWebp,
	"data/web/static/webp/timer-3x.webp":                    dataWebStaticWebpTimer3xWebp,
	"data/web/static/webp/timer-4x.webp":                    dataWebStaticWebpTimer4xWebp,
	"data/web/static/webp/timer-6x.webp":                    dataWebStaticWebpTimer6xWebp,
	"data/web/static/webp/timer-8x.webp":                    dataWebStaticWebpTimer8xWebp,
	"data/web/static/webp/timer.webp":                       dataWebStaticWebpTimerWebp,
	"data/web/static/webp/transfer-2x.webp":                 dataWebStaticWebpTransfer2xWebp,
	"data/web/static/webp/transfer-3x.webp":                 dataWebStaticWebpTransfer3xWebp,
	"data/web/static/webp/transfer-4x.webp":                 dataWebStaticWebpTransfer4xWebp,
	"data/web/static/webp/transfer-6x.webp":                 dataWebStaticWebpTransfer6xWebp,
	"data/web/static/webp/transfer-8x.webp":                 dataWebStaticWebpTransfer8xWebp,
	"data/web/static/webp/transfer.webp":                    dataWebStaticWebpTransferWebp,
	"data/web/static/webp/trash-2x.webp":                    dataWebStaticWebpTrash2xWebp,
	"data/web/static/webp/trash-3x.webp":                    dataWebStaticWebpTrash3xWebp,
	"data/web/static/webp/trash-4x.webp":                    dataWebStaticWebpTrash4xWebp,
	"data/web/static/webp/trash-6x.webp":                    dataWebStaticWebpTrash6xWebp,
	"data/web/static/webp/trash-8x.webp":                    dataWebStaticWebpTrash8xWebp,
	"data/web/static/webp/trash.webp":                       dataWebStaticWebpTrashWebp,
	"data/web/static/webp/underline-2x.webp":                dataWebStaticWebpUnderline2xWebp,
	"data/web/static/webp/underline-3x.webp":                dataWebStaticWebpUnderline3xWebp,
	"data/web/static/webp/underline-4x.webp":                dataWebStaticWebpUnderline4xWebp,
	"data/web/static/webp/underline-6x.webp":                dataWebStaticWebpUnderline6xWebp,
	"data/web/static/webp/underline-8x.webp":                dataWebStaticWebpUnderline8xWebp,
	"data/web/static/webp/underline.webp":                   dataWebStaticWebpUnderlineWebp,
	"data/web/static/webp/vertical-align-bottom-2x.webp":    dataWebStaticWebpVerticalAlignBottom2xWebp,
	"data/web/static/webp/vertical-align-bottom-3x.webp":    dataWebStaticWebpVerticalAlignBottom3xWebp,
	"data/web/static/webp/vertical-align-bottom-4x.webp":    dataWebStaticWebpVerticalAlignBottom4xWebp,
	"data/web/static/webp/vertical-align-bottom-6x.webp":    dataWebStaticWebpVerticalAlignBottom6xWebp,
	"data/web/static/webp/vertical-align-bottom-8x.webp":    dataWebStaticWebpVerticalAlignBottom8xWebp,
	"data/web/static/webp/vertical-align-bottom.webp":       dataWebStaticWebpVerticalAlignBottomWebp,
	"data/web/static/webp/vertical-align-center-2x.webp":    dataWebStaticWebpVerticalAlignCenter2xWebp,
	"data/web/static/webp/vertical-align-center-3x.webp":    dataWebStaticWebpVerticalAlignCenter3xWebp,
	"data/web/static/webp/vertical-align-center-4x.webp":    dataWebStaticWebpVerticalAlignCenter4xWebp,
	"data/web/static/webp/vertical-align-center-6x.webp":    dataWebStaticWebpVerticalAlignCenter6xWebp,
	"data/web/static/webp/vertical-align-center-8x.webp":    dataWebStaticWebpVerticalAlignCenter8xWebp,
	"data/web/static/webp/vertical-align-center.webp":       dataWebStaticWebpVerticalAlignCenterWebp,
	"data/web/static/webp/vertical-align-top-2x.webp":       dataWebStaticWebpVerticalAlignTop2xWebp,
	"data/web/static/webp/vertical-align-top-3x.webp":       dataWebStaticWebpVerticalAlignTop3xWebp,
	"data/web/static/webp/vertical-align-top-4x.webp":       dataWebStaticWebpVerticalAlignTop4xWebp,
	"data/web/static/webp/vertical-align-top-6x.webp":       dataWebStaticWebpVerticalAlignTop6xWebp,
	"data/web/static/webp/vertical-align-top-8x.webp":       dataWebStaticWebpVerticalAlignTop8xWebp,
	"data/web/static/webp/vertical-align-top.webp":          dataWebStaticWebpVerticalAlignTopWebp,
	"data/web/static/webp/video-2x.webp":                    dataWebStaticWebpVideo2xWebp,
	"data/web/static/webp/video-3x.webp":                    dataWebStaticWebpVideo3xWebp,
	"data/web/static/webp/video-4x.webp":                    dataWebStaticWebpVideo4xWebp,
	"data/web/static/webp/video-6x.webp":                    dataWebStaticWebpVideo6xWebp,
	"data/web/static/webp/video-8x.webp":                    dataWebStaticWebpVideo8xWebp,
	"data/web/static/webp/video.webp":                       dataWebStaticWebpVideoWebp,
	"data/web/static/webp/volume-high-2x.webp":              dataWebStaticWebpVolumeHigh2xWebp,
	"data/web/static/webp/volume-high-3x.webp":              dataWebStaticWebpVolumeHigh3xWebp,
	"data/web/static/webp/volume-high-4x.webp":              dataWebStaticWebpVolumeHigh4xWebp,
	"data/web/static/webp/volume-high-6x.webp":              dataWebStaticWebpVolumeHigh6xWebp,
	"data/web/static/webp/volume-high-8x.webp":              dataWebStaticWebpVolumeHigh8xWebp,
	"data/web/static/webp/volume-high.webp":                 dataWebStaticWebpVolumeHighWebp,
	"data/web/static/webp/volume-low-2x.webp":               dataWebStaticWebpVolumeLow2xWebp,
	"data/web/static/webp/volume-low-3x.webp":               dataWebStaticWebpVolumeLow3xWebp,
	"data/web/static/webp/volume-low-4x.webp":               dataWebStaticWebpVolumeLow4xWebp,
	"data/web/static/webp/volume-low-6x.webp":               dataWebStaticWebpVolumeLow6xWebp,
	"data/web/static/webp/volume-low-8x.webp":               dataWebStaticWebpVolumeLow8xWebp,
	"data/web/static/webp/volume-low.webp":                  dataWebStaticWebpVolumeLowWebp,
	"data/web/static/webp/volume-off-2x.webp":               dataWebStaticWebpVolumeOff2xWebp,
	"data/web/static/webp/volume-off-3x.webp":               dataWebStaticWebpVolumeOff3xWebp,
	"data/web/static/webp/volume-off-4x.webp":               dataWebStaticWebpVolumeOff4xWebp,
	"data/web/static/webp/volume-off-6x.webp":               dataWebStaticWebpVolumeOff6xWebp,
	"data/web/static/webp/volume-off-8x.webp":               dataWebStaticWebpVolumeOff8xWebp,
	"data/web/static/webp/volume-off.webp":                  dataWebStaticWebpVolumeOffWebp,
	"data/web/static/webp/warning-2x.webp":                  dataWebStaticWebpWarning2xWebp,
	"data/web/static/webp/warning-3x.webp":                  dataWebStaticWebpWarning3xWebp,
	"data/web/static/webp/warning-4x.webp":                  dataWebStaticWebpWarning4xWebp,
	"data/web/static/webp/warning-6x.webp":                  dataWebStaticWebpWarning6xWebp,
	"data/web/static/webp/warning-8x.webp":                  dataWebStaticWebpWarning8xWebp,
	"data/web/static/webp/warning.webp":                     dataWebStaticWebpWarningWebp,
	"data/web/static/webp/wifi-2x.webp":                     dataWebStaticWebpWifi2xWebp,
	"data/web/static/webp/wifi-3x.webp":                     dataWebStaticWebpWifi3xWebp,
	"data/web/static/webp/wifi-4x.webp":                     dataWebStaticWebpWifi4xWebp,
	"data/web/static/webp/wifi-6x.webp":                     dataWebStaticWebpWifi6xWebp,
	"data/web/static/webp/wifi-8x.webp":                     dataWebStaticWebpWifi8xWebp,
	"data/web/static/webp/wifi.webp":                        dataWebStaticWebpWifiWebp,
	"data/web/static/webp/wrench-2x.webp":                   dataWebStaticWebpWrench2xWebp,
	"data/web/static/webp/wrench-3x.webp":                   dataWebStaticWebpWrench3xWebp,
	"data/web/static/webp/wrench-4x.webp":                   dataWebStaticWebpWrench4xWebp,
	"data/web/static/webp/wrench-6x.webp":                   dataWebStaticWebpWrench6xWebp,
	"data/web/static/webp/wrench-8x.webp":                   dataWebStaticWebpWrench8xWebp,
	"data/web/static/webp/wrench.webp":                      dataWebStaticWebpWrenchWebp,
	"data/web/static/webp/x-2x.webp":                        dataWebStaticWebpX2xWebp,
	"data/web/static/webp/x-3x.webp":                        dataWebStaticWebpX3xWebp,
	"data/web/static/webp/x-4x.webp":                        dataWebStaticWebpX4xWebp,
	"data/web/static/webp/x-6x.webp":                        dataWebStaticWebpX6xWebp,
	"data/web/static/webp/x-8x.webp":                        dataWebStaticWebpX8xWebp,
	"data/web/static/webp/x.webp":                           dataWebStaticWebpXWebp,
	"data/web/static/webp/yen-2x.webp":                      dataWebStaticWebpYen2xWebp,
	"data/web/static/webp/yen-3x.webp":                      dataWebStaticWebpYen3xWebp,
	"data/web/static/webp/yen-4x.webp":                      dataWebStaticWebpYen4xWebp,
	"data/web/static/webp/yen-6x.webp":                      dataWebStaticWebpYen6xWebp,
	"data/web/static/webp/yen-8x.webp":                      dataWebStaticWebpYen8xWebp,
	"data/web/static/webp/yen.webp":                         dataWebStaticWebpYenWebp,
	"data/web/static/webp/zoom-in-2x.webp":                  dataWebStaticWebpZoomIn2xWebp,
	"data/web/static/webp/zoom-in-3x.webp":                  dataWebStaticWebpZoomIn3xWebp,
	"data/web/static/webp/zoom-in-4x.webp":                  dataWebStaticWebpZoomIn4xWebp,
	"data/web/static/webp/zoom-in-6x.webp":                  dataWebStaticWebpZoomIn6xWebp,
	"data/web/static/webp/zoom-in-8x.webp":                  dataWebStaticWebpZoomIn8xWebp,
	"data/web/static/webp/zoom-in.webp":                     dataWebStaticWebpZoomInWebp,
	"data/web/static/webp/zoom-out-2x.webp":                 dataWebStaticWebpZoomOut2xWebp,
	"data/web/static/webp/zoom-out-3x.webp":                 dataWebStaticWebpZoomOut3xWebp,
	"data/web/static/webp/zoom-out-4x.webp":                 dataWebStaticWebpZoomOut4xWebp,
	"data/web/static/webp/zoom-out-6x.webp":                 dataWebStaticWebpZoomOut6xWebp,
	"data/web/static/webp/zoom-out-8x.webp":                 dataWebStaticWebpZoomOut8xWebp,
	"data/web/static/webp/zoom-out.webp":                    dataWebStaticWebpZoomOutWebp,
	"data/web/templates/403.tpl":                            dataWebTemplates403Tpl,
	"data/web/templates/layout.tpl":                         dataWebTemplatesLayoutTpl,
	"data/web/templates/node-children.tpl":                  dataWebTemplatesNodeChildrenTpl,
	"data/web/templates/node-content.tpl":                   dataWebTemplatesNodeContentTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"help": &bintree{nil, map[string]*bintree{
			"config":   &bintree{dataHelpConfig, map[string]*bintree{}},
			"download": &bintree{dataHelpDownload, map[string]*bintree{}},
			"help":     &bintree{dataHelpHelp, map[string]*bintree{}},
		}},
		"reference": &bintree{nil, map[string]*bintree{
			"eng":     &bintree{dataReferenceEng, map[string]*bintree{}},
			"example": &bintree{dataReferenceExample, map[string]*bintree{}},
		}},
		"web": &bintree{nil, map[string]*bintree{
			"static": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"stylesheet.css": &bintree{dataWebStaticCssStylesheetCss, map[string]*bintree{}},
				}},
				"favicon.ico": &bintree{dataWebStaticFaviconIco, map[string]*bintree{}},
				"svg": &bintree{nil, map[string]*bintree{
					"account-login.svg":            &bintree{dataWebStaticSvgAccountLoginSvg, map[string]*bintree{}},
					"account-logout.svg":           &bintree{dataWebStaticSvgAccountLogoutSvg, map[string]*bintree{}},
					"action-redo.svg":              &bintree{dataWebStaticSvgActionRedoSvg, map[string]*bintree{}},
					"action-undo.svg":              &bintree{dataWebStaticSvgActionUndoSvg, map[string]*bintree{}},
					"align-center.svg":             &bintree{dataWebStaticSvgAlignCenterSvg, map[string]*bintree{}},
					"align-left.svg":               &bintree{dataWebStaticSvgAlignLeftSvg, map[string]*bintree{}},
					"align-right.svg":              &bintree{dataWebStaticSvgAlignRightSvg, map[string]*bintree{}},
					"aperture.svg":                 &bintree{dataWebStaticSvgApertureSvg, map[string]*bintree{}},
					"arrow-bottom.svg":             &bintree{dataWebStaticSvgArrowBottomSvg, map[string]*bintree{}},
					"arrow-circle-bottom.svg":      &bintree{dataWebStaticSvgArrowCircleBottomSvg, map[string]*bintree{}},
					"arrow-circle-left.svg":        &bintree{dataWebStaticSvgArrowCircleLeftSvg, map[string]*bintree{}},
					"arrow-circle-right.svg":       &bintree{dataWebStaticSvgArrowCircleRightSvg, map[string]*bintree{}},
					"arrow-circle-top.svg":         &bintree{dataWebStaticSvgArrowCircleTopSvg, map[string]*bintree{}},
					"arrow-left.svg":               &bintree{dataWebStaticSvgArrowLeftSvg, map[string]*bintree{}},
					"arrow-right.svg":              &bintree{dataWebStaticSvgArrowRightSvg, map[string]*bintree{}},
					"arrow-thick-bottom.svg":       &bintree{dataWebStaticSvgArrowThickBottomSvg, map[string]*bintree{}},
					"arrow-thick-left.svg":         &bintree{dataWebStaticSvgArrowThickLeftSvg, map[string]*bintree{}},
					"arrow-thick-right.svg":        &bintree{dataWebStaticSvgArrowThickRightSvg, map[string]*bintree{}},
					"arrow-thick-top.svg":          &bintree{dataWebStaticSvgArrowThickTopSvg, map[string]*bintree{}},
					"arrow-top.svg":                &bintree{dataWebStaticSvgArrowTopSvg, map[string]*bintree{}},
					"audio-spectrum.svg":           &bintree{dataWebStaticSvgAudioSpectrumSvg, map[string]*bintree{}},
					"audio.svg":                    &bintree{dataWebStaticSvgAudioSvg, map[string]*bintree{}},
					"badge.svg":                    &bintree{dataWebStaticSvgBadgeSvg, map[string]*bintree{}},
					"ban.svg":                      &bintree{dataWebStaticSvgBanSvg, map[string]*bintree{}},
					"bar-chart.svg":                &bintree{dataWebStaticSvgBarChartSvg, map[string]*bintree{}},
					"basket.svg":                   &bintree{dataWebStaticSvgBasketSvg, map[string]*bintree{}},
					"battery-empty.svg":            &bintree{dataWebStaticSvgBatteryEmptySvg, map[string]*bintree{}},
					"battery-full.svg":             &bintree{dataWebStaticSvgBatteryFullSvg, map[string]*bintree{}},
					"beaker.svg":                   &bintree{dataWebStaticSvgBeakerSvg, map[string]*bintree{}},
					"bell.svg":                     &bintree{dataWebStaticSvgBellSvg, map[string]*bintree{}},
					"bluetooth.svg":                &bintree{dataWebStaticSvgBluetoothSvg, map[string]*bintree{}},
					"bold.svg":                     &bintree{dataWebStaticSvgBoldSvg, map[string]*bintree{}},
					"bolt.svg":                     &bintree{dataWebStaticSvgBoltSvg, map[string]*bintree{}},
					"book.svg":                     &bintree{dataWebStaticSvgBookSvg, map[string]*bintree{}},
					"bookmark.svg":                 &bintree{dataWebStaticSvgBookmarkSvg, map[string]*bintree{}},
					"box.svg":                      &bintree{dataWebStaticSvgBoxSvg, map[string]*bintree{}},
					"briefcase.svg":                &bintree{dataWebStaticSvgBriefcaseSvg, map[string]*bintree{}},
					"british-pound.svg":            &bintree{dataWebStaticSvgBritishPoundSvg, map[string]*bintree{}},
					"browser.svg":                  &bintree{dataWebStaticSvgBrowserSvg, map[string]*bintree{}},
					"brush.svg":                    &bintree{dataWebStaticSvgBrushSvg, map[string]*bintree{}},
					"bug.svg":                      &bintree{dataWebStaticSvgBugSvg, map[string]*bintree{}},
					"bullhorn.svg":                 &bintree{dataWebStaticSvgBullhornSvg, map[string]*bintree{}},
					"calculator.svg":               &bintree{dataWebStaticSvgCalculatorSvg, map[string]*bintree{}},
					"calendar.svg":                 &bintree{dataWebStaticSvgCalendarSvg, map[string]*bintree{}},
					"camera-slr.svg":               &bintree{dataWebStaticSvgCameraSlrSvg, map[string]*bintree{}},
					"caret-bottom.svg":             &bintree{dataWebStaticSvgCaretBottomSvg, map[string]*bintree{}},
					"caret-left.svg":               &bintree{dataWebStaticSvgCaretLeftSvg, map[string]*bintree{}},
					"caret-right.svg":              &bintree{dataWebStaticSvgCaretRightSvg, map[string]*bintree{}},
					"caret-top.svg":                &bintree{dataWebStaticSvgCaretTopSvg, map[string]*bintree{}},
					"cart.svg":                     &bintree{dataWebStaticSvgCartSvg, map[string]*bintree{}},
					"chat.svg":                     &bintree{dataWebStaticSvgChatSvg, map[string]*bintree{}},
					"check.svg":                    &bintree{dataWebStaticSvgCheckSvg, map[string]*bintree{}},
					"chevron-bottom.svg":           &bintree{dataWebStaticSvgChevronBottomSvg, map[string]*bintree{}},
					"chevron-left.svg":             &bintree{dataWebStaticSvgChevronLeftSvg, map[string]*bintree{}},
					"chevron-right.svg":            &bintree{dataWebStaticSvgChevronRightSvg, map[string]*bintree{}},
					"chevron-top.svg":              &bintree{dataWebStaticSvgChevronTopSvg, map[string]*bintree{}},
					"circle-check.svg":             &bintree{dataWebStaticSvgCircleCheckSvg, map[string]*bintree{}},
					"circle-x.svg":                 &bintree{dataWebStaticSvgCircleXSvg, map[string]*bintree{}},
					"clipboard.svg":                &bintree{dataWebStaticSvgClipboardSvg, map[string]*bintree{}},
					"clock.svg":                    &bintree{dataWebStaticSvgClockSvg, map[string]*bintree{}},
					"cloud-download.svg":           &bintree{dataWebStaticSvgCloudDownloadSvg, map[string]*bintree{}},
					"cloud-upload.svg":             &bintree{dataWebStaticSvgCloudUploadSvg, map[string]*bintree{}},
					"cloud.svg":                    &bintree{dataWebStaticSvgCloudSvg, map[string]*bintree{}},
					"cloudy.svg":                   &bintree{dataWebStaticSvgCloudySvg, map[string]*bintree{}},
					"code.svg":                     &bintree{dataWebStaticSvgCodeSvg, map[string]*bintree{}},
					"cog.svg":                      &bintree{dataWebStaticSvgCogSvg, map[string]*bintree{}},
					"collapse-down.svg":            &bintree{dataWebStaticSvgCollapseDownSvg, map[string]*bintree{}},
					"collapse-left.svg":            &bintree{dataWebStaticSvgCollapseLeftSvg, map[string]*bintree{}},
					"collapse-right.svg":           &bintree{dataWebStaticSvgCollapseRightSvg, map[string]*bintree{}},
					"collapse-up.svg":              &bintree{dataWebStaticSvgCollapseUpSvg, map[string]*bintree{}},
					"command.svg":                  &bintree{dataWebStaticSvgCommandSvg, map[string]*bintree{}},
					"comment-square.svg":           &bintree{dataWebStaticSvgCommentSquareSvg, map[string]*bintree{}},
					"compass.svg":                  &bintree{dataWebStaticSvgCompassSvg, map[string]*bintree{}},
					"contrast.svg":                 &bintree{dataWebStaticSvgContrastSvg, map[string]*bintree{}},
					"copywriting.svg":              &bintree{dataWebStaticSvgCopywritingSvg, map[string]*bintree{}},
					"credit-card.svg":              &bintree{dataWebStaticSvgCreditCardSvg, map[string]*bintree{}},
					"crop.svg":                     &bintree{dataWebStaticSvgCropSvg, map[string]*bintree{}},
					"dashboard.svg":                &bintree{dataWebStaticSvgDashboardSvg, map[string]*bintree{}},
					"data-transfer-download.svg":   &bintree{dataWebStaticSvgDataTransferDownloadSvg, map[string]*bintree{}},
					"data-transfer-upload.svg":     &bintree{dataWebStaticSvgDataTransferUploadSvg, map[string]*bintree{}},
					"delete.svg":                   &bintree{dataWebStaticSvgDeleteSvg, map[string]*bintree{}},
					"dial.svg":                     &bintree{dataWebStaticSvgDialSvg, map[string]*bintree{}},
					"document.svg":                 &bintree{dataWebStaticSvgDocumentSvg, map[string]*bintree{}},
					"dollar.svg":                   &bintree{dataWebStaticSvgDollarSvg, map[string]*bintree{}},
					"double-quote-sans-left.svg":   &bintree{dataWebStaticSvgDoubleQuoteSansLeftSvg, map[string]*bintree{}},
					"double-quote-sans-right.svg":  &bintree{dataWebStaticSvgDoubleQuoteSansRightSvg, map[string]*bintree{}},
					"double-quote-serif-left.svg":  &bintree{dataWebStaticSvgDoubleQuoteSerifLeftSvg, map[string]*bintree{}},
					"double-quote-serif-right.svg": &bintree{dataWebStaticSvgDoubleQuoteSerifRightSvg, map[string]*bintree{}},
					"droplet.svg":                  &bintree{dataWebStaticSvgDropletSvg, map[string]*bintree{}},
					"eject.svg":                    &bintree{dataWebStaticSvgEjectSvg, map[string]*bintree{}},
					"elevator.svg":                 &bintree{dataWebStaticSvgElevatorSvg, map[string]*bintree{}},
					"ellipses.svg":                 &bintree{dataWebStaticSvgEllipsesSvg, map[string]*bintree{}},
					"envelope-closed.svg":          &bintree{dataWebStaticSvgEnvelopeClosedSvg, map[string]*bintree{}},
					"envelope-open.svg":            &bintree{dataWebStaticSvgEnvelopeOpenSvg, map[string]*bintree{}},
					"euro.svg":                     &bintree{dataWebStaticSvgEuroSvg, map[string]*bintree{}},
					"excerpt.svg":                  &bintree{dataWebStaticSvgExcerptSvg, map[string]*bintree{}},
					"expand-down.svg":              &bintree{dataWebStaticSvgExpandDownSvg, map[string]*bintree{}},
					"expand-left.svg":              &bintree{dataWebStaticSvgExpandLeftSvg, map[string]*bintree{}},
					"expand-right.svg":             &bintree{dataWebStaticSvgExpandRightSvg, map[string]*bintree{}},
					"expand-up.svg":                &bintree{dataWebStaticSvgExpandUpSvg, map[string]*bintree{}},
					"external-link.svg":            &bintree{dataWebStaticSvgExternalLinkSvg, map[string]*bintree{}},
					"eye.svg":                      &bintree{dataWebStaticSvgEyeSvg, map[string]*bintree{}},
					"eyedropper.svg":               &bintree{dataWebStaticSvgEyedropperSvg, map[string]*bintree{}},
					"file.svg":                     &bintree{dataWebStaticSvgFileSvg, map[string]*bintree{}},
					"fire.svg":                     &bintree{dataWebStaticSvgFireSvg, map[string]*bintree{}},
					"flag.svg":                     &bintree{dataWebStaticSvgFlagSvg, map[string]*bintree{}},
					"flash.svg":                    &bintree{dataWebStaticSvgFlashSvg, map[string]*bintree{}},
					"folder.svg":                   &bintree{dataWebStaticSvgFolderSvg, map[string]*bintree{}},
					"fork.svg":                     &bintree{dataWebStaticSvgForkSvg, map[string]*bintree{}},
					"fullscreen-enter.svg":         &bintree{dataWebStaticSvgFullscreenEnterSvg, map[string]*bintree{}},
					"fullscreen-exit.svg":          &bintree{dataWebStaticSvgFullscreenExitSvg, map[string]*bintree{}},
					"globe.svg":                    &bintree{dataWebStaticSvgGlobeSvg, map[string]*bintree{}},
					"graph.svg":                    &bintree{dataWebStaticSvgGraphSvg, map[string]*bintree{}},
					"grid-four-up.svg":             &bintree{dataWebStaticSvgGridFourUpSvg, map[string]*bintree{}},
					"grid-three-up.svg":            &bintree{dataWebStaticSvgGridThreeUpSvg, map[string]*bintree{}},
					"grid-two-up.svg":              &bintree{dataWebStaticSvgGridTwoUpSvg, map[string]*bintree{}},
					"hard-drive.svg":               &bintree{dataWebStaticSvgHardDriveSvg, map[string]*bintree{}},
					"header.svg":                   &bintree{dataWebStaticSvgHeaderSvg, map[string]*bintree{}},
					"headphones.svg":               &bintree{dataWebStaticSvgHeadphonesSvg, map[string]*bintree{}},
					"heart.svg":                    &bintree{dataWebStaticSvgHeartSvg, map[string]*bintree{}},
					"home.svg":                     &bintree{dataWebStaticSvgHomeSvg, map[string]*bintree{}},
					"image.svg":                    &bintree{dataWebStaticSvgImageSvg, map[string]*bintree{}},
					"inbox.svg":                    &bintree{dataWebStaticSvgInboxSvg, map[string]*bintree{}},
					"infinity.svg":                 &bintree{dataWebStaticSvgInfinitySvg, map[string]*bintree{}},
					"info.svg":                     &bintree{dataWebStaticSvgInfoSvg, map[string]*bintree{}},
					"italic.svg":                   &bintree{dataWebStaticSvgItalicSvg, map[string]*bintree{}},
					"justify-center.svg":           &bintree{dataWebStaticSvgJustifyCenterSvg, map[string]*bintree{}},
					"justify-left.svg":             &bintree{dataWebStaticSvgJustifyLeftSvg, map[string]*bintree{}},
					"justify-right.svg":            &bintree{dataWebStaticSvgJustifyRightSvg, map[string]*bintree{}},
					"key.svg":                      &bintree{dataWebStaticSvgKeySvg, map[string]*bintree{}},
					"laptop.svg":                   &bintree{dataWebStaticSvgLaptopSvg, map[string]*bintree{}},
					"layers.svg":                   &bintree{dataWebStaticSvgLayersSvg, map[string]*bintree{}},
					"lightbulb.svg":                &bintree{dataWebStaticSvgLightbulbSvg, map[string]*bintree{}},
					"link-broken.svg":              &bintree{dataWebStaticSvgLinkBrokenSvg, map[string]*bintree{}},
					"link-intact.svg":              &bintree{dataWebStaticSvgLinkIntactSvg, map[string]*bintree{}},
					"list-rich.svg":                &bintree{dataWebStaticSvgListRichSvg, map[string]*bintree{}},
					"list.svg":                     &bintree{dataWebStaticSvgListSvg, map[string]*bintree{}},
					"location.svg":                 &bintree{dataWebStaticSvgLocationSvg, map[string]*bintree{}},
					"lock-locked.svg":              &bintree{dataWebStaticSvgLockLockedSvg, map[string]*bintree{}},
					"lock-unlocked.svg":            &bintree{dataWebStaticSvgLockUnlockedSvg, map[string]*bintree{}},
					"loop-circular.svg":            &bintree{dataWebStaticSvgLoopCircularSvg, map[string]*bintree{}},
					"loop-square.svg":              &bintree{dataWebStaticSvgLoopSquareSvg, map[string]*bintree{}},
					"loop.svg":                     &bintree{dataWebStaticSvgLoopSvg, map[string]*bintree{}},
					"magnifying-glass.svg":         &bintree{dataWebStaticSvgMagnifyingGlassSvg, map[string]*bintree{}},
					"map-marker.svg":               &bintree{dataWebStaticSvgMapMarkerSvg, map[string]*bintree{}},
					"map.svg":                      &bintree{dataWebStaticSvgMapSvg, map[string]*bintree{}},
					"media-pause.svg":              &bintree{dataWebStaticSvgMediaPauseSvg, map[string]*bintree{}},
					"media-play.svg":               &bintree{dataWebStaticSvgMediaPlaySvg, map[string]*bintree{}},
					"media-record.svg":             &bintree{dataWebStaticSvgMediaRecordSvg, map[string]*bintree{}},
					"media-skip-backward.svg":      &bintree{dataWebStaticSvgMediaSkipBackwardSvg, map[string]*bintree{}},
					"media-skip-forward.svg":       &bintree{dataWebStaticSvgMediaSkipForwardSvg, map[string]*bintree{}},
					"media-step-backward.svg":      &bintree{dataWebStaticSvgMediaStepBackwardSvg, map[string]*bintree{}},
					"media-step-forward.svg":       &bintree{dataWebStaticSvgMediaStepForwardSvg, map[string]*bintree{}},
					"media-stop.svg":               &bintree{dataWebStaticSvgMediaStopSvg, map[string]*bintree{}},
					"medical-cross.svg":            &bintree{dataWebStaticSvgMedicalCrossSvg, map[string]*bintree{}},
					"menu.svg":                     &bintree{dataWebStaticSvgMenuSvg, map[string]*bintree{}},
					"microphone.svg":               &bintree{dataWebStaticSvgMicrophoneSvg, map[string]*bintree{}},
					"minus.svg":                    &bintree{dataWebStaticSvgMinusSvg, map[string]*bintree{}},
					"monitor.svg":                  &bintree{dataWebStaticSvgMonitorSvg, map[string]*bintree{}},
					"moon.svg":                     &bintree{dataWebStaticSvgMoonSvg, map[string]*bintree{}},
					"move.svg":                     &bintree{dataWebStaticSvgMoveSvg, map[string]*bintree{}},
					"musical-note.svg":             &bintree{dataWebStaticSvgMusicalNoteSvg, map[string]*bintree{}},
					"paperclip.svg":                &bintree{dataWebStaticSvgPaperclipSvg, map[string]*bintree{}},
					"pencil.svg":                   &bintree{dataWebStaticSvgPencilSvg, map[string]*bintree{}},
					"people.svg":                   &bintree{dataWebStaticSvgPeopleSvg, map[string]*bintree{}},
					"person.svg":                   &bintree{dataWebStaticSvgPersonSvg, map[string]*bintree{}},
					"phone.svg":                    &bintree{dataWebStaticSvgPhoneSvg, map[string]*bintree{}},
					"pie-chart.svg":                &bintree{dataWebStaticSvgPieChartSvg, map[string]*bintree{}},
					"pin.svg":                      &bintree{dataWebStaticSvgPinSvg, map[string]*bintree{}},
					"play-circle.svg":              &bintree{dataWebStaticSvgPlayCircleSvg, map[string]*bintree{}},
					"plus.svg":                     &bintree{dataWebStaticSvgPlusSvg, map[string]*bintree{}},
					"power-standby.svg":            &bintree{dataWebStaticSvgPowerStandbySvg, map[string]*bintree{}},
					"print.svg":                    &bintree{dataWebStaticSvgPrintSvg, map[string]*bintree{}},
					"project.svg":                  &bintree{dataWebStaticSvgProjectSvg, map[string]*bintree{}},
					"pulse.svg":                    &bintree{dataWebStaticSvgPulseSvg, map[string]*bintree{}},
					"puzzle-piece.svg":             &bintree{dataWebStaticSvgPuzzlePieceSvg, map[string]*bintree{}},
					"question-mark.svg":            &bintree{dataWebStaticSvgQuestionMarkSvg, map[string]*bintree{}},
					"rain.svg":                     &bintree{dataWebStaticSvgRainSvg, map[string]*bintree{}},
					"random.svg":                   &bintree{dataWebStaticSvgRandomSvg, map[string]*bintree{}},
					"reload.svg":                   &bintree{dataWebStaticSvgReloadSvg, map[string]*bintree{}},
					"resize-both.svg":              &bintree{dataWebStaticSvgResizeBothSvg, map[string]*bintree{}},
					"resize-height.svg":            &bintree{dataWebStaticSvgResizeHeightSvg, map[string]*bintree{}},
					"resize-width.svg":             &bintree{dataWebStaticSvgResizeWidthSvg, map[string]*bintree{}},
					"rss-alt.svg":                  &bintree{dataWebStaticSvgRssAltSvg, map[string]*bintree{}},
					"rss.svg":                      &bintree{dataWebStaticSvgRssSvg, map[string]*bintree{}},
					"script.svg":                   &bintree{dataWebStaticSvgScriptSvg, map[string]*bintree{}},
					"share-boxed.svg":              &bintree{dataWebStaticSvgShareBoxedSvg, map[string]*bintree{}},
					"share.svg":                    &bintree{dataWebStaticSvgShareSvg, map[string]*bintree{}},
					"shield.svg":                   &bintree{dataWebStaticSvgShieldSvg, map[string]*bintree{}},
					"signal.svg":                   &bintree{dataWebStaticSvgSignalSvg, map[string]*bintree{}},
					"signpost.svg":                 &bintree{dataWebStaticSvgSignpostSvg, map[string]*bintree{}},
					"sort-ascending.svg":           &bintree{dataWebStaticSvgSortAscendingSvg, map[string]*bintree{}},
					"sort-descending.svg":          &bintree{dataWebStaticSvgSortDescendingSvg, map[string]*bintree{}},
					"spreadsheet.svg":              &bintree{dataWebStaticSvgSpreadsheetSvg, map[string]*bintree{}},
					"star.svg":                     &bintree{dataWebStaticSvgStarSvg, map[string]*bintree{}},
					"sun.svg":                      &bintree{dataWebStaticSvgSunSvg, map[string]*bintree{}},
					"tablet.svg":                   &bintree{dataWebStaticSvgTabletSvg, map[string]*bintree{}},
					"tag.svg":                      &bintree{dataWebStaticSvgTagSvg, map[string]*bintree{}},
					"tags.svg":                     &bintree{dataWebStaticSvgTagsSvg, map[string]*bintree{}},
					"target.svg":                   &bintree{dataWebStaticSvgTargetSvg, map[string]*bintree{}},
					"task.svg":                     &bintree{dataWebStaticSvgTaskSvg, map[string]*bintree{}},
					"terminal.svg":                 &bintree{dataWebStaticSvgTerminalSvg, map[string]*bintree{}},
					"text.svg":                     &bintree{dataWebStaticSvgTextSvg, map[string]*bintree{}},
					"thumb-down.svg":               &bintree{dataWebStaticSvgThumbDownSvg, map[string]*bintree{}},
					"thumb-up.svg":                 &bintree{dataWebStaticSvgThumbUpSvg, map[string]*bintree{}},
					"timer.svg":                    &bintree{dataWebStaticSvgTimerSvg, map[string]*bintree{}},
					"transfer.svg":                 &bintree{dataWebStaticSvgTransferSvg, map[string]*bintree{}},
					"trash.svg":                    &bintree{dataWebStaticSvgTrashSvg, map[string]*bintree{}},
					"underline.svg":                &bintree{dataWebStaticSvgUnderlineSvg, map[string]*bintree{}},
					"vertical-align-bottom.svg":    &bintree{dataWebStaticSvgVerticalAlignBottomSvg, map[string]*bintree{}},
					"vertical-align-center.svg":    &bintree{dataWebStaticSvgVerticalAlignCenterSvg, map[string]*bintree{}},
					"vertical-align-top.svg":       &bintree{dataWebStaticSvgVerticalAlignTopSvg, map[string]*bintree{}},
					"video.svg":                    &bintree{dataWebStaticSvgVideoSvg, map[string]*bintree{}},
					"volume-high.svg":              &bintree{dataWebStaticSvgVolumeHighSvg, map[string]*bintree{}},
					"volume-low.svg":               &bintree{dataWebStaticSvgVolumeLowSvg, map[string]*bintree{}},
					"volume-off.svg":               &bintree{dataWebStaticSvgVolumeOffSvg, map[string]*bintree{}},
					"warning.svg":                  &bintree{dataWebStaticSvgWarningSvg, map[string]*bintree{}},
					"wifi.svg":                     &bintree{dataWebStaticSvgWifiSvg, map[string]*bintree{}},
					"wrench.svg":                   &bintree{dataWebStaticSvgWrenchSvg, map[string]*bintree{}},
					"x.svg":                        &bintree{dataWebStaticSvgXSvg, map[string]*bintree{}},
					"yen.svg":                      &bintree{dataWebStaticSvgYenSvg, map[string]*bintree{}},
					"zoom-in.svg":                  &bintree{dataWebStaticSvgZoomInSvg, map[string]*bintree{}},
					"zoom-out.svg":                 &bintree{dataWebStaticSvgZoomOutSvg, map[string]*bintree{}},
				}},
				"webp": &bintree{nil, map[string]*bintree{
					"account-login-2x.webp":            &bintree{dataWebStaticWebpAccountLogin2xWebp, map[string]*bintree{}},
					"account-login-3x.webp":            &bintree{dataWebStaticWebpAccountLogin3xWebp, map[string]*bintree{}},
					"account-login-4x.webp":            &bintree{dataWebStaticWebpAccountLogin4xWebp, map[string]*bintree{}},
					"account-login-6x.webp":            &bintree{dataWebStaticWebpAccountLogin6xWebp, map[string]*bintree{}},
					"account-login-8x.webp":            &bintree{dataWebStaticWebpAccountLogin8xWebp, map[string]*bintree{}},
					"account-login.webp":               &bintree{dataWebStaticWebpAccountLoginWebp, map[string]*bintree{}},
					"account-logout-2x.webp":           &bintree{dataWebStaticWebpAccountLogout2xWebp, map[string]*bintree{}},
					"account-logout-3x.webp":           &bintree{dataWebStaticWebpAccountLogout3xWebp, map[string]*bintree{}},
					"account-logout-4x.webp":           &bintree{dataWebStaticWebpAccountLogout4xWebp, map[string]*bintree{}},
					"account-logout-6x.webp":           &bintree{dataWebStaticWebpAccountLogout6xWebp, map[string]*bintree{}},
					"account-logout-8x.webp":           &bintree{dataWebStaticWebpAccountLogout8xWebp, map[string]*bintree{}},
					"account-logout.webp":              &bintree{dataWebStaticWebpAccountLogoutWebp, map[string]*bintree{}},
					"action-redo-2x.webp":              &bintree{dataWebStaticWebpActionRedo2xWebp, map[string]*bintree{}},
					"action-redo-3x.webp":              &bintree{dataWebStaticWebpActionRedo3xWebp, map[string]*bintree{}},
					"action-redo-4x.webp":              &bintree{dataWebStaticWebpActionRedo4xWebp, map[string]*bintree{}},
					"action-redo-6x.webp":              &bintree{dataWebStaticWebpActionRedo6xWebp, map[string]*bintree{}},
					"action-redo-8x.webp":              &bintree{dataWebStaticWebpActionRedo8xWebp, map[string]*bintree{}},
					"action-redo.webp":                 &bintree{dataWebStaticWebpActionRedoWebp, map[string]*bintree{}},
					"action-undo-2x.webp":              &bintree{dataWebStaticWebpActionUndo2xWebp, map[string]*bintree{}},
					"action-undo-3x.webp":              &bintree{dataWebStaticWebpActionUndo3xWebp, map[string]*bintree{}},
					"action-undo-4x.webp":              &bintree{dataWebStaticWebpActionUndo4xWebp, map[string]*bintree{}},
					"action-undo-6x.webp":              &bintree{dataWebStaticWebpActionUndo6xWebp, map[string]*bintree{}},
					"action-undo-8x.webp":              &bintree{dataWebStaticWebpActionUndo8xWebp, map[string]*bintree{}},
					"action-undo.webp":                 &bintree{dataWebStaticWebpActionUndoWebp, map[string]*bintree{}},
					"align-center-2x.webp":             &bintree{dataWebStaticWebpAlignCenter2xWebp, map[string]*bintree{}},
					"align-center-3x.webp":             &bintree{dataWebStaticWebpAlignCenter3xWebp, map[string]*bintree{}},
					"align-center-4x.webp":             &bintree{dataWebStaticWebpAlignCenter4xWebp, map[string]*bintree{}},
					"align-center-6x.webp":             &bintree{dataWebStaticWebpAlignCenter6xWebp, map[string]*bintree{}},
					"align-center-8x.webp":             &bintree{dataWebStaticWebpAlignCenter8xWebp, map[string]*bintree{}},
					"align-center.webp":                &bintree{dataWebStaticWebpAlignCenterWebp, map[string]*bintree{}},
					"align-left-2x.webp":               &bintree{dataWebStaticWebpAlignLeft2xWebp, map[string]*bintree{}},
					"align-left-3x.webp":               &bintree{dataWebStaticWebpAlignLeft3xWebp, map[string]*bintree{}},
					"align-left-4x.webp":               &bintree{dataWebStaticWebpAlignLeft4xWebp, map[string]*bintree{}},
					"align-left-6x.webp":               &bintree{dataWebStaticWebpAlignLeft6xWebp, map[string]*bintree{}},
					"align-left-8x.webp":               &bintree{dataWebStaticWebpAlignLeft8xWebp, map[string]*bintree{}},
					"align-left.webp":                  &bintree{dataWebStaticWebpAlignLeftWebp, map[string]*bintree{}},
					"align-right-2x.webp":              &bintree{dataWebStaticWebpAlignRight2xWebp, map[string]*bintree{}},
					"align-right-3x.webp":              &bintree{dataWebStaticWebpAlignRight3xWebp, map[string]*bintree{}},
					"align-right-4x.webp":              &bintree{dataWebStaticWebpAlignRight4xWebp, map[string]*bintree{}},
					"align-right-6x.webp":              &bintree{dataWebStaticWebpAlignRight6xWebp, map[string]*bintree{}},
					"align-right-8x.webp":              &bintree{dataWebStaticWebpAlignRight8xWebp, map[string]*bintree{}},
					"align-right.webp":                 &bintree{dataWebStaticWebpAlignRightWebp, map[string]*bintree{}},
					"aperture-2x.webp":                 &bintree{dataWebStaticWebpAperture2xWebp, map[string]*bintree{}},
					"aperture-3x.webp":                 &bintree{dataWebStaticWebpAperture3xWebp, map[string]*bintree{}},
					"aperture-4x.webp":                 &bintree{dataWebStaticWebpAperture4xWebp, map[string]*bintree{}},
					"aperture-6x.webp":                 &bintree{dataWebStaticWebpAperture6xWebp, map[string]*bintree{}},
					"aperture-8x.webp":                 &bintree{dataWebStaticWebpAperture8xWebp, map[string]*bintree{}},
					"aperture.webp":                    &bintree{dataWebStaticWebpApertureWebp, map[string]*bintree{}},
					"arrow-bottom-2x.webp":             &bintree{dataWebStaticWebpArrowBottom2xWebp, map[string]*bintree{}},
					"arrow-bottom-3x.webp":             &bintree{dataWebStaticWebpArrowBottom3xWebp, map[string]*bintree{}},
					"arrow-bottom-4x.webp":             &bintree{dataWebStaticWebpArrowBottom4xWebp, map[string]*bintree{}},
					"arrow-bottom-6x.webp":             &bintree{dataWebStaticWebpArrowBottom6xWebp, map[string]*bintree{}},
					"arrow-bottom-8x.webp":             &bintree{dataWebStaticWebpArrowBottom8xWebp, map[string]*bintree{}},
					"arrow-bottom.webp":                &bintree{dataWebStaticWebpArrowBottomWebp, map[string]*bintree{}},
					"arrow-circle-bottom-2x.webp":      &bintree{dataWebStaticWebpArrowCircleBottom2xWebp, map[string]*bintree{}},
					"arrow-circle-bottom-3x.webp":      &bintree{dataWebStaticWebpArrowCircleBottom3xWebp, map[string]*bintree{}},
					"arrow-circle-bottom-4x.webp":      &bintree{dataWebStaticWebpArrowCircleBottom4xWebp, map[string]*bintree{}},
					"arrow-circle-bottom-6x.webp":      &bintree{dataWebStaticWebpArrowCircleBottom6xWebp, map[string]*bintree{}},
					"arrow-circle-bottom-8x.webp":      &bintree{dataWebStaticWebpArrowCircleBottom8xWebp, map[string]*bintree{}},
					"arrow-circle-bottom.webp":         &bintree{dataWebStaticWebpArrowCircleBottomWebp, map[string]*bintree{}},
					"arrow-circle-left-2x.webp":        &bintree{dataWebStaticWebpArrowCircleLeft2xWebp, map[string]*bintree{}},
					"arrow-circle-left-3x.webp":        &bintree{dataWebStaticWebpArrowCircleLeft3xWebp, map[string]*bintree{}},
					"arrow-circle-left-4x.webp":        &bintree{dataWebStaticWebpArrowCircleLeft4xWebp, map[string]*bintree{}},
					"arrow-circle-left-6x.webp":        &bintree{dataWebStaticWebpArrowCircleLeft6xWebp, map[string]*bintree{}},
					"arrow-circle-left-8x.webp":        &bintree{dataWebStaticWebpArrowCircleLeft8xWebp, map[string]*bintree{}},
					"arrow-circle-left.webp":           &bintree{dataWebStaticWebpArrowCircleLeftWebp, map[string]*bintree{}},
					"arrow-circle-right-2x.webp":       &bintree{dataWebStaticWebpArrowCircleRight2xWebp, map[string]*bintree{}},
					"arrow-circle-right-3x.webp":       &bintree{dataWebStaticWebpArrowCircleRight3xWebp, map[string]*bintree{}},
					"arrow-circle-right-4x.webp":       &bintree{dataWebStaticWebpArrowCircleRight4xWebp, map[string]*bintree{}},
					"arrow-circle-right-6x.webp":       &bintree{dataWebStaticWebpArrowCircleRight6xWebp, map[string]*bintree{}},
					"arrow-circle-right-8x.webp":       &bintree{dataWebStaticWebpArrowCircleRight8xWebp, map[string]*bintree{}},
					"arrow-circle-right.webp":          &bintree{dataWebStaticWebpArrowCircleRightWebp, map[string]*bintree{}},
					"arrow-circle-top-2x.webp":         &bintree{dataWebStaticWebpArrowCircleTop2xWebp, map[string]*bintree{}},
					"arrow-circle-top-3x.webp":         &bintree{dataWebStaticWebpArrowCircleTop3xWebp, map[string]*bintree{}},
					"arrow-circle-top-4x.webp":         &bintree{dataWebStaticWebpArrowCircleTop4xWebp, map[string]*bintree{}},
					"arrow-circle-top-6x.webp":         &bintree{dataWebStaticWebpArrowCircleTop6xWebp, map[string]*bintree{}},
					"arrow-circle-top-8x.webp":         &bintree{dataWebStaticWebpArrowCircleTop8xWebp, map[string]*bintree{}},
					"arrow-circle-top.webp":            &bintree{dataWebStaticWebpArrowCircleTopWebp, map[string]*bintree{}},
					"arrow-left-2x.webp":               &bintree{dataWebStaticWebpArrowLeft2xWebp, map[string]*bintree{}},
					"arrow-left-3x.webp":               &bintree{dataWebStaticWebpArrowLeft3xWebp, map[string]*bintree{}},
					"arrow-left-4x.webp":               &bintree{dataWebStaticWebpArrowLeft4xWebp, map[string]*bintree{}},
					"arrow-left-6x.webp":               &bintree{dataWebStaticWebpArrowLeft6xWebp, map[string]*bintree{}},
					"arrow-left-8x.webp":               &bintree{dataWebStaticWebpArrowLeft8xWebp, map[string]*bintree{}},
					"arrow-left.webp":                  &bintree{dataWebStaticWebpArrowLeftWebp, map[string]*bintree{}},
					"arrow-right-2x.webp":              &bintree{dataWebStaticWebpArrowRight2xWebp, map[string]*bintree{}},
					"arrow-right-3x.webp":              &bintree{dataWebStaticWebpArrowRight3xWebp, map[string]*bintree{}},
					"arrow-right-4x.webp":              &bintree{dataWebStaticWebpArrowRight4xWebp, map[string]*bintree{}},
					"arrow-right-6x.webp":              &bintree{dataWebStaticWebpArrowRight6xWebp, map[string]*bintree{}},
					"arrow-right-8x.webp":              &bintree{dataWebStaticWebpArrowRight8xWebp, map[string]*bintree{}},
					"arrow-right.webp":                 &bintree{dataWebStaticWebpArrowRightWebp, map[string]*bintree{}},
					"arrow-thick-bottom-2x.webp":       &bintree{dataWebStaticWebpArrowThickBottom2xWebp, map[string]*bintree{}},
					"arrow-thick-bottom-3x.webp":       &bintree{dataWebStaticWebpArrowThickBottom3xWebp, map[string]*bintree{}},
					"arrow-thick-bottom-4x.webp":       &bintree{dataWebStaticWebpArrowThickBottom4xWebp, map[string]*bintree{}},
					"arrow-thick-bottom-6x.webp":       &bintree{dataWebStaticWebpArrowThickBottom6xWebp, map[string]*bintree{}},
					"arrow-thick-bottom-8x.webp":       &bintree{dataWebStaticWebpArrowThickBottom8xWebp, map[string]*bintree{}},
					"arrow-thick-bottom.webp":          &bintree{dataWebStaticWebpArrowThickBottomWebp, map[string]*bintree{}},
					"arrow-thick-left-2x.webp":         &bintree{dataWebStaticWebpArrowThickLeft2xWebp, map[string]*bintree{}},
					"arrow-thick-left-3x.webp":         &bintree{dataWebStaticWebpArrowThickLeft3xWebp, map[string]*bintree{}},
					"arrow-thick-left-4x.webp":         &bintree{dataWebStaticWebpArrowThickLeft4xWebp, map[string]*bintree{}},
					"arrow-thick-left-6x.webp":         &bintree{dataWebStaticWebpArrowThickLeft6xWebp, map[string]*bintree{}},
					"arrow-thick-left-8x.webp":         &bintree{dataWebStaticWebpArrowThickLeft8xWebp, map[string]*bintree{}},
					"arrow-thick-left.webp":            &bintree{dataWebStaticWebpArrowThickLeftWebp, map[string]*bintree{}},
					"arrow-thick-right-2x.webp":        &bintree{dataWebStaticWebpArrowThickRight2xWebp, map[string]*bintree{}},
					"arrow-thick-right-3x.webp":        &bintree{dataWebStaticWebpArrowThickRight3xWebp, map[string]*bintree{}},
					"arrow-thick-right-4x.webp":        &bintree{dataWebStaticWebpArrowThickRight4xWebp, map[string]*bintree{}},
					"arrow-thick-right-6x.webp":        &bintree{dataWebStaticWebpArrowThickRight6xWebp, map[string]*bintree{}},
					"arrow-thick-right-8x.webp":        &bintree{dataWebStaticWebpArrowThickRight8xWebp, map[string]*bintree{}},
					"arrow-thick-right.webp":           &bintree{dataWebStaticWebpArrowThickRightWebp, map[string]*bintree{}},
					"arrow-thick-top-2x.webp":          &bintree{dataWebStaticWebpArrowThickTop2xWebp, map[string]*bintree{}},
					"arrow-thick-top-3x.webp":          &bintree{dataWebStaticWebpArrowThickTop3xWebp, map[string]*bintree{}},
					"arrow-thick-top-4x.webp":          &bintree{dataWebStaticWebpArrowThickTop4xWebp, map[string]*bintree{}},
					"arrow-thick-top-6x.webp":          &bintree{dataWebStaticWebpArrowThickTop6xWebp, map[string]*bintree{}},
					"arrow-thick-top-8x.webp":          &bintree{dataWebStaticWebpArrowThickTop8xWebp, map[string]*bintree{}},
					"arrow-thick-top.webp":             &bintree{dataWebStaticWebpArrowThickTopWebp, map[string]*bintree{}},
					"arrow-top-2x.webp":                &bintree{dataWebStaticWebpArrowTop2xWebp, map[string]*bintree{}},
					"arrow-top-3x.webp":                &bintree{dataWebStaticWebpArrowTop3xWebp, map[string]*bintree{}},
					"arrow-top-4x.webp":                &bintree{dataWebStaticWebpArrowTop4xWebp, map[string]*bintree{}},
					"arrow-top-6x.webp":                &bintree{dataWebStaticWebpArrowTop6xWebp, map[string]*bintree{}},
					"arrow-top-8x.webp":                &bintree{dataWebStaticWebpArrowTop8xWebp, map[string]*bintree{}},
					"arrow-top.webp":                   &bintree{dataWebStaticWebpArrowTopWebp, map[string]*bintree{}},
					"audio-2x.webp":                    &bintree{dataWebStaticWebpAudio2xWebp, map[string]*bintree{}},
					"audio-3x.webp":                    &bintree{dataWebStaticWebpAudio3xWebp, map[string]*bintree{}},
					"audio-4x.webp":                    &bintree{dataWebStaticWebpAudio4xWebp, map[string]*bintree{}},
					"audio-6x.webp":                    &bintree{dataWebStaticWebpAudio6xWebp, map[string]*bintree{}},
					"audio-8x.webp":                    &bintree{dataWebStaticWebpAudio8xWebp, map[string]*bintree{}},
					"audio-spectrum-2x.webp":           &bintree{dataWebStaticWebpAudioSpectrum2xWebp, map[string]*bintree{}},
					"audio-spectrum-3x.webp":           &bintree{dataWebStaticWebpAudioSpectrum3xWebp, map[string]*bintree{}},
					"audio-spectrum-4x.webp":           &bintree{dataWebStaticWebpAudioSpectrum4xWebp, map[string]*bintree{}},
					"audio-spectrum-6x.webp":           &bintree{dataWebStaticWebpAudioSpectrum6xWebp, map[string]*bintree{}},
					"audio-spectrum-8x.webp":           &bintree{dataWebStaticWebpAudioSpectrum8xWebp, map[string]*bintree{}},
					"audio-spectrum.webp":              &bintree{dataWebStaticWebpAudioSpectrumWebp, map[string]*bintree{}},
					"audio.webp":                       &bintree{dataWebStaticWebpAudioWebp, map[string]*bintree{}},
					"badge-2x.webp":                    &bintree{dataWebStaticWebpBadge2xWebp, map[string]*bintree{}},
					"badge-3x.webp":                    &bintree{dataWebStaticWebpBadge3xWebp, map[string]*bintree{}},
					"badge-4x.webp":                    &bintree{dataWebStaticWebpBadge4xWebp, map[string]*bintree{}},
					"badge-6x.webp":                    &bintree{dataWebStaticWebpBadge6xWebp, map[string]*bintree{}},
					"badge-8x.webp":                    &bintree{dataWebStaticWebpBadge8xWebp, map[string]*bintree{}},
					"badge.webp":                       &bintree{dataWebStaticWebpBadgeWebp, map[string]*bintree{}},
					"ban-2x.webp":                      &bintree{dataWebStaticWebpBan2xWebp, map[string]*bintree{}},
					"ban-3x.webp":                      &bintree{dataWebStaticWebpBan3xWebp, map[string]*bintree{}},
					"ban-4x.webp":                      &bintree{dataWebStaticWebpBan4xWebp, map[string]*bintree{}},
					"ban-6x.webp":                      &bintree{dataWebStaticWebpBan6xWebp, map[string]*bintree{}},
					"ban-8x.webp":                      &bintree{dataWebStaticWebpBan8xWebp, map[string]*bintree{}},
					"ban.webp":                         &bintree{dataWebStaticWebpBanWebp, map[string]*bintree{}},
					"bar-chart-2x.webp":                &bintree{dataWebStaticWebpBarChart2xWebp, map[string]*bintree{}},
					"bar-chart-3x.webp":                &bintree{dataWebStaticWebpBarChart3xWebp, map[string]*bintree{}},
					"bar-chart-4x.webp":                &bintree{dataWebStaticWebpBarChart4xWebp, map[string]*bintree{}},
					"bar-chart-6x.webp":                &bintree{dataWebStaticWebpBarChart6xWebp, map[string]*bintree{}},
					"bar-chart-8x.webp":                &bintree{dataWebStaticWebpBarChart8xWebp, map[string]*bintree{}},
					"bar-chart.webp":                   &bintree{dataWebStaticWebpBarChartWebp, map[string]*bintree{}},
					"basket-2x.webp":                   &bintree{dataWebStaticWebpBasket2xWebp, map[string]*bintree{}},
					"basket-3x.webp":                   &bintree{dataWebStaticWebpBasket3xWebp, map[string]*bintree{}},
					"basket-4x.webp":                   &bintree{dataWebStaticWebpBasket4xWebp, map[string]*bintree{}},
					"basket-6x.webp":                   &bintree{dataWebStaticWebpBasket6xWebp, map[string]*bintree{}},
					"basket-8x.webp":                   &bintree{dataWebStaticWebpBasket8xWebp, map[string]*bintree{}},
					"basket.webp":                      &bintree{dataWebStaticWebpBasketWebp, map[string]*bintree{}},
					"battery-empty-2x.webp":            &bintree{dataWebStaticWebpBatteryEmpty2xWebp, map[string]*bintree{}},
					"battery-empty-3x.webp":            &bintree{dataWebStaticWebpBatteryEmpty3xWebp, map[string]*bintree{}},
					"battery-empty-4x.webp":            &bintree{dataWebStaticWebpBatteryEmpty4xWebp, map[string]*bintree{}},
					"battery-empty-6x.webp":            &bintree{dataWebStaticWebpBatteryEmpty6xWebp, map[string]*bintree{}},
					"battery-empty-8x.webp":            &bintree{dataWebStaticWebpBatteryEmpty8xWebp, map[string]*bintree{}},
					"battery-empty.webp":               &bintree{dataWebStaticWebpBatteryEmptyWebp, map[string]*bintree{}},
					"battery-full-2x.webp":             &bintree{dataWebStaticWebpBatteryFull2xWebp, map[string]*bintree{}},
					"battery-full-3x.webp":             &bintree{dataWebStaticWebpBatteryFull3xWebp, map[string]*bintree{}},
					"battery-full-4x.webp":             &bintree{dataWebStaticWebpBatteryFull4xWebp, map[string]*bintree{}},
					"battery-full-6x.webp":             &bintree{dataWebStaticWebpBatteryFull6xWebp, map[string]*bintree{}},
					"battery-full-8x.webp":             &bintree{dataWebStaticWebpBatteryFull8xWebp, map[string]*bintree{}},
					"battery-full.webp":                &bintree{dataWebStaticWebpBatteryFullWebp, map[string]*bintree{}},
					"beaker-2x.webp":                   &bintree{dataWebStaticWebpBeaker2xWebp, map[string]*bintree{}},
					"beaker-3x.webp":                   &bintree{dataWebStaticWebpBeaker3xWebp, map[string]*bintree{}},
					"beaker-4x.webp":                   &bintree{dataWebStaticWebpBeaker4xWebp, map[string]*bintree{}},
					"beaker-6x.webp":                   &bintree{dataWebStaticWebpBeaker6xWebp, map[string]*bintree{}},
					"beaker-8x.webp":                   &bintree{dataWebStaticWebpBeaker8xWebp, map[string]*bintree{}},
					"beaker.webp":                      &bintree{dataWebStaticWebpBeakerWebp, map[string]*bintree{}},
					"bell-2x.webp":                     &bintree{dataWebStaticWebpBell2xWebp, map[string]*bintree{}},
					"bell-3x.webp":                     &bintree{dataWebStaticWebpBell3xWebp, map[string]*bintree{}},
					"bell-4x.webp":                     &bintree{dataWebStaticWebpBell4xWebp, map[string]*bintree{}},
					"bell-6x.webp":                     &bintree{dataWebStaticWebpBell6xWebp, map[string]*bintree{}},
					"bell-8x.webp":                     &bintree{dataWebStaticWebpBell8xWebp, map[string]*bintree{}},
					"bell.webp":                        &bintree{dataWebStaticWebpBellWebp, map[string]*bintree{}},
					"bluetooth-2x.webp":                &bintree{dataWebStaticWebpBluetooth2xWebp, map[string]*bintree{}},
					"bluetooth-3x.webp":                &bintree{dataWebStaticWebpBluetooth3xWebp, map[string]*bintree{}},
					"bluetooth-4x.webp":                &bintree{dataWebStaticWebpBluetooth4xWebp, map[string]*bintree{}},
					"bluetooth-6x.webp":                &bintree{dataWebStaticWebpBluetooth6xWebp, map[string]*bintree{}},
					"bluetooth-8x.webp":                &bintree{dataWebStaticWebpBluetooth8xWebp, map[string]*bintree{}},
					"bluetooth.webp":                   &bintree{dataWebStaticWebpBluetoothWebp, map[string]*bintree{}},
					"bold-2x.webp":                     &bintree{dataWebStaticWebpBold2xWebp, map[string]*bintree{}},
					"bold-3x.webp":                     &bintree{dataWebStaticWebpBold3xWebp, map[string]*bintree{}},
					"bold-4x.webp":                     &bintree{dataWebStaticWebpBold4xWebp, map[string]*bintree{}},
					"bold-6x.webp":                     &bintree{dataWebStaticWebpBold6xWebp, map[string]*bintree{}},
					"bold-8x.webp":                     &bintree{dataWebStaticWebpBold8xWebp, map[string]*bintree{}},
					"bold.webp":                        &bintree{dataWebStaticWebpBoldWebp, map[string]*bintree{}},
					"bolt-2x.webp":                     &bintree{dataWebStaticWebpBolt2xWebp, map[string]*bintree{}},
					"bolt-3x.webp":                     &bintree{dataWebStaticWebpBolt3xWebp, map[string]*bintree{}},
					"bolt-4x.webp":                     &bintree{dataWebStaticWebpBolt4xWebp, map[string]*bintree{}},
					"bolt-6x.webp":                     &bintree{dataWebStaticWebpBolt6xWebp, map[string]*bintree{}},
					"bolt-8x.webp":                     &bintree{dataWebStaticWebpBolt8xWebp, map[string]*bintree{}},
					"bolt.webp":                        &bintree{dataWebStaticWebpBoltWebp, map[string]*bintree{}},
					"book-2x.webp":                     &bintree{dataWebStaticWebpBook2xWebp, map[string]*bintree{}},
					"book-3x.webp":                     &bintree{dataWebStaticWebpBook3xWebp, map[string]*bintree{}},
					"book-4x.webp":                     &bintree{dataWebStaticWebpBook4xWebp, map[string]*bintree{}},
					"book-6x.webp":                     &bintree{dataWebStaticWebpBook6xWebp, map[string]*bintree{}},
					"book-8x.webp":                     &bintree{dataWebStaticWebpBook8xWebp, map[string]*bintree{}},
					"book.webp":                        &bintree{dataWebStaticWebpBookWebp, map[string]*bintree{}},
					"bookmark-2x.webp":                 &bintree{dataWebStaticWebpBookmark2xWebp, map[string]*bintree{}},
					"bookmark-3x.webp":                 &bintree{dataWebStaticWebpBookmark3xWebp, map[string]*bintree{}},
					"bookmark-4x.webp":                 &bintree{dataWebStaticWebpBookmark4xWebp, map[string]*bintree{}},
					"bookmark-6x.webp":                 &bintree{dataWebStaticWebpBookmark6xWebp, map[string]*bintree{}},
					"bookmark-8x.webp":                 &bintree{dataWebStaticWebpBookmark8xWebp, map[string]*bintree{}},
					"bookmark.webp":                    &bintree{dataWebStaticWebpBookmarkWebp, map[string]*bintree{}},
					"box-2x.webp":                      &bintree{dataWebStaticWebpBox2xWebp, map[string]*bintree{}},
					"box-3x.webp":                      &bintree{dataWebStaticWebpBox3xWebp, map[string]*bintree{}},
					"box-4x.webp":                      &bintree{dataWebStaticWebpBox4xWebp, map[string]*bintree{}},
					"box-6x.webp":                      &bintree{dataWebStaticWebpBox6xWebp, map[string]*bintree{}},
					"box-8x.webp":                      &bintree{dataWebStaticWebpBox8xWebp, map[string]*bintree{}},
					"box.webp":                         &bintree{dataWebStaticWebpBoxWebp, map[string]*bintree{}},
					"briefcase-2x.webp":                &bintree{dataWebStaticWebpBriefcase2xWebp, map[string]*bintree{}},
					"briefcase-3x.webp":                &bintree{dataWebStaticWebpBriefcase3xWebp, map[string]*bintree{}},
					"briefcase-4x.webp":                &bintree{dataWebStaticWebpBriefcase4xWebp, map[string]*bintree{}},
					"briefcase-6x.webp":                &bintree{dataWebStaticWebpBriefcase6xWebp, map[string]*bintree{}},
					"briefcase-8x.webp":                &bintree{dataWebStaticWebpBriefcase8xWebp, map[string]*bintree{}},
					"briefcase.webp":                   &bintree{dataWebStaticWebpBriefcaseWebp, map[string]*bintree{}},
					"british-pound-2x.webp":            &bintree{dataWebStaticWebpBritishPound2xWebp, map[string]*bintree{}},
					"british-pound-3x.webp":            &bintree{dataWebStaticWebpBritishPound3xWebp, map[string]*bintree{}},
					"british-pound-4x.webp":            &bintree{dataWebStaticWebpBritishPound4xWebp, map[string]*bintree{}},
					"british-pound-6x.webp":            &bintree{dataWebStaticWebpBritishPound6xWebp, map[string]*bintree{}},
					"british-pound-8x.webp":            &bintree{dataWebStaticWebpBritishPound8xWebp, map[string]*bintree{}},
					"british-pound.webp":               &bintree{dataWebStaticWebpBritishPoundWebp, map[string]*bintree{}},
					"browser-2x.webp":                  &bintree{dataWebStaticWebpBrowser2xWebp, map[string]*bintree{}},
					"browser-3x.webp":                  &bintree{dataWebStaticWebpBrowser3xWebp, map[string]*bintree{}},
					"browser-4x.webp":                  &bintree{dataWebStaticWebpBrowser4xWebp, map[string]*bintree{}},
					"browser-6x.webp":                  &bintree{dataWebStaticWebpBrowser6xWebp, map[string]*bintree{}},
					"browser-8x.webp":                  &bintree{dataWebStaticWebpBrowser8xWebp, map[string]*bintree{}},
					"browser.webp":                     &bintree{dataWebStaticWebpBrowserWebp, map[string]*bintree{}},
					"brush-2x.webp":                    &bintree{dataWebStaticWebpBrush2xWebp, map[string]*bintree{}},
					"brush-3x.webp":                    &bintree{dataWebStaticWebpBrush3xWebp, map[string]*bintree{}},
					"brush-4x.webp":                    &bintree{dataWebStaticWebpBrush4xWebp, map[string]*bintree{}},
					"brush-6x.webp":                    &bintree{dataWebStaticWebpBrush6xWebp, map[string]*bintree{}},
					"brush-8x.webp":                    &bintree{dataWebStaticWebpBrush8xWebp, map[string]*bintree{}},
					"brush.webp":                       &bintree{dataWebStaticWebpBrushWebp, map[string]*bintree{}},
					"bug-2x.webp":                      &bintree{dataWebStaticWebpBug2xWebp, map[string]*bintree{}},
					"bug-3x.webp":                      &bintree{dataWebStaticWebpBug3xWebp, map[string]*bintree{}},
					"bug-4x.webp":                      &bintree{dataWebStaticWebpBug4xWebp, map[string]*bintree{}},
					"bug-6x.webp":                      &bintree{dataWebStaticWebpBug6xWebp, map[string]*bintree{}},
					"bug-8x.webp":                      &bintree{dataWebStaticWebpBug8xWebp, map[string]*bintree{}},
					"bug.webp":                         &bintree{dataWebStaticWebpBugWebp, map[string]*bintree{}},
					"bullhorn-2x.webp":                 &bintree{dataWebStaticWebpBullhorn2xWebp, map[string]*bintree{}},
					"bullhorn-3x.webp":                 &bintree{dataWebStaticWebpBullhorn3xWebp, map[string]*bintree{}},
					"bullhorn-4x.webp":                 &bintree{dataWebStaticWebpBullhorn4xWebp, map[string]*bintree{}},
					"bullhorn-6x.webp":                 &bintree{dataWebStaticWebpBullhorn6xWebp, map[string]*bintree{}},
					"bullhorn-8x.webp":                 &bintree{dataWebStaticWebpBullhorn8xWebp, map[string]*bintree{}},
					"bullhorn.webp":                    &bintree{dataWebStaticWebpBullhornWebp, map[string]*bintree{}},
					"calculator-2x.webp":               &bintree{dataWebStaticWebpCalculator2xWebp, map[string]*bintree{}},
					"calculator-3x.webp":               &bintree{dataWebStaticWebpCalculator3xWebp, map[string]*bintree{}},
					"calculator-4x.webp":               &bintree{dataWebStaticWebpCalculator4xWebp, map[string]*bintree{}},
					"calculator-6x.webp":               &bintree{dataWebStaticWebpCalculator6xWebp, map[string]*bintree{}},
					"calculator-8x.webp":               &bintree{dataWebStaticWebpCalculator8xWebp, map[string]*bintree{}},
					"calculator.webp":                  &bintree{dataWebStaticWebpCalculatorWebp, map[string]*bintree{}},
					"calendar-2x.webp":                 &bintree{dataWebStaticWebpCalendar2xWebp, map[string]*bintree{}},
					"calendar-3x.webp":                 &bintree{dataWebStaticWebpCalendar3xWebp, map[string]*bintree{}},
					"calendar-4x.webp":                 &bintree{dataWebStaticWebpCalendar4xWebp, map[string]*bintree{}},
					"calendar-6x.webp":                 &bintree{dataWebStaticWebpCalendar6xWebp, map[string]*bintree{}},
					"calendar-8x.webp":                 &bintree{dataWebStaticWebpCalendar8xWebp, map[string]*bintree{}},
					"calendar.webp":                    &bintree{dataWebStaticWebpCalendarWebp, map[string]*bintree{}},
					"camera-slr-2x.webp":               &bintree{dataWebStaticWebpCameraSlr2xWebp, map[string]*bintree{}},
					"camera-slr-3x.webp":               &bintree{dataWebStaticWebpCameraSlr3xWebp, map[string]*bintree{}},
					"camera-slr-4x.webp":               &bintree{dataWebStaticWebpCameraSlr4xWebp, map[string]*bintree{}},
					"camera-slr-6x.webp":               &bintree{dataWebStaticWebpCameraSlr6xWebp, map[string]*bintree{}},
					"camera-slr-8x.webp":               &bintree{dataWebStaticWebpCameraSlr8xWebp, map[string]*bintree{}},
					"camera-slr.webp":                  &bintree{dataWebStaticWebpCameraSlrWebp, map[string]*bintree{}},
					"caret-bottom-2x.webp":             &bintree{dataWebStaticWebpCaretBottom2xWebp, map[string]*bintree{}},
					"caret-bottom-3x.webp":             &bintree{dataWebStaticWebpCaretBottom3xWebp, map[string]*bintree{}},
					"caret-bottom-4x.webp":             &bintree{dataWebStaticWebpCaretBottom4xWebp, map[string]*bintree{}},
					"caret-bottom-6x.webp":             &bintree{dataWebStaticWebpCaretBottom6xWebp, map[string]*bintree{}},
					"caret-bottom-8x.webp":             &bintree{dataWebStaticWebpCaretBottom8xWebp, map[string]*bintree{}},
					"caret-bottom.webp":                &bintree{dataWebStaticWebpCaretBottomWebp, map[string]*bintree{}},
					"caret-left-2x.webp":               &bintree{dataWebStaticWebpCaretLeft2xWebp, map[string]*bintree{}},
					"caret-left-3x.webp":               &bintree{dataWebStaticWebpCaretLeft3xWebp, map[string]*bintree{}},
					"caret-left-4x.webp":               &bintree{dataWebStaticWebpCaretLeft4xWebp, map[string]*bintree{}},
					"caret-left-6x.webp":               &bintree{dataWebStaticWebpCaretLeft6xWebp, map[string]*bintree{}},
					"caret-left-8x.webp":               &bintree{dataWebStaticWebpCaretLeft8xWebp, map[string]*bintree{}},
					"caret-left.webp":                  &bintree{dataWebStaticWebpCaretLeftWebp, map[string]*bintree{}},
					"caret-right-2x.webp":              &bintree{dataWebStaticWebpCaretRight2xWebp, map[string]*bintree{}},
					"caret-right-3x.webp":              &bintree{dataWebStaticWebpCaretRight3xWebp, map[string]*bintree{}},
					"caret-right-4x.webp":              &bintree{dataWebStaticWebpCaretRight4xWebp, map[string]*bintree{}},
					"caret-right-6x.webp":              &bintree{dataWebStaticWebpCaretRight6xWebp, map[string]*bintree{}},
					"caret-right-8x.webp":              &bintree{dataWebStaticWebpCaretRight8xWebp, map[string]*bintree{}},
					"caret-right.webp":                 &bintree{dataWebStaticWebpCaretRightWebp, map[string]*bintree{}},
					"caret-top-2x.webp":                &bintree{dataWebStaticWebpCaretTop2xWebp, map[string]*bintree{}},
					"caret-top-3x.webp":                &bintree{dataWebStaticWebpCaretTop3xWebp, map[string]*bintree{}},
					"caret-top-4x.webp":                &bintree{dataWebStaticWebpCaretTop4xWebp, map[string]*bintree{}},
					"caret-top-6x.webp":                &bintree{dataWebStaticWebpCaretTop6xWebp, map[string]*bintree{}},
					"caret-top-8x.webp":                &bintree{dataWebStaticWebpCaretTop8xWebp, map[string]*bintree{}},
					"caret-top.webp":                   &bintree{dataWebStaticWebpCaretTopWebp, map[string]*bintree{}},
					"cart-2x.webp":                     &bintree{dataWebStaticWebpCart2xWebp, map[string]*bintree{}},
					"cart-3x.webp":                     &bintree{dataWebStaticWebpCart3xWebp, map[string]*bintree{}},
					"cart-4x.webp":                     &bintree{dataWebStaticWebpCart4xWebp, map[string]*bintree{}},
					"cart-6x.webp":                     &bintree{dataWebStaticWebpCart6xWebp, map[string]*bintree{}},
					"cart-8x.webp":                     &bintree{dataWebStaticWebpCart8xWebp, map[string]*bintree{}},
					"cart.webp":                        &bintree{dataWebStaticWebpCartWebp, map[string]*bintree{}},
					"chat-2x.webp":                     &bintree{dataWebStaticWebpChat2xWebp, map[string]*bintree{}},
					"chat-3x.webp":                     &bintree{dataWebStaticWebpChat3xWebp, map[string]*bintree{}},
					"chat-4x.webp":                     &bintree{dataWebStaticWebpChat4xWebp, map[string]*bintree{}},
					"chat-6x.webp":                     &bintree{dataWebStaticWebpChat6xWebp, map[string]*bintree{}},
					"chat-8x.webp":                     &bintree{dataWebStaticWebpChat8xWebp, map[string]*bintree{}},
					"chat.webp":                        &bintree{dataWebStaticWebpChatWebp, map[string]*bintree{}},
					"check-2x.webp":                    &bintree{dataWebStaticWebpCheck2xWebp, map[string]*bintree{}},
					"check-3x.webp":                    &bintree{dataWebStaticWebpCheck3xWebp, map[string]*bintree{}},
					"check-4x.webp":                    &bintree{dataWebStaticWebpCheck4xWebp, map[string]*bintree{}},
					"check-6x.webp":                    &bintree{dataWebStaticWebpCheck6xWebp, map[string]*bintree{}},
					"check-8x.webp":                    &bintree{dataWebStaticWebpCheck8xWebp, map[string]*bintree{}},
					"check.webp":                       &bintree{dataWebStaticWebpCheckWebp, map[string]*bintree{}},
					"chevron-bottom-2x.webp":           &bintree{dataWebStaticWebpChevronBottom2xWebp, map[string]*bintree{}},
					"chevron-bottom-3x.webp":           &bintree{dataWebStaticWebpChevronBottom3xWebp, map[string]*bintree{}},
					"chevron-bottom-4x.webp":           &bintree{dataWebStaticWebpChevronBottom4xWebp, map[string]*bintree{}},
					"chevron-bottom-6x.webp":           &bintree{dataWebStaticWebpChevronBottom6xWebp, map[string]*bintree{}},
					"chevron-bottom-8x.webp":           &bintree{dataWebStaticWebpChevronBottom8xWebp, map[string]*bintree{}},
					"chevron-bottom.webp":              &bintree{dataWebStaticWebpChevronBottomWebp, map[string]*bintree{}},
					"chevron-left-2x.webp":             &bintree{dataWebStaticWebpChevronLeft2xWebp, map[string]*bintree{}},
					"chevron-left-3x.webp":             &bintree{dataWebStaticWebpChevronLeft3xWebp, map[string]*bintree{}},
					"chevron-left-4x.webp":             &bintree{dataWebStaticWebpChevronLeft4xWebp, map[string]*bintree{}},
					"chevron-left-6x.webp":             &bintree{dataWebStaticWebpChevronLeft6xWebp, map[string]*bintree{}},
					"chevron-left-8x.webp":             &bintree{dataWebStaticWebpChevronLeft8xWebp, map[string]*bintree{}},
					"chevron-left.webp":                &bintree{dataWebStaticWebpChevronLeftWebp, map[string]*bintree{}},
					"chevron-right-2x.webp":            &bintree{dataWebStaticWebpChevronRight2xWebp, map[string]*bintree{}},
					"chevron-right-3x.webp":            &bintree{dataWebStaticWebpChevronRight3xWebp, map[string]*bintree{}},
					"chevron-right-4x.webp":            &bintree{dataWebStaticWebpChevronRight4xWebp, map[string]*bintree{}},
					"chevron-right-6x.webp":            &bintree{dataWebStaticWebpChevronRight6xWebp, map[string]*bintree{}},
					"chevron-right-8x.webp":            &bintree{dataWebStaticWebpChevronRight8xWebp, map[string]*bintree{}},
					"chevron-right.webp":               &bintree{dataWebStaticWebpChevronRightWebp, map[string]*bintree{}},
					"chevron-top-2x.webp":              &bintree{dataWebStaticWebpChevronTop2xWebp, map[string]*bintree{}},
					"chevron-top-3x.webp":              &bintree{dataWebStaticWebpChevronTop3xWebp, map[string]*bintree{}},
					"chevron-top-4x.webp":              &bintree{dataWebStaticWebpChevronTop4xWebp, map[string]*bintree{}},
					"chevron-top-6x.webp":              &bintree{dataWebStaticWebpChevronTop6xWebp, map[string]*bintree{}},
					"chevron-top-8x.webp":              &bintree{dataWebStaticWebpChevronTop8xWebp, map[string]*bintree{}},
					"chevron-top.webp":                 &bintree{dataWebStaticWebpChevronTopWebp, map[string]*bintree{}},
					"circle-check-2x.webp":             &bintree{dataWebStaticWebpCircleCheck2xWebp, map[string]*bintree{}},
					"circle-check-3x.webp":             &bintree{dataWebStaticWebpCircleCheck3xWebp, map[string]*bintree{}},
					"circle-check-4x.webp":             &bintree{dataWebStaticWebpCircleCheck4xWebp, map[string]*bintree{}},
					"circle-check-6x.webp":             &bintree{dataWebStaticWebpCircleCheck6xWebp, map[string]*bintree{}},
					"circle-check-8x.webp":             &bintree{dataWebStaticWebpCircleCheck8xWebp, map[string]*bintree{}},
					"circle-check.webp":                &bintree{dataWebStaticWebpCircleCheckWebp, map[string]*bintree{}},
					"circle-x-2x.webp":                 &bintree{dataWebStaticWebpCircleX2xWebp, map[string]*bintree{}},
					"circle-x-3x.webp":                 &bintree{dataWebStaticWebpCircleX3xWebp, map[string]*bintree{}},
					"circle-x-4x.webp":                 &bintree{dataWebStaticWebpCircleX4xWebp, map[string]*bintree{}},
					"circle-x-6x.webp":                 &bintree{dataWebStaticWebpCircleX6xWebp, map[string]*bintree{}},
					"circle-x-8x.webp":                 &bintree{dataWebStaticWebpCircleX8xWebp, map[string]*bintree{}},
					"circle-x.webp":                    &bintree{dataWebStaticWebpCircleXWebp, map[string]*bintree{}},
					"clipboard-2x.webp":                &bintree{dataWebStaticWebpClipboard2xWebp, map[string]*bintree{}},
					"clipboard-3x.webp":                &bintree{dataWebStaticWebpClipboard3xWebp, map[string]*bintree{}},
					"clipboard-4x.webp":                &bintree{dataWebStaticWebpClipboard4xWebp, map[string]*bintree{}},
					"clipboard-6x.webp":                &bintree{dataWebStaticWebpClipboard6xWebp, map[string]*bintree{}},
					"clipboard-8x.webp":                &bintree{dataWebStaticWebpClipboard8xWebp, map[string]*bintree{}},
					"clipboard.webp":                   &bintree{dataWebStaticWebpClipboardWebp, map[string]*bintree{}},
					"clock-2x.webp":                    &bintree{dataWebStaticWebpClock2xWebp, map[string]*bintree{}},
					"clock-3x.webp":                    &bintree{dataWebStaticWebpClock3xWebp, map[string]*bintree{}},
					"clock-4x.webp":                    &bintree{dataWebStaticWebpClock4xWebp, map[string]*bintree{}},
					"clock-6x.webp":                    &bintree{dataWebStaticWebpClock6xWebp, map[string]*bintree{}},
					"clock-8x.webp":                    &bintree{dataWebStaticWebpClock8xWebp, map[string]*bintree{}},
					"clock.webp":                       &bintree{dataWebStaticWebpClockWebp, map[string]*bintree{}},
					"cloud-2x.webp":                    &bintree{dataWebStaticWebpCloud2xWebp, map[string]*bintree{}},
					"cloud-3x.webp":                    &bintree{dataWebStaticWebpCloud3xWebp, map[string]*bintree{}},
					"cloud-4x.webp":                    &bintree{dataWebStaticWebpCloud4xWebp, map[string]*bintree{}},
					"cloud-6x.webp":                    &bintree{dataWebStaticWebpCloud6xWebp, map[string]*bintree{}},
					"cloud-8x.webp":                    &bintree{dataWebStaticWebpCloud8xWebp, map[string]*bintree{}},
					"cloud-download-2x.webp":           &bintree{dataWebStaticWebpCloudDownload2xWebp, map[string]*bintree{}},
					"cloud-download-3x.webp":           &bintree{dataWebStaticWebpCloudDownload3xWebp, map[string]*bintree{}},
					"cloud-download-4x.webp":           &bintree{dataWebStaticWebpCloudDownload4xWebp, map[string]*bintree{}},
					"cloud-download-6x.webp":           &bintree{dataWebStaticWebpCloudDownload6xWebp, map[string]*bintree{}},
					"cloud-download-8x.webp":           &bintree{dataWebStaticWebpCloudDownload8xWebp, map[string]*bintree{}},
					"cloud-download.webp":              &bintree{dataWebStaticWebpCloudDownloadWebp, map[string]*bintree{}},
					"cloud-upload-2x.webp":             &bintree{dataWebStaticWebpCloudUpload2xWebp, map[string]*bintree{}},
					"cloud-upload-3x.webp":             &bintree{dataWebStaticWebpCloudUpload3xWebp, map[string]*bintree{}},
					"cloud-upload-4x.webp":             &bintree{dataWebStaticWebpCloudUpload4xWebp, map[string]*bintree{}},
					"cloud-upload-6x.webp":             &bintree{dataWebStaticWebpCloudUpload6xWebp, map[string]*bintree{}},
					"cloud-upload-8x.webp":             &bintree{dataWebStaticWebpCloudUpload8xWebp, map[string]*bintree{}},
					"cloud-upload.webp":                &bintree{dataWebStaticWebpCloudUploadWebp, map[string]*bintree{}},
					"cloud.webp":                       &bintree{dataWebStaticWebpCloudWebp, map[string]*bintree{}},
					"cloudy-2x.webp":                   &bintree{dataWebStaticWebpCloudy2xWebp, map[string]*bintree{}},
					"cloudy-3x.webp":                   &bintree{dataWebStaticWebpCloudy3xWebp, map[string]*bintree{}},
					"cloudy-4x.webp":                   &bintree{dataWebStaticWebpCloudy4xWebp, map[string]*bintree{}},
					"cloudy-6x.webp":                   &bintree{dataWebStaticWebpCloudy6xWebp, map[string]*bintree{}},
					"cloudy-8x.webp":                   &bintree{dataWebStaticWebpCloudy8xWebp, map[string]*bintree{}},
					"cloudy.webp":                      &bintree{dataWebStaticWebpCloudyWebp, map[string]*bintree{}},
					"code-2x.webp":                     &bintree{dataWebStaticWebpCode2xWebp, map[string]*bintree{}},
					"code-3x.webp":                     &bintree{dataWebStaticWebpCode3xWebp, map[string]*bintree{}},
					"code-4x.webp":                     &bintree{dataWebStaticWebpCode4xWebp, map[string]*bintree{}},
					"code-6x.webp":                     &bintree{dataWebStaticWebpCode6xWebp, map[string]*bintree{}},
					"code-8x.webp":                     &bintree{dataWebStaticWebpCode8xWebp, map[string]*bintree{}},
					"code.webp":                        &bintree{dataWebStaticWebpCodeWebp, map[string]*bintree{}},
					"cog-2x.webp":                      &bintree{dataWebStaticWebpCog2xWebp, map[string]*bintree{}},
					"cog-3x.webp":                      &bintree{dataWebStaticWebpCog3xWebp, map[string]*bintree{}},
					"cog-4x.webp":                      &bintree{dataWebStaticWebpCog4xWebp, map[string]*bintree{}},
					"cog-6x.webp":                      &bintree{dataWebStaticWebpCog6xWebp, map[string]*bintree{}},
					"cog-8x.webp":                      &bintree{dataWebStaticWebpCog8xWebp, map[string]*bintree{}},
					"cog.webp":                         &bintree{dataWebStaticWebpCogWebp, map[string]*bintree{}},
					"collapse-down-2x.webp":            &bintree{dataWebStaticWebpCollapseDown2xWebp, map[string]*bintree{}},
					"collapse-down-3x.webp":            &bintree{dataWebStaticWebpCollapseDown3xWebp, map[string]*bintree{}},
					"collapse-down-4x.webp":            &bintree{dataWebStaticWebpCollapseDown4xWebp, map[string]*bintree{}},
					"collapse-down-6x.webp":            &bintree{dataWebStaticWebpCollapseDown6xWebp, map[string]*bintree{}},
					"collapse-down-8x.webp":            &bintree{dataWebStaticWebpCollapseDown8xWebp, map[string]*bintree{}},
					"collapse-down.webp":               &bintree{dataWebStaticWebpCollapseDownWebp, map[string]*bintree{}},
					"collapse-left-2x.webp":            &bintree{dataWebStaticWebpCollapseLeft2xWebp, map[string]*bintree{}},
					"collapse-left-3x.webp":            &bintree{dataWebStaticWebpCollapseLeft3xWebp, map[string]*bintree{}},
					"collapse-left-4x.webp":            &bintree{dataWebStaticWebpCollapseLeft4xWebp, map[string]*bintree{}},
					"collapse-left-6x.webp":            &bintree{dataWebStaticWebpCollapseLeft6xWebp, map[string]*bintree{}},
					"collapse-left-8x.webp":            &bintree{dataWebStaticWebpCollapseLeft8xWebp, map[string]*bintree{}},
					"collapse-left.webp":               &bintree{dataWebStaticWebpCollapseLeftWebp, map[string]*bintree{}},
					"collapse-right-2x.webp":           &bintree{dataWebStaticWebpCollapseRight2xWebp, map[string]*bintree{}},
					"collapse-right-3x.webp":           &bintree{dataWebStaticWebpCollapseRight3xWebp, map[string]*bintree{}},
					"collapse-right-4x.webp":           &bintree{dataWebStaticWebpCollapseRight4xWebp, map[string]*bintree{}},
					"collapse-right-6x.webp":           &bintree{dataWebStaticWebpCollapseRight6xWebp, map[string]*bintree{}},
					"collapse-right-8x.webp":           &bintree{dataWebStaticWebpCollapseRight8xWebp, map[string]*bintree{}},
					"collapse-right.webp":              &bintree{dataWebStaticWebpCollapseRightWebp, map[string]*bintree{}},
					"collapse-up-2x.webp":              &bintree{dataWebStaticWebpCollapseUp2xWebp, map[string]*bintree{}},
					"collapse-up-3x.webp":              &bintree{dataWebStaticWebpCollapseUp3xWebp, map[string]*bintree{}},
					"collapse-up-4x.webp":              &bintree{dataWebStaticWebpCollapseUp4xWebp, map[string]*bintree{}},
					"collapse-up-6x.webp":              &bintree{dataWebStaticWebpCollapseUp6xWebp, map[string]*bintree{}},
					"collapse-up-8x.webp":              &bintree{dataWebStaticWebpCollapseUp8xWebp, map[string]*bintree{}},
					"collapse-up.webp":                 &bintree{dataWebStaticWebpCollapseUpWebp, map[string]*bintree{}},
					"command-2x.webp":                  &bintree{dataWebStaticWebpCommand2xWebp, map[string]*bintree{}},
					"command-3x.webp":                  &bintree{dataWebStaticWebpCommand3xWebp, map[string]*bintree{}},
					"command-4x.webp":                  &bintree{dataWebStaticWebpCommand4xWebp, map[string]*bintree{}},
					"command-6x.webp":                  &bintree{dataWebStaticWebpCommand6xWebp, map[string]*bintree{}},
					"command-8x.webp":                  &bintree{dataWebStaticWebpCommand8xWebp, map[string]*bintree{}},
					"command.webp":                     &bintree{dataWebStaticWebpCommandWebp, map[string]*bintree{}},
					"comment-square-2x.webp":           &bintree{dataWebStaticWebpCommentSquare2xWebp, map[string]*bintree{}},
					"comment-square-3x.webp":           &bintree{dataWebStaticWebpCommentSquare3xWebp, map[string]*bintree{}},
					"comment-square-4x.webp":           &bintree{dataWebStaticWebpCommentSquare4xWebp, map[string]*bintree{}},
					"comment-square-6x.webp":           &bintree{dataWebStaticWebpCommentSquare6xWebp, map[string]*bintree{}},
					"comment-square-8x.webp":           &bintree{dataWebStaticWebpCommentSquare8xWebp, map[string]*bintree{}},
					"comment-square.webp":              &bintree{dataWebStaticWebpCommentSquareWebp, map[string]*bintree{}},
					"compass-2x.webp":                  &bintree{dataWebStaticWebpCompass2xWebp, map[string]*bintree{}},
					"compass-3x.webp":                  &bintree{dataWebStaticWebpCompass3xWebp, map[string]*bintree{}},
					"compass-4x.webp":                  &bintree{dataWebStaticWebpCompass4xWebp, map[string]*bintree{}},
					"compass-6x.webp":                  &bintree{dataWebStaticWebpCompass6xWebp, map[string]*bintree{}},
					"compass-8x.webp":                  &bintree{dataWebStaticWebpCompass8xWebp, map[string]*bintree{}},
					"compass.webp":                     &bintree{dataWebStaticWebpCompassWebp, map[string]*bintree{}},
					"contrast-2x.webp":                 &bintree{dataWebStaticWebpContrast2xWebp, map[string]*bintree{}},
					"contrast-3x.webp":                 &bintree{dataWebStaticWebpContrast3xWebp, map[string]*bintree{}},
					"contrast-4x.webp":                 &bintree{dataWebStaticWebpContrast4xWebp, map[string]*bintree{}},
					"contrast-6x.webp":                 &bintree{dataWebStaticWebpContrast6xWebp, map[string]*bintree{}},
					"contrast-8x.webp":                 &bintree{dataWebStaticWebpContrast8xWebp, map[string]*bintree{}},
					"contrast.webp":                    &bintree{dataWebStaticWebpContrastWebp, map[string]*bintree{}},
					"copywriting-2x.webp":              &bintree{dataWebStaticWebpCopywriting2xWebp, map[string]*bintree{}},
					"copywriting-3x.webp":              &bintree{dataWebStaticWebpCopywriting3xWebp, map[string]*bintree{}},
					"copywriting-4x.webp":              &bintree{dataWebStaticWebpCopywriting4xWebp, map[string]*bintree{}},
					"copywriting-6x.webp":              &bintree{dataWebStaticWebpCopywriting6xWebp, map[string]*bintree{}},
					"copywriting-8x.webp":              &bintree{dataWebStaticWebpCopywriting8xWebp, map[string]*bintree{}},
					"copywriting.webp":                 &bintree{dataWebStaticWebpCopywritingWebp, map[string]*bintree{}},
					"credit-card-2x.webp":              &bintree{dataWebStaticWebpCreditCard2xWebp, map[string]*bintree{}},
					"credit-card-3x.webp":              &bintree{dataWebStaticWebpCreditCard3xWebp, map[string]*bintree{}},
					"credit-card-4x.webp":              &bintree{dataWebStaticWebpCreditCard4xWebp, map[string]*bintree{}},
					"credit-card-6x.webp":              &bintree{dataWebStaticWebpCreditCard6xWebp, map[string]*bintree{}},
					"credit-card-8x.webp":              &bintree{dataWebStaticWebpCreditCard8xWebp, map[string]*bintree{}},
					"credit-card.webp":                 &bintree{dataWebStaticWebpCreditCardWebp, map[string]*bintree{}},
					"crop-2x.webp":                     &bintree{dataWebStaticWebpCrop2xWebp, map[string]*bintree{}},
					"crop-3x.webp":                     &bintree{dataWebStaticWebpCrop3xWebp, map[string]*bintree{}},
					"crop-4x.webp":                     &bintree{dataWebStaticWebpCrop4xWebp, map[string]*bintree{}},
					"crop-6x.webp":                     &bintree{dataWebStaticWebpCrop6xWebp, map[string]*bintree{}},
					"crop-8x.webp":                     &bintree{dataWebStaticWebpCrop8xWebp, map[string]*bintree{}},
					"crop.webp":                        &bintree{dataWebStaticWebpCropWebp, map[string]*bintree{}},
					"dashboard-2x.webp":                &bintree{dataWebStaticWebpDashboard2xWebp, map[string]*bintree{}},
					"dashboard-3x.webp":                &bintree{dataWebStaticWebpDashboard3xWebp, map[string]*bintree{}},
					"dashboard-4x.webp":                &bintree{dataWebStaticWebpDashboard4xWebp, map[string]*bintree{}},
					"dashboard-6x.webp":                &bintree{dataWebStaticWebpDashboard6xWebp, map[string]*bintree{}},
					"dashboard-8x.webp":                &bintree{dataWebStaticWebpDashboard8xWebp, map[string]*bintree{}},
					"dashboard.webp":                   &bintree{dataWebStaticWebpDashboardWebp, map[string]*bintree{}},
					"data-transfer-download-2x.webp":   &bintree{dataWebStaticWebpDataTransferDownload2xWebp, map[string]*bintree{}},
					"data-transfer-download-3x.webp":   &bintree{dataWebStaticWebpDataTransferDownload3xWebp, map[string]*bintree{}},
					"data-transfer-download-4x.webp":   &bintree{dataWebStaticWebpDataTransferDownload4xWebp, map[string]*bintree{}},
					"data-transfer-download-6x.webp":   &bintree{dataWebStaticWebpDataTransferDownload6xWebp, map[string]*bintree{}},
					"data-transfer-download-8x.webp":   &bintree{dataWebStaticWebpDataTransferDownload8xWebp, map[string]*bintree{}},
					"data-transfer-download.webp":      &bintree{dataWebStaticWebpDataTransferDownloadWebp, map[string]*bintree{}},
					"data-transfer-upload-2x.webp":     &bintree{dataWebStaticWebpDataTransferUpload2xWebp, map[string]*bintree{}},
					"data-transfer-upload-3x.webp":     &bintree{dataWebStaticWebpDataTransferUpload3xWebp, map[string]*bintree{}},
					"data-transfer-upload-4x.webp":     &bintree{dataWebStaticWebpDataTransferUpload4xWebp, map[string]*bintree{}},
					"data-transfer-upload-6x.webp":     &bintree{dataWebStaticWebpDataTransferUpload6xWebp, map[string]*bintree{}},
					"data-transfer-upload-8x.webp":     &bintree{dataWebStaticWebpDataTransferUpload8xWebp, map[string]*bintree{}},
					"data-transfer-upload.webp":        &bintree{dataWebStaticWebpDataTransferUploadWebp, map[string]*bintree{}},
					"delete-2x.webp":                   &bintree{dataWebStaticWebpDelete2xWebp, map[string]*bintree{}},
					"delete-3x.webp":                   &bintree{dataWebStaticWebpDelete3xWebp, map[string]*bintree{}},
					"delete-4x.webp":                   &bintree{dataWebStaticWebpDelete4xWebp, map[string]*bintree{}},
					"delete-6x.webp":                   &bintree{dataWebStaticWebpDelete6xWebp, map[string]*bintree{}},
					"delete-8x.webp":                   &bintree{dataWebStaticWebpDelete8xWebp, map[string]*bintree{}},
					"delete.webp":                      &bintree{dataWebStaticWebpDeleteWebp, map[string]*bintree{}},
					"dial-2x.webp":                     &bintree{dataWebStaticWebpDial2xWebp, map[string]*bintree{}},
					"dial-3x.webp":                     &bintree{dataWebStaticWebpDial3xWebp, map[string]*bintree{}},
					"dial-4x.webp":                     &bintree{dataWebStaticWebpDial4xWebp, map[string]*bintree{}},
					"dial-6x.webp":                     &bintree{dataWebStaticWebpDial6xWebp, map[string]*bintree{}},
					"dial-8x.webp":                     &bintree{dataWebStaticWebpDial8xWebp, map[string]*bintree{}},
					"dial.webp":                        &bintree{dataWebStaticWebpDialWebp, map[string]*bintree{}},
					"document-2x.webp":                 &bintree{dataWebStaticWebpDocument2xWebp, map[string]*bintree{}},
					"document-3x.webp":                 &bintree{dataWebStaticWebpDocument3xWebp, map[string]*bintree{}},
					"document-4x.webp":                 &bintree{dataWebStaticWebpDocument4xWebp, map[string]*bintree{}},
					"document-6x.webp":                 &bintree{dataWebStaticWebpDocument6xWebp, map[string]*bintree{}},
					"document-8x.webp":                 &bintree{dataWebStaticWebpDocument8xWebp, map[string]*bintree{}},
					"document.webp":                    &bintree{dataWebStaticWebpDocumentWebp, map[string]*bintree{}},
					"dollar-2x.webp":                   &bintree{dataWebStaticWebpDollar2xWebp, map[string]*bintree{}},
					"dollar-3x.webp":                   &bintree{dataWebStaticWebpDollar3xWebp, map[string]*bintree{}},
					"dollar-4x.webp":                   &bintree{dataWebStaticWebpDollar4xWebp, map[string]*bintree{}},
					"dollar-6x.webp":                   &bintree{dataWebStaticWebpDollar6xWebp, map[string]*bintree{}},
					"dollar-8x.webp":                   &bintree{dataWebStaticWebpDollar8xWebp, map[string]*bintree{}},
					"dollar.webp":                      &bintree{dataWebStaticWebpDollarWebp, map[string]*bintree{}},
					"double-quote-sans-left-2x.webp":   &bintree{dataWebStaticWebpDoubleQuoteSansLeft2xWebp, map[string]*bintree{}},
					"double-quote-sans-left-3x.webp":   &bintree{dataWebStaticWebpDoubleQuoteSansLeft3xWebp, map[string]*bintree{}},
					"double-quote-sans-left-4x.webp":   &bintree{dataWebStaticWebpDoubleQuoteSansLeft4xWebp, map[string]*bintree{}},
					"double-quote-sans-left-6x.webp":   &bintree{dataWebStaticWebpDoubleQuoteSansLeft6xWebp, map[string]*bintree{}},
					"double-quote-sans-left-8x.webp":   &bintree{dataWebStaticWebpDoubleQuoteSansLeft8xWebp, map[string]*bintree{}},
					"double-quote-sans-left.webp":      &bintree{dataWebStaticWebpDoubleQuoteSansLeftWebp, map[string]*bintree{}},
					"double-quote-sans-right-2x.webp":  &bintree{dataWebStaticWebpDoubleQuoteSansRight2xWebp, map[string]*bintree{}},
					"double-quote-sans-right-3x.webp":  &bintree{dataWebStaticWebpDoubleQuoteSansRight3xWebp, map[string]*bintree{}},
					"double-quote-sans-right-4x.webp":  &bintree{dataWebStaticWebpDoubleQuoteSansRight4xWebp, map[string]*bintree{}},
					"double-quote-sans-right-6x.webp":  &bintree{dataWebStaticWebpDoubleQuoteSansRight6xWebp, map[string]*bintree{}},
					"double-quote-sans-right-8x.webp":  &bintree{dataWebStaticWebpDoubleQuoteSansRight8xWebp, map[string]*bintree{}},
					"double-quote-sans-right.webp":     &bintree{dataWebStaticWebpDoubleQuoteSansRightWebp, map[string]*bintree{}},
					"double-quote-serif-left-2x.webp":  &bintree{dataWebStaticWebpDoubleQuoteSerifLeft2xWebp, map[string]*bintree{}},
					"double-quote-serif-left-3x.webp":  &bintree{dataWebStaticWebpDoubleQuoteSerifLeft3xWebp, map[string]*bintree{}},
					"double-quote-serif-left-4x.webp":  &bintree{dataWebStaticWebpDoubleQuoteSerifLeft4xWebp, map[string]*bintree{}},
					"double-quote-serif-left-6x.webp":  &bintree{dataWebStaticWebpDoubleQuoteSerifLeft6xWebp, map[string]*bintree{}},
					"double-quote-serif-left-8x.webp":  &bintree{dataWebStaticWebpDoubleQuoteSerifLeft8xWebp, map[string]*bintree{}},
					"double-quote-serif-left.webp":     &bintree{dataWebStaticWebpDoubleQuoteSerifLeftWebp, map[string]*bintree{}},
					"double-quote-serif-right-2x.webp": &bintree{dataWebStaticWebpDoubleQuoteSerifRight2xWebp, map[string]*bintree{}},
					"double-quote-serif-right-3x.webp": &bintree{dataWebStaticWebpDoubleQuoteSerifRight3xWebp, map[string]*bintree{}},
					"double-quote-serif-right-4x.webp": &bintree{dataWebStaticWebpDoubleQuoteSerifRight4xWebp, map[string]*bintree{}},
					"double-quote-serif-right-6x.webp": &bintree{dataWebStaticWebpDoubleQuoteSerifRight6xWebp, map[string]*bintree{}},
					"double-quote-serif-right-8x.webp": &bintree{dataWebStaticWebpDoubleQuoteSerifRight8xWebp, map[string]*bintree{}},
					"double-quote-serif-right.webp":    &bintree{dataWebStaticWebpDoubleQuoteSerifRightWebp, map[string]*bintree{}},
					"droplet-2x.webp":                  &bintree{dataWebStaticWebpDroplet2xWebp, map[string]*bintree{}},
					"droplet-3x.webp":                  &bintree{dataWebStaticWebpDroplet3xWebp, map[string]*bintree{}},
					"droplet-4x.webp":                  &bintree{dataWebStaticWebpDroplet4xWebp, map[string]*bintree{}},
					"droplet-6x.webp":                  &bintree{dataWebStaticWebpDroplet6xWebp, map[string]*bintree{}},
					"droplet-8x.webp":                  &bintree{dataWebStaticWebpDroplet8xWebp, map[string]*bintree{}},
					"droplet.webp":                     &bintree{dataWebStaticWebpDropletWebp, map[string]*bintree{}},
					"eject-2x.webp":                    &bintree{dataWebStaticWebpEject2xWebp, map[string]*bintree{}},
					"eject-3x.webp":                    &bintree{dataWebStaticWebpEject3xWebp, map[string]*bintree{}},
					"eject-4x.webp":                    &bintree{dataWebStaticWebpEject4xWebp, map[string]*bintree{}},
					"eject-6x.webp":                    &bintree{dataWebStaticWebpEject6xWebp, map[string]*bintree{}},
					"eject-8x.webp":                    &bintree{dataWebStaticWebpEject8xWebp, map[string]*bintree{}},
					"eject.webp":                       &bintree{dataWebStaticWebpEjectWebp, map[string]*bintree{}},
					"elevator-2x.webp":                 &bintree{dataWebStaticWebpElevator2xWebp, map[string]*bintree{}},
					"elevator-3x.webp":                 &bintree{dataWebStaticWebpElevator3xWebp, map[string]*bintree{}},
					"elevator-4x.webp":                 &bintree{dataWebStaticWebpElevator4xWebp, map[string]*bintree{}},
					"elevator-6x.webp":                 &bintree{dataWebStaticWebpElevator6xWebp, map[string]*bintree{}},
					"elevator-8x.webp":                 &bintree{dataWebStaticWebpElevator8xWebp, map[string]*bintree{}},
					"elevator.webp":                    &bintree{dataWebStaticWebpElevatorWebp, map[string]*bintree{}},
					"ellipses-2x.webp":                 &bintree{dataWebStaticWebpEllipses2xWebp, map[string]*bintree{}},
					"ellipses-3x.webp":                 &bintree{dataWebStaticWebpEllipses3xWebp, map[string]*bintree{}},
					"ellipses-4x.webp":                 &bintree{dataWebStaticWebpEllipses4xWebp, map[string]*bintree{}},
					"ellipses-6x.webp":                 &bintree{dataWebStaticWebpEllipses6xWebp, map[string]*bintree{}},
					"ellipses-8x.webp":                 &bintree{dataWebStaticWebpEllipses8xWebp, map[string]*bintree{}},
					"ellipses.webp":                    &bintree{dataWebStaticWebpEllipsesWebp, map[string]*bintree{}},
					"envelope-closed-2x.webp":          &bintree{dataWebStaticWebpEnvelopeClosed2xWebp, map[string]*bintree{}},
					"envelope-closed-3x.webp":          &bintree{dataWebStaticWebpEnvelopeClosed3xWebp, map[string]*bintree{}},
					"envelope-closed-4x.webp":          &bintree{dataWebStaticWebpEnvelopeClosed4xWebp, map[string]*bintree{}},
					"envelope-closed-6x.webp":          &bintree{dataWebStaticWebpEnvelopeClosed6xWebp, map[string]*bintree{}},
					"envelope-closed-8x.webp":          &bintree{dataWebStaticWebpEnvelopeClosed8xWebp, map[string]*bintree{}},
					"envelope-closed.webp":             &bintree{dataWebStaticWebpEnvelopeClosedWebp, map[string]*bintree{}},
					"envelope-open-2x.webp":            &bintree{dataWebStaticWebpEnvelopeOpen2xWebp, map[string]*bintree{}},
					"envelope-open-3x.webp":            &bintree{dataWebStaticWebpEnvelopeOpen3xWebp, map[string]*bintree{}},
					"envelope-open-4x.webp":            &bintree{dataWebStaticWebpEnvelopeOpen4xWebp, map[string]*bintree{}},
					"envelope-open-6x.webp":            &bintree{dataWebStaticWebpEnvelopeOpen6xWebp, map[string]*bintree{}},
					"envelope-open-8x.webp":            &bintree{dataWebStaticWebpEnvelopeOpen8xWebp, map[string]*bintree{}},
					"envelope-open.webp":               &bintree{dataWebStaticWebpEnvelopeOpenWebp, map[string]*bintree{}},
					"euro-2x.webp":                     &bintree{dataWebStaticWebpEuro2xWebp, map[string]*bintree{}},
					"euro-3x.webp":                     &bintree{dataWebStaticWebpEuro3xWebp, map[string]*bintree{}},
					"euro-4x.webp":                     &bintree{dataWebStaticWebpEuro4xWebp, map[string]*bintree{}},
					"euro-6x.webp":                     &bintree{dataWebStaticWebpEuro6xWebp, map[string]*bintree{}},
					"euro-8x.webp":                     &bintree{dataWebStaticWebpEuro8xWebp, map[string]*bintree{}},
					"euro.webp":                        &bintree{dataWebStaticWebpEuroWebp, map[string]*bintree{}},
					"excerpt-2x.webp":                  &bintree{dataWebStaticWebpExcerpt2xWebp, map[string]*bintree{}},
					"excerpt-3x.webp":                  &bintree{dataWebStaticWebpExcerpt3xWebp, map[string]*bintree{}},
					"excerpt-4x.webp":                  &bintree{dataWebStaticWebpExcerpt4xWebp, map[string]*bintree{}},
					"excerpt-6x.webp":                  &bintree{dataWebStaticWebpExcerpt6xWebp, map[string]*bintree{}},
					"excerpt-8x.webp":                  &bintree{dataWebStaticWebpExcerpt8xWebp, map[string]*bintree{}},
					"excerpt.webp":                     &bintree{dataWebStaticWebpExcerptWebp, map[string]*bintree{}},
					"expand-down-2x.webp":              &bintree{dataWebStaticWebpExpandDown2xWebp, map[string]*bintree{}},
					"expand-down-3x.webp":              &bintree{dataWebStaticWebpExpandDown3xWebp, map[string]*bintree{}},
					"expand-down-4x.webp":              &bintree{dataWebStaticWebpExpandDown4xWebp, map[string]*bintree{}},
					"expand-down-6x.webp":              &bintree{dataWebStaticWebpExpandDown6xWebp, map[string]*bintree{}},
					"expand-down-8x.webp":              &bintree{dataWebStaticWebpExpandDown8xWebp, map[string]*bintree{}},
					"expand-down.webp":                 &bintree{dataWebStaticWebpExpandDownWebp, map[string]*bintree{}},
					"expand-left-2x.webp":              &bintree{dataWebStaticWebpExpandLeft2xWebp, map[string]*bintree{}},
					"expand-left-3x.webp":              &bintree{dataWebStaticWebpExpandLeft3xWebp, map[string]*bintree{}},
					"expand-left-4x.webp":              &bintree{dataWebStaticWebpExpandLeft4xWebp, map[string]*bintree{}},
					"expand-left-6x.webp":              &bintree{dataWebStaticWebpExpandLeft6xWebp, map[string]*bintree{}},
					"expand-left-8x.webp":              &bintree{dataWebStaticWebpExpandLeft8xWebp, map[string]*bintree{}},
					"expand-left.webp":                 &bintree{dataWebStaticWebpExpandLeftWebp, map[string]*bintree{}},
					"expand-right-2x.webp":             &bintree{dataWebStaticWebpExpandRight2xWebp, map[string]*bintree{}},
					"expand-right-3x.webp":             &bintree{dataWebStaticWebpExpandRight3xWebp, map[string]*bintree{}},
					"expand-right-4x.webp":             &bintree{dataWebStaticWebpExpandRight4xWebp, map[string]*bintree{}},
					"expand-right-6x.webp":             &bintree{dataWebStaticWebpExpandRight6xWebp, map[string]*bintree{}},
					"expand-right-8x.webp":             &bintree{dataWebStaticWebpExpandRight8xWebp, map[string]*bintree{}},
					"expand-right.webp":                &bintree{dataWebStaticWebpExpandRightWebp, map[string]*bintree{}},
					"expand-up-2x.webp":                &bintree{dataWebStaticWebpExpandUp2xWebp, map[string]*bintree{}},
					"expand-up-3x.webp":                &bintree{dataWebStaticWebpExpandUp3xWebp, map[string]*bintree{}},
					"expand-up-4x.webp":                &bintree{dataWebStaticWebpExpandUp4xWebp, map[string]*bintree{}},
					"expand-up-6x.webp":                &bintree{dataWebStaticWebpExpandUp6xWebp, map[string]*bintree{}},
					"expand-up-8x.webp":                &bintree{dataWebStaticWebpExpandUp8xWebp, map[string]*bintree{}},
					"expand-up.webp":                   &bintree{dataWebStaticWebpExpandUpWebp, map[string]*bintree{}},
					"external-link-2x.webp":            &bintree{dataWebStaticWebpExternalLink2xWebp, map[string]*bintree{}},
					"external-link-3x.webp":            &bintree{dataWebStaticWebpExternalLink3xWebp, map[string]*bintree{}},
					"external-link-4x.webp":            &bintree{dataWebStaticWebpExternalLink4xWebp, map[string]*bintree{}},
					"external-link-6x.webp":            &bintree{dataWebStaticWebpExternalLink6xWebp, map[string]*bintree{}},
					"external-link-8x.webp":            &bintree{dataWebStaticWebpExternalLink8xWebp, map[string]*bintree{}},
					"external-link.webp":               &bintree{dataWebStaticWebpExternalLinkWebp, map[string]*bintree{}},
					"eye-2x.webp":                      &bintree{dataWebStaticWebpEye2xWebp, map[string]*bintree{}},
					"eye-3x.webp":                      &bintree{dataWebStaticWebpEye3xWebp, map[string]*bintree{}},
					"eye-4x.webp":                      &bintree{dataWebStaticWebpEye4xWebp, map[string]*bintree{}},
					"eye-6x.webp":                      &bintree{dataWebStaticWebpEye6xWebp, map[string]*bintree{}},
					"eye-8x.webp":                      &bintree{dataWebStaticWebpEye8xWebp, map[string]*bintree{}},
					"eye.webp":                         &bintree{dataWebStaticWebpEyeWebp, map[string]*bintree{}},
					"eyedropper-2x.webp":               &bintree{dataWebStaticWebpEyedropper2xWebp, map[string]*bintree{}},
					"eyedropper-3x.webp":               &bintree{dataWebStaticWebpEyedropper3xWebp, map[string]*bintree{}},
					"eyedropper-4x.webp":               &bintree{dataWebStaticWebpEyedropper4xWebp, map[string]*bintree{}},
					"eyedropper-6x.webp":               &bintree{dataWebStaticWebpEyedropper6xWebp, map[string]*bintree{}},
					"eyedropper-8x.webp":               &bintree{dataWebStaticWebpEyedropper8xWebp, map[string]*bintree{}},
					"eyedropper.webp":                  &bintree{dataWebStaticWebpEyedropperWebp, map[string]*bintree{}},
					"file-2x.webp":                     &bintree{dataWebStaticWebpFile2xWebp, map[string]*bintree{}},
					"file-3x.webp":                     &bintree{dataWebStaticWebpFile3xWebp, map[string]*bintree{}},
					"file-4x.webp":                     &bintree{dataWebStaticWebpFile4xWebp, map[string]*bintree{}},
					"file-6x.webp":                     &bintree{dataWebStaticWebpFile6xWebp, map[string]*bintree{}},
					"file-8x.webp":                     &bintree{dataWebStaticWebpFile8xWebp, map[string]*bintree{}},
					"file.webp":                        &bintree{dataWebStaticWebpFileWebp, map[string]*bintree{}},
					"fire-2x.webp":                     &bintree{dataWebStaticWebpFire2xWebp, map[string]*bintree{}},
					"fire-3x.webp":                     &bintree{dataWebStaticWebpFire3xWebp, map[string]*bintree{}},
					"fire-4x.webp":                     &bintree{dataWebStaticWebpFire4xWebp, map[string]*bintree{}},
					"fire-6x.webp":                     &bintree{dataWebStaticWebpFire6xWebp, map[string]*bintree{}},
					"fire-8x.webp":                     &bintree{dataWebStaticWebpFire8xWebp, map[string]*bintree{}},
					"fire.webp":                        &bintree{dataWebStaticWebpFireWebp, map[string]*bintree{}},
					"flag-2x.webp":                     &bintree{dataWebStaticWebpFlag2xWebp, map[string]*bintree{}},
					"flag-3x.webp":                     &bintree{dataWebStaticWebpFlag3xWebp, map[string]*bintree{}},
					"flag-4x.webp":                     &bintree{dataWebStaticWebpFlag4xWebp, map[string]*bintree{}},
					"flag-6x.webp":                     &bintree{dataWebStaticWebpFlag6xWebp, map[string]*bintree{}},
					"flag-8x.webp":                     &bintree{dataWebStaticWebpFlag8xWebp, map[string]*bintree{}},
					"flag.webp":                        &bintree{dataWebStaticWebpFlagWebp, map[string]*bintree{}},
					"flash-2x.webp":                    &bintree{dataWebStaticWebpFlash2xWebp, map[string]*bintree{}},
					"flash-3x.webp":                    &bintree{dataWebStaticWebpFlash3xWebp, map[string]*bintree{}},
					"flash-4x.webp":                    &bintree{dataWebStaticWebpFlash4xWebp, map[string]*bintree{}},
					"flash-6x.webp":                    &bintree{dataWebStaticWebpFlash6xWebp, map[string]*bintree{}},
					"flash-8x.webp":                    &bintree{dataWebStaticWebpFlash8xWebp, map[string]*bintree{}},
					"flash.webp":                       &bintree{dataWebStaticWebpFlashWebp, map[string]*bintree{}},
					"folder-2x.webp":                   &bintree{dataWebStaticWebpFolder2xWebp, map[string]*bintree{}},
					"folder-3x.webp":                   &bintree{dataWebStaticWebpFolder3xWebp, map[string]*bintree{}},
					"folder-4x.webp":                   &bintree{dataWebStaticWebpFolder4xWebp, map[string]*bintree{}},
					"folder-6x.webp":                   &bintree{dataWebStaticWebpFolder6xWebp, map[string]*bintree{}},
					"folder-8x.webp":                   &bintree{dataWebStaticWebpFolder8xWebp, map[string]*bintree{}},
					"folder.webp":                      &bintree{dataWebStaticWebpFolderWebp, map[string]*bintree{}},
					"fork-2x.webp":                     &bintree{dataWebStaticWebpFork2xWebp, map[string]*bintree{}},
					"fork-3x.webp":                     &bintree{dataWebStaticWebpFork3xWebp, map[string]*bintree{}},
					"fork-4x.webp":                     &bintree{dataWebStaticWebpFork4xWebp, map[string]*bintree{}},
					"fork-6x.webp":                     &bintree{dataWebStaticWebpFork6xWebp, map[string]*bintree{}},
					"fork-8x.webp":                     &bintree{dataWebStaticWebpFork8xWebp, map[string]*bintree{}},
					"fork.webp":                        &bintree{dataWebStaticWebpForkWebp, map[string]*bintree{}},
					"fullscreen-enter-2x.webp":         &bintree{dataWebStaticWebpFullscreenEnter2xWebp, map[string]*bintree{}},
					"fullscreen-enter-3x.webp":         &bintree{dataWebStaticWebpFullscreenEnter3xWebp, map[string]*bintree{}},
					"fullscreen-enter-4x.webp":         &bintree{dataWebStaticWebpFullscreenEnter4xWebp, map[string]*bintree{}},
					"fullscreen-enter-6x.webp":         &bintree{dataWebStaticWebpFullscreenEnter6xWebp, map[string]*bintree{}},
					"fullscreen-enter-8x.webp":         &bintree{dataWebStaticWebpFullscreenEnter8xWebp, map[string]*bintree{}},
					"fullscreen-enter.webp":            &bintree{dataWebStaticWebpFullscreenEnterWebp, map[string]*bintree{}},
					"fullscreen-exit-2x.webp":          &bintree{dataWebStaticWebpFullscreenExit2xWebp, map[string]*bintree{}},
					"fullscreen-exit-3x.webp":          &bintree{dataWebStaticWebpFullscreenExit3xWebp, map[string]*bintree{}},
					"fullscreen-exit-4x.webp":          &bintree{dataWebStaticWebpFullscreenExit4xWebp, map[string]*bintree{}},
					"fullscreen-exit-6x.webp":          &bintree{dataWebStaticWebpFullscreenExit6xWebp, map[string]*bintree{}},
					"fullscreen-exit-8x.webp":          &bintree{dataWebStaticWebpFullscreenExit8xWebp, map[string]*bintree{}},
					"fullscreen-exit.webp":             &bintree{dataWebStaticWebpFullscreenExitWebp, map[string]*bintree{}},
					"globe-2x.webp":                    &bintree{dataWebStaticWebpGlobe2xWebp, map[string]*bintree{}},
					"globe-3x.webp":                    &bintree{dataWebStaticWebpGlobe3xWebp, map[string]*bintree{}},
					"globe-4x.webp":                    &bintree{dataWebStaticWebpGlobe4xWebp, map[string]*bintree{}},
					"globe-6x.webp":                    &bintree{dataWebStaticWebpGlobe6xWebp, map[string]*bintree{}},
					"globe-8x.webp":                    &bintree{dataWebStaticWebpGlobe8xWebp, map[string]*bintree{}},
					"globe.webp":                       &bintree{dataWebStaticWebpGlobeWebp, map[string]*bintree{}},
					"graph-2x.webp":                    &bintree{dataWebStaticWebpGraph2xWebp, map[string]*bintree{}},
					"graph-3x.webp":                    &bintree{dataWebStaticWebpGraph3xWebp, map[string]*bintree{}},
					"graph-4x.webp":                    &bintree{dataWebStaticWebpGraph4xWebp, map[string]*bintree{}},
					"graph-6x.webp":                    &bintree{dataWebStaticWebpGraph6xWebp, map[string]*bintree{}},
					"graph-8x.webp":                    &bintree{dataWebStaticWebpGraph8xWebp, map[string]*bintree{}},
					"graph.webp":                       &bintree{dataWebStaticWebpGraphWebp, map[string]*bintree{}},
					"grid-four-up-2x.webp":             &bintree{dataWebStaticWebpGridFourUp2xWebp, map[string]*bintree{}},
					"grid-four-up-3x.webp":             &bintree{dataWebStaticWebpGridFourUp3xWebp, map[string]*bintree{}},
					"grid-four-up-4x.webp":             &bintree{dataWebStaticWebpGridFourUp4xWebp, map[string]*bintree{}},
					"grid-four-up-6x.webp":             &bintree{dataWebStaticWebpGridFourUp6xWebp, map[string]*bintree{}},
					"grid-four-up-8x.webp":             &bintree{dataWebStaticWebpGridFourUp8xWebp, map[string]*bintree{}},
					"grid-four-up.webp":                &bintree{dataWebStaticWebpGridFourUpWebp, map[string]*bintree{}},
					"grid-three-up-2x.webp":            &bintree{dataWebStaticWebpGridThreeUp2xWebp, map[string]*bintree{}},
					"grid-three-up-3x.webp":            &bintree{dataWebStaticWebpGridThreeUp3xWebp, map[string]*bintree{}},
					"grid-three-up-4x.webp":            &bintree{dataWebStaticWebpGridThreeUp4xWebp, map[string]*bintree{}},
					"grid-three-up-6x.webp":            &bintree{dataWebStaticWebpGridThreeUp6xWebp, map[string]*bintree{}},
					"grid-three-up-8x.webp":            &bintree{dataWebStaticWebpGridThreeUp8xWebp, map[string]*bintree{}},
					"grid-three-up.webp":               &bintree{dataWebStaticWebpGridThreeUpWebp, map[string]*bintree{}},
					"grid-two-up-2x.webp":              &bintree{dataWebStaticWebpGridTwoUp2xWebp, map[string]*bintree{}},
					"grid-two-up-3x.webp":              &bintree{dataWebStaticWebpGridTwoUp3xWebp, map[string]*bintree{}},
					"grid-two-up-4x.webp":              &bintree{dataWebStaticWebpGridTwoUp4xWebp, map[string]*bintree{}},
					"grid-two-up-6x.webp":              &bintree{dataWebStaticWebpGridTwoUp6xWebp, map[string]*bintree{}},
					"grid-two-up-8x.webp":              &bintree{dataWebStaticWebpGridTwoUp8xWebp, map[string]*bintree{}},
					"grid-two-up.webp":                 &bintree{dataWebStaticWebpGridTwoUpWebp, map[string]*bintree{}},
					"hard-drive-2x.webp":               &bintree{dataWebStaticWebpHardDrive2xWebp, map[string]*bintree{}},
					"hard-drive-3x.webp":               &bintree{dataWebStaticWebpHardDrive3xWebp, map[string]*bintree{}},
					"hard-drive-4x.webp":               &bintree{dataWebStaticWebpHardDrive4xWebp, map[string]*bintree{}},
					"hard-drive-6x.webp":               &bintree{dataWebStaticWebpHardDrive6xWebp, map[string]*bintree{}},
					"hard-drive-8x.webp":               &bintree{dataWebStaticWebpHardDrive8xWebp, map[string]*bintree{}},
					"hard-drive.webp":                  &bintree{dataWebStaticWebpHardDriveWebp, map[string]*bintree{}},
					"header-2x.webp":                   &bintree{dataWebStaticWebpHeader2xWebp, map[string]*bintree{}},
					"header-3x.webp":                   &bintree{dataWebStaticWebpHeader3xWebp, map[string]*bintree{}},
					"header-4x.webp":                   &bintree{dataWebStaticWebpHeader4xWebp, map[string]*bintree{}},
					"header-6x.webp":                   &bintree{dataWebStaticWebpHeader6xWebp, map[string]*bintree{}},
					"header-8x.webp":                   &bintree{dataWebStaticWebpHeader8xWebp, map[string]*bintree{}},
					"header.webp":                      &bintree{dataWebStaticWebpHeaderWebp, map[string]*bintree{}},
					"headphones-2x.webp":               &bintree{dataWebStaticWebpHeadphones2xWebp, map[string]*bintree{}},
					"headphones-3x.webp":               &bintree{dataWebStaticWebpHeadphones3xWebp, map[string]*bintree{}},
					"headphones-4x.webp":               &bintree{dataWebStaticWebpHeadphones4xWebp, map[string]*bintree{}},
					"headphones-6x.webp":               &bintree{dataWebStaticWebpHeadphones6xWebp, map[string]*bintree{}},
					"headphones-8x.webp":               &bintree{dataWebStaticWebpHeadphones8xWebp, map[string]*bintree{}},
					"headphones.webp":                  &bintree{dataWebStaticWebpHeadphonesWebp, map[string]*bintree{}},
					"heart-2x.webp":                    &bintree{dataWebStaticWebpHeart2xWebp, map[string]*bintree{}},
					"heart-3x.webp":                    &bintree{dataWebStaticWebpHeart3xWebp, map[string]*bintree{}},
					"heart-4x.webp":                    &bintree{dataWebStaticWebpHeart4xWebp, map[string]*bintree{}},
					"heart-6x.webp":                    &bintree{dataWebStaticWebpHeart6xWebp, map[string]*bintree{}},
					"heart-8x.webp":                    &bintree{dataWebStaticWebpHeart8xWebp, map[string]*bintree{}},
					"heart.webp":                       &bintree{dataWebStaticWebpHeartWebp, map[string]*bintree{}},
					"home-2x.webp":                     &bintree{dataWebStaticWebpHome2xWebp, map[string]*bintree{}},
					"home-3x.webp":                     &bintree{dataWebStaticWebpHome3xWebp, map[string]*bintree{}},
					"home-4x.webp":                     &bintree{dataWebStaticWebpHome4xWebp, map[string]*bintree{}},
					"home-6x.webp":                     &bintree{dataWebStaticWebpHome6xWebp, map[string]*bintree{}},
					"home-8x.webp":                     &bintree{dataWebStaticWebpHome8xWebp, map[string]*bintree{}},
					"home.webp":                        &bintree{dataWebStaticWebpHomeWebp, map[string]*bintree{}},
					"image-2x.webp":                    &bintree{dataWebStaticWebpImage2xWebp, map[string]*bintree{}},
					"image-3x.webp":                    &bintree{dataWebStaticWebpImage3xWebp, map[string]*bintree{}},
					"image-4x.webp":                    &bintree{dataWebStaticWebpImage4xWebp, map[string]*bintree{}},
					"image-6x.webp":                    &bintree{dataWebStaticWebpImage6xWebp, map[string]*bintree{}},
					"image-8x.webp":                    &bintree{dataWebStaticWebpImage8xWebp, map[string]*bintree{}},
					"image.webp":                       &bintree{dataWebStaticWebpImageWebp, map[string]*bintree{}},
					"inbox-2x.webp":                    &bintree{dataWebStaticWebpInbox2xWebp, map[string]*bintree{}},
					"inbox-3x.webp":                    &bintree{dataWebStaticWebpInbox3xWebp, map[string]*bintree{}},
					"inbox-4x.webp":                    &bintree{dataWebStaticWebpInbox4xWebp, map[string]*bintree{}},
					"inbox-6x.webp":                    &bintree{dataWebStaticWebpInbox6xWebp, map[string]*bintree{}},
					"inbox-8x.webp":                    &bintree{dataWebStaticWebpInbox8xWebp, map[string]*bintree{}},
					"inbox.webp":                       &bintree{dataWebStaticWebpInboxWebp, map[string]*bintree{}},
					"infinity-2x.webp":                 &bintree{dataWebStaticWebpInfinity2xWebp, map[string]*bintree{}},
					"infinity-3x.webp":                 &bintree{dataWebStaticWebpInfinity3xWebp, map[string]*bintree{}},
					"infinity-4x.webp":                 &bintree{dataWebStaticWebpInfinity4xWebp, map[string]*bintree{}},
					"infinity-6x.webp":                 &bintree{dataWebStaticWebpInfinity6xWebp, map[string]*bintree{}},
					"infinity-8x.webp":                 &bintree{dataWebStaticWebpInfinity8xWebp, map[string]*bintree{}},
					"infinity.webp":                    &bintree{dataWebStaticWebpInfinityWebp, map[string]*bintree{}},
					"info-2x.webp":                     &bintree{dataWebStaticWebpInfo2xWebp, map[string]*bintree{}},
					"info-3x.webp":                     &bintree{dataWebStaticWebpInfo3xWebp, map[string]*bintree{}},
					"info-4x.webp":                     &bintree{dataWebStaticWebpInfo4xWebp, map[string]*bintree{}},
					"info-6x.webp":                     &bintree{dataWebStaticWebpInfo6xWebp, map[string]*bintree{}},
					"info-8x.webp":                     &bintree{dataWebStaticWebpInfo8xWebp, map[string]*bintree{}},
					"info.webp":                        &bintree{dataWebStaticWebpInfoWebp, map[string]*bintree{}},
					"italic-2x.webp":                   &bintree{dataWebStaticWebpItalic2xWebp, map[string]*bintree{}},
					"italic-3x.webp":                   &bintree{dataWebStaticWebpItalic3xWebp, map[string]*bintree{}},
					"italic-4x.webp":                   &bintree{dataWebStaticWebpItalic4xWebp, map[string]*bintree{}},
					"italic-6x.webp":                   &bintree{dataWebStaticWebpItalic6xWebp, map[string]*bintree{}},
					"italic-8x.webp":                   &bintree{dataWebStaticWebpItalic8xWebp, map[string]*bintree{}},
					"italic.webp":                      &bintree{dataWebStaticWebpItalicWebp, map[string]*bintree{}},
					"justify-center-2x.webp":           &bintree{dataWebStaticWebpJustifyCenter2xWebp, map[string]*bintree{}},
					"justify-center-3x.webp":           &bintree{dataWebStaticWebpJustifyCenter3xWebp, map[string]*bintree{}},
					"justify-center-4x.webp":           &bintree{dataWebStaticWebpJustifyCenter4xWebp, map[string]*bintree{}},
					"justify-center-6x.webp":           &bintree{dataWebStaticWebpJustifyCenter6xWebp, map[string]*bintree{}},
					"justify-center-8x.webp":           &bintree{dataWebStaticWebpJustifyCenter8xWebp, map[string]*bintree{}},
					"justify-center.webp":              &bintree{dataWebStaticWebpJustifyCenterWebp, map[string]*bintree{}},
					"justify-left-2x.webp":             &bintree{dataWebStaticWebpJustifyLeft2xWebp, map[string]*bintree{}},
					"justify-left-3x.webp":             &bintree{dataWebStaticWebpJustifyLeft3xWebp, map[string]*bintree{}},
					"justify-left-4x.webp":             &bintree{dataWebStaticWebpJustifyLeft4xWebp, map[string]*bintree{}},
					"justify-left-6x.webp":             &bintree{dataWebStaticWebpJustifyLeft6xWebp, map[string]*bintree{}},
					"justify-left-8x.webp":             &bintree{dataWebStaticWebpJustifyLeft8xWebp, map[string]*bintree{}},
					"justify-left.webp":                &bintree{dataWebStaticWebpJustifyLeftWebp, map[string]*bintree{}},
					"justify-right-2x.webp":            &bintree{dataWebStaticWebpJustifyRight2xWebp, map[string]*bintree{}},
					"justify-right-3x.webp":            &bintree{dataWebStaticWebpJustifyRight3xWebp, map[string]*bintree{}},
					"justify-right-4x.webp":            &bintree{dataWebStaticWebpJustifyRight4xWebp, map[string]*bintree{}},
					"justify-right-6x.webp":            &bintree{dataWebStaticWebpJustifyRight6xWebp, map[string]*bintree{}},
					"justify-right-8x.webp":            &bintree{dataWebStaticWebpJustifyRight8xWebp, map[string]*bintree{}},
					"justify-right.webp":               &bintree{dataWebStaticWebpJustifyRightWebp, map[string]*bintree{}},
					"key-2x.webp":                      &bintree{dataWebStaticWebpKey2xWebp, map[string]*bintree{}},
					"key-3x.webp":                      &bintree{dataWebStaticWebpKey3xWebp, map[string]*bintree{}},
					"key-4x.webp":                      &bintree{dataWebStaticWebpKey4xWebp, map[string]*bintree{}},
					"key-6x.webp":                      &bintree{dataWebStaticWebpKey6xWebp, map[string]*bintree{}},
					"key-8x.webp":                      &bintree{dataWebStaticWebpKey8xWebp, map[string]*bintree{}},
					"key.webp":                         &bintree{dataWebStaticWebpKeyWebp, map[string]*bintree{}},
					"laptop-2x.webp":                   &bintree{dataWebStaticWebpLaptop2xWebp, map[string]*bintree{}},
					"laptop-3x.webp":                   &bintree{dataWebStaticWebpLaptop3xWebp, map[string]*bintree{}},
					"laptop-4x.webp":                   &bintree{dataWebStaticWebpLaptop4xWebp, map[string]*bintree{}},
					"laptop-6x.webp":                   &bintree{dataWebStaticWebpLaptop6xWebp, map[string]*bintree{}},
					"laptop-8x.webp":                   &bintree{dataWebStaticWebpLaptop8xWebp, map[string]*bintree{}},
					"laptop.webp":                      &bintree{dataWebStaticWebpLaptopWebp, map[string]*bintree{}},
					"layers-2x.webp":                   &bintree{dataWebStaticWebpLayers2xWebp, map[string]*bintree{}},
					"layers-3x.webp":                   &bintree{dataWebStaticWebpLayers3xWebp, map[string]*bintree{}},
					"layers-4x.webp":                   &bintree{dataWebStaticWebpLayers4xWebp, map[string]*bintree{}},
					"layers-6x.webp":                   &bintree{dataWebStaticWebpLayers6xWebp, map[string]*bintree{}},
					"layers-8x.webp":                   &bintree{dataWebStaticWebpLayers8xWebp, map[string]*bintree{}},
					"layers.webp":                      &bintree{dataWebStaticWebpLayersWebp, map[string]*bintree{}},
					"lightbulb-2x.webp":                &bintree{dataWebStaticWebpLightbulb2xWebp, map[string]*bintree{}},
					"lightbulb-3x.webp":                &bintree{dataWebStaticWebpLightbulb3xWebp, map[string]*bintree{}},
					"lightbulb-4x.webp":                &bintree{dataWebStaticWebpLightbulb4xWebp, map[string]*bintree{}},
					"lightbulb-6x.webp":                &bintree{dataWebStaticWebpLightbulb6xWebp, map[string]*bintree{}},
					"lightbulb-8x.webp":                &bintree{dataWebStaticWebpLightbulb8xWebp, map[string]*bintree{}},
					"lightbulb.webp":                   &bintree{dataWebStaticWebpLightbulbWebp, map[string]*bintree{}},
					"link-broken-2x.webp":              &bintree{dataWebStaticWebpLinkBroken2xWebp, map[string]*bintree{}},
					"link-broken-3x.webp":              &bintree{dataWebStaticWebpLinkBroken3xWebp, map[string]*bintree{}},
					"link-broken-4x.webp":              &bintree{dataWebStaticWebpLinkBroken4xWebp, map[string]*bintree{}},
					"link-broken-6x.webp":              &bintree{dataWebStaticWebpLinkBroken6xWebp, map[string]*bintree{}},
					"link-broken-8x.webp":              &bintree{dataWebStaticWebpLinkBroken8xWebp, map[string]*bintree{}},
					"link-broken.webp":                 &bintree{dataWebStaticWebpLinkBrokenWebp, map[string]*bintree{}},
					"link-intact-2x.webp":              &bintree{dataWebStaticWebpLinkIntact2xWebp, map[string]*bintree{}},
					"link-intact-3x.webp":              &bintree{dataWebStaticWebpLinkIntact3xWebp, map[string]*bintree{}},
					"link-intact-4x.webp":              &bintree{dataWebStaticWebpLinkIntact4xWebp, map[string]*bintree{}},
					"link-intact-6x.webp":              &bintree{dataWebStaticWebpLinkIntact6xWebp, map[string]*bintree{}},
					"link-intact-8x.webp":              &bintree{dataWebStaticWebpLinkIntact8xWebp, map[string]*bintree{}},
					"link-intact.webp":                 &bintree{dataWebStaticWebpLinkIntactWebp, map[string]*bintree{}},
					"list-2x.webp":                     &bintree{dataWebStaticWebpList2xWebp, map[string]*bintree{}},
					"list-3x.webp":                     &bintree{dataWebStaticWebpList3xWebp, map[string]*bintree{}},
					"list-4x.webp":                     &bintree{dataWebStaticWebpList4xWebp, map[string]*bintree{}},
					"list-6x.webp":                     &bintree{dataWebStaticWebpList6xWebp, map[string]*bintree{}},
					"list-8x.webp":                     &bintree{dataWebStaticWebpList8xWebp, map[string]*bintree{}},
					"list-rich-2x.webp":                &bintree{dataWebStaticWebpListRich2xWebp, map[string]*bintree{}},
					"list-rich-3x.webp":                &bintree{dataWebStaticWebpListRich3xWebp, map[string]*bintree{}},
					"list-rich-4x.webp":                &bintree{dataWebStaticWebpListRich4xWebp, map[string]*bintree{}},
					"list-rich-6x.webp":                &bintree{dataWebStaticWebpListRich6xWebp, map[string]*bintree{}},
					"list-rich-8x.webp":                &bintree{dataWebStaticWebpListRich8xWebp, map[string]*bintree{}},
					"list-rich.webp":                   &bintree{dataWebStaticWebpListRichWebp, map[string]*bintree{}},
					"list.webp":                        &bintree{dataWebStaticWebpListWebp, map[string]*bintree{}},
					"location-2x.webp":                 &bintree{dataWebStaticWebpLocation2xWebp, map[string]*bintree{}},
					"location-3x.webp":                 &bintree{dataWebStaticWebpLocation3xWebp, map[string]*bintree{}},
					"location-4x.webp":                 &bintree{dataWebStaticWebpLocation4xWebp, map[string]*bintree{}},
					"location-6x.webp":                 &bintree{dataWebStaticWebpLocation6xWebp, map[string]*bintree{}},
					"location-8x.webp":                 &bintree{dataWebStaticWebpLocation8xWebp, map[string]*bintree{}},
					"location.webp":                    &bintree{dataWebStaticWebpLocationWebp, map[string]*bintree{}},
					"lock-locked-2x.webp":              &bintree{dataWebStaticWebpLockLocked2xWebp, map[string]*bintree{}},
					"lock-locked-3x.webp":              &bintree{dataWebStaticWebpLockLocked3xWebp, map[string]*bintree{}},
					"lock-locked-4x.webp":              &bintree{dataWebStaticWebpLockLocked4xWebp, map[string]*bintree{}},
					"lock-locked-6x.webp":              &bintree{dataWebStaticWebpLockLocked6xWebp, map[string]*bintree{}},
					"lock-locked-8x.webp":              &bintree{dataWebStaticWebpLockLocked8xWebp, map[string]*bintree{}},
					"lock-locked.webp":                 &bintree{dataWebStaticWebpLockLockedWebp, map[string]*bintree{}},
					"lock-unlocked-2x.webp":            &bintree{dataWebStaticWebpLockUnlocked2xWebp, map[string]*bintree{}},
					"lock-unlocked-3x.webp":            &bintree{dataWebStaticWebpLockUnlocked3xWebp, map[string]*bintree{}},
					"lock-unlocked-4x.webp":            &bintree{dataWebStaticWebpLockUnlocked4xWebp, map[string]*bintree{}},
					"lock-unlocked-6x.webp":            &bintree{dataWebStaticWebpLockUnlocked6xWebp, map[string]*bintree{}},
					"lock-unlocked-8x.webp":            &bintree{dataWebStaticWebpLockUnlocked8xWebp, map[string]*bintree{}},
					"lock-unlocked.webp":               &bintree{dataWebStaticWebpLockUnlockedWebp, map[string]*bintree{}},
					"loop-2x.webp":                     &bintree{dataWebStaticWebpLoop2xWebp, map[string]*bintree{}},
					"loop-3x.webp":                     &bintree{dataWebStaticWebpLoop3xWebp, map[string]*bintree{}},
					"loop-4x.webp":                     &bintree{dataWebStaticWebpLoop4xWebp, map[string]*bintree{}},
					"loop-6x.webp":                     &bintree{dataWebStaticWebpLoop6xWebp, map[string]*bintree{}},
					"loop-8x.webp":                     &bintree{dataWebStaticWebpLoop8xWebp, map[string]*bintree{}},
					"loop-circular-2x.webp":            &bintree{dataWebStaticWebpLoopCircular2xWebp, map[string]*bintree{}},
					"loop-circular-3x.webp":            &bintree{dataWebStaticWebpLoopCircular3xWebp, map[string]*bintree{}},
					"loop-circular-4x.webp":            &bintree{dataWebStaticWebpLoopCircular4xWebp, map[string]*bintree{}},
					"loop-circular-6x.webp":            &bintree{dataWebStaticWebpLoopCircular6xWebp, map[string]*bintree{}},
					"loop-circular-8x.webp":            &bintree{dataWebStaticWebpLoopCircular8xWebp, map[string]*bintree{}},
					"loop-circular.webp":               &bintree{dataWebStaticWebpLoopCircularWebp, map[string]*bintree{}},
					"loop-square-2x.webp":              &bintree{dataWebStaticWebpLoopSquare2xWebp, map[string]*bintree{}},
					"loop-square-3x.webp":              &bintree{dataWebStaticWebpLoopSquare3xWebp, map[string]*bintree{}},
					"loop-square-4x.webp":              &bintree{dataWebStaticWebpLoopSquare4xWebp, map[string]*bintree{}},
					"loop-square-6x.webp":              &bintree{dataWebStaticWebpLoopSquare6xWebp, map[string]*bintree{}},
					"loop-square-8x.webp":              &bintree{dataWebStaticWebpLoopSquare8xWebp, map[string]*bintree{}},
					"loop-square.webp":                 &bintree{dataWebStaticWebpLoopSquareWebp, map[string]*bintree{}},
					"loop.webp":                        &bintree{dataWebStaticWebpLoopWebp, map[string]*bintree{}},
					"magnifying-glass-2x.webp":         &bintree{dataWebStaticWebpMagnifyingGlass2xWebp, map[string]*bintree{}},
					"magnifying-glass-3x.webp":         &bintree{dataWebStaticWebpMagnifyingGlass3xWebp, map[string]*bintree{}},
					"magnifying-glass-4x.webp":         &bintree{dataWebStaticWebpMagnifyingGlass4xWebp, map[string]*bintree{}},
					"magnifying-glass-6x.webp":         &bintree{dataWebStaticWebpMagnifyingGlass6xWebp, map[string]*bintree{}},
					"magnifying-glass-8x.webp":         &bintree{dataWebStaticWebpMagnifyingGlass8xWebp, map[string]*bintree{}},
					"magnifying-glass.webp":            &bintree{dataWebStaticWebpMagnifyingGlassWebp, map[string]*bintree{}},
					"map-2x.webp":                      &bintree{dataWebStaticWebpMap2xWebp, map[string]*bintree{}},
					"map-3x.webp":                      &bintree{dataWebStaticWebpMap3xWebp, map[string]*bintree{}},
					"map-4x.webp":                      &bintree{dataWebStaticWebpMap4xWebp, map[string]*bintree{}},
					"map-6x.webp":                      &bintree{dataWebStaticWebpMap6xWebp, map[string]*bintree{}},
					"map-8x.webp":                      &bintree{dataWebStaticWebpMap8xWebp, map[string]*bintree{}},
					"map-marker-2x.webp":               &bintree{dataWebStaticWebpMapMarker2xWebp, map[string]*bintree{}},
					"map-marker-3x.webp":               &bintree{dataWebStaticWebpMapMarker3xWebp, map[string]*bintree{}},
					"map-marker-4x.webp":               &bintree{dataWebStaticWebpMapMarker4xWebp, map[string]*bintree{}},
					"map-marker-6x.webp":               &bintree{dataWebStaticWebpMapMarker6xWebp, map[string]*bintree{}},
					"map-marker-8x.webp":               &bintree{dataWebStaticWebpMapMarker8xWebp, map[string]*bintree{}},
					"map-marker.webp":                  &bintree{dataWebStaticWebpMapMarkerWebp, map[string]*bintree{}},
					"map.webp":                         &bintree{dataWebStaticWebpMapWebp, map[string]*bintree{}},
					"media-pause-2x.webp":              &bintree{dataWebStaticWebpMediaPause2xWebp, map[string]*bintree{}},
					"media-pause-3x.webp":              &bintree{dataWebStaticWebpMediaPause3xWebp, map[string]*bintree{}},
					"media-pause-4x.webp":              &bintree{dataWebStaticWebpMediaPause4xWebp, map[string]*bintree{}},
					"media-pause-6x.webp":              &bintree{dataWebStaticWebpMediaPause6xWebp, map[string]*bintree{}},
					"media-pause-8x.webp":              &bintree{dataWebStaticWebpMediaPause8xWebp, map[string]*bintree{}},
					"media-pause.webp":                 &bintree{dataWebStaticWebpMediaPauseWebp, map[string]*bintree{}},
					"media-play-2x.webp":               &bintree{dataWebStaticWebpMediaPlay2xWebp, map[string]*bintree{}},
					"media-play-3x.webp":               &bintree{dataWebStaticWebpMediaPlay3xWebp, map[string]*bintree{}},
					"media-play-4x.webp":               &bintree{dataWebStaticWebpMediaPlay4xWebp, map[string]*bintree{}},
					"media-play-6x.webp":               &bintree{dataWebStaticWebpMediaPlay6xWebp, map[string]*bintree{}},
					"media-play-8x.webp":               &bintree{dataWebStaticWebpMediaPlay8xWebp, map[string]*bintree{}},
					"media-play.webp":                  &bintree{dataWebStaticWebpMediaPlayWebp, map[string]*bintree{}},
					"media-record-2x.webp":             &bintree{dataWebStaticWebpMediaRecord2xWebp, map[string]*bintree{}},
					"media-record-3x.webp":             &bintree{dataWebStaticWebpMediaRecord3xWebp, map[string]*bintree{}},
					"media-record-4x.webp":             &bintree{dataWebStaticWebpMediaRecord4xWebp, map[string]*bintree{}},
					"media-record-6x.webp":             &bintree{dataWebStaticWebpMediaRecord6xWebp, map[string]*bintree{}},
					"media-record-8x.webp":             &bintree{dataWebStaticWebpMediaRecord8xWebp, map[string]*bintree{}},
					"media-record.webp":                &bintree{dataWebStaticWebpMediaRecordWebp, map[string]*bintree{}},
					"media-skip-backward-2x.webp":      &bintree{dataWebStaticWebpMediaSkipBackward2xWebp, map[string]*bintree{}},
					"media-skip-backward-3x.webp":      &bintree{dataWebStaticWebpMediaSkipBackward3xWebp, map[string]*bintree{}},
					"media-skip-backward-4x.webp":      &bintree{dataWebStaticWebpMediaSkipBackward4xWebp, map[string]*bintree{}},
					"media-skip-backward-6x.webp":      &bintree{dataWebStaticWebpMediaSkipBackward6xWebp, map[string]*bintree{}},
					"media-skip-backward-8x.webp":      &bintree{dataWebStaticWebpMediaSkipBackward8xWebp, map[string]*bintree{}},
					"media-skip-backward.webp":         &bintree{dataWebStaticWebpMediaSkipBackwardWebp, map[string]*bintree{}},
					"media-skip-forward-2x.webp":       &bintree{dataWebStaticWebpMediaSkipForward2xWebp, map[string]*bintree{}},
					"media-skip-forward-3x.webp":       &bintree{dataWebStaticWebpMediaSkipForward3xWebp, map[string]*bintree{}},
					"media-skip-forward-4x.webp":       &bintree{dataWebStaticWebpMediaSkipForward4xWebp, map[string]*bintree{}},
					"media-skip-forward-6x.webp":       &bintree{dataWebStaticWebpMediaSkipForward6xWebp, map[string]*bintree{}},
					"media-skip-forward-8x.webp":       &bintree{dataWebStaticWebpMediaSkipForward8xWebp, map[string]*bintree{}},
					"media-skip-forward.webp":          &bintree{dataWebStaticWebpMediaSkipForwardWebp, map[string]*bintree{}},
					"media-step-backward-2x.webp":      &bintree{dataWebStaticWebpMediaStepBackward2xWebp, map[string]*bintree{}},
					"media-step-backward-3x.webp":      &bintree{dataWebStaticWebpMediaStepBackward3xWebp, map[string]*bintree{}},
					"media-step-backward-4x.webp":      &bintree{dataWebStaticWebpMediaStepBackward4xWebp, map[string]*bintree{}},
					"media-step-backward-6x.webp":      &bintree{dataWebStaticWebpMediaStepBackward6xWebp, map[string]*bintree{}},
					"media-step-backward-8x.webp":      &bintree{dataWebStaticWebpMediaStepBackward8xWebp, map[string]*bintree{}},
					"media-step-backward.webp":         &bintree{dataWebStaticWebpMediaStepBackwardWebp, map[string]*bintree{}},
					"media-step-forward-2x.webp":       &bintree{dataWebStaticWebpMediaStepForward2xWebp, map[string]*bintree{}},
					"media-step-forward-3x.webp":       &bintree{dataWebStaticWebpMediaStepForward3xWebp, map[string]*bintree{}},
					"media-step-forward-4x.webp":       &bintree{dataWebStaticWebpMediaStepForward4xWebp, map[string]*bintree{}},
					"media-step-forward-6x.webp":       &bintree{dataWebStaticWebpMediaStepForward6xWebp, map[string]*bintree{}},
					"media-step-forward-8x.webp":       &bintree{dataWebStaticWebpMediaStepForward8xWebp, map[string]*bintree{}},
					"media-step-forward.webp":          &bintree{dataWebStaticWebpMediaStepForwardWebp, map[string]*bintree{}},
					"media-stop-2x.webp":               &bintree{dataWebStaticWebpMediaStop2xWebp, map[string]*bintree{}},
					"media-stop-3x.webp":               &bintree{dataWebStaticWebpMediaStop3xWebp, map[string]*bintree{}},
					"media-stop-4x.webp":               &bintree{dataWebStaticWebpMediaStop4xWebp, map[string]*bintree{}},
					"media-stop-6x.webp":               &bintree{dataWebStaticWebpMediaStop6xWebp, map[string]*bintree{}},
					"media-stop-8x.webp":               &bintree{dataWebStaticWebpMediaStop8xWebp, map[string]*bintree{}},
					"media-stop.webp":                  &bintree{dataWebStaticWebpMediaStopWebp, map[string]*bintree{}},
					"medical-cross-2x.webp":            &bintree{dataWebStaticWebpMedicalCross2xWebp, map[string]*bintree{}},
					"medical-cross-3x.webp":            &bintree{dataWebStaticWebpMedicalCross3xWebp, map[string]*bintree{}},
					"medical-cross-4x.webp":            &bintree{dataWebStaticWebpMedicalCross4xWebp, map[string]*bintree{}},
					"medical-cross-6x.webp":            &bintree{dataWebStaticWebpMedicalCross6xWebp, map[string]*bintree{}},
					"medical-cross-8x.webp":            &bintree{dataWebStaticWebpMedicalCross8xWebp, map[string]*bintree{}},
					"medical-cross.webp":               &bintree{dataWebStaticWebpMedicalCrossWebp, map[string]*bintree{}},
					"menu-2x.webp":                     &bintree{dataWebStaticWebpMenu2xWebp, map[string]*bintree{}},
					"menu-3x.webp":                     &bintree{dataWebStaticWebpMenu3xWebp, map[string]*bintree{}},
					"menu-4x.webp":                     &bintree{dataWebStaticWebpMenu4xWebp, map[string]*bintree{}},
					"menu-6x.webp":                     &bintree{dataWebStaticWebpMenu6xWebp, map[string]*bintree{}},
					"menu-8x.webp":                     &bintree{dataWebStaticWebpMenu8xWebp, map[string]*bintree{}},
					"menu.webp":                        &bintree{dataWebStaticWebpMenuWebp, map[string]*bintree{}},
					"microphone-2x.webp":               &bintree{dataWebStaticWebpMicrophone2xWebp, map[string]*bintree{}},
					"microphone-3x.webp":               &bintree{dataWebStaticWebpMicrophone3xWebp, map[string]*bintree{}},
					"microphone-4x.webp":               &bintree{dataWebStaticWebpMicrophone4xWebp, map[string]*bintree{}},
					"microphone-6x.webp":               &bintree{dataWebStaticWebpMicrophone6xWebp, map[string]*bintree{}},
					"microphone-8x.webp":               &bintree{dataWebStaticWebpMicrophone8xWebp, map[string]*bintree{}},
					"microphone.webp":                  &bintree{dataWebStaticWebpMicrophoneWebp, map[string]*bintree{}},
					"minus-2x.webp":                    &bintree{dataWebStaticWebpMinus2xWebp, map[string]*bintree{}},
					"minus-3x.webp":                    &bintree{dataWebStaticWebpMinus3xWebp, map[string]*bintree{}},
					"minus-4x.webp":                    &bintree{dataWebStaticWebpMinus4xWebp, map[string]*bintree{}},
					"minus-6x.webp":                    &bintree{dataWebStaticWebpMinus6xWebp, map[string]*bintree{}},
					"minus-8x.webp":                    &bintree{dataWebStaticWebpMinus8xWebp, map[string]*bintree{}},
					"minus.webp":                       &bintree{dataWebStaticWebpMinusWebp, map[string]*bintree{}},
					"monitor-2x.webp":                  &bintree{dataWebStaticWebpMonitor2xWebp, map[string]*bintree{}},
					"monitor-3x.webp":                  &bintree{dataWebStaticWebpMonitor3xWebp, map[string]*bintree{}},
					"monitor-4x.webp":                  &bintree{dataWebStaticWebpMonitor4xWebp, map[string]*bintree{}},
					"monitor-6x.webp":                  &bintree{dataWebStaticWebpMonitor6xWebp, map[string]*bintree{}},
					"monitor-8x.webp":                  &bintree{dataWebStaticWebpMonitor8xWebp, map[string]*bintree{}},
					"monitor.webp":                     &bintree{dataWebStaticWebpMonitorWebp, map[string]*bintree{}},
					"moon-2x.webp":                     &bintree{dataWebStaticWebpMoon2xWebp, map[string]*bintree{}},
					"moon-3x.webp":                     &bintree{dataWebStaticWebpMoon3xWebp, map[string]*bintree{}},
					"moon-4x.webp":                     &bintree{dataWebStaticWebpMoon4xWebp, map[string]*bintree{}},
					"moon-6x.webp":                     &bintree{dataWebStaticWebpMoon6xWebp, map[string]*bintree{}},
					"moon-8x.webp":                     &bintree{dataWebStaticWebpMoon8xWebp, map[string]*bintree{}},
					"moon.webp":                        &bintree{dataWebStaticWebpMoonWebp, map[string]*bintree{}},
					"move-2x.webp":                     &bintree{dataWebStaticWebpMove2xWebp, map[string]*bintree{}},
					"move-3x.webp":                     &bintree{dataWebStaticWebpMove3xWebp, map[string]*bintree{}},
					"move-4x.webp":                     &bintree{dataWebStaticWebpMove4xWebp, map[string]*bintree{}},
					"move-6x.webp":                     &bintree{dataWebStaticWebpMove6xWebp, map[string]*bintree{}},
					"move-8x.webp":                     &bintree{dataWebStaticWebpMove8xWebp, map[string]*bintree{}},
					"move.webp":                        &bintree{dataWebStaticWebpMoveWebp, map[string]*bintree{}},
					"musical-note-2x.webp":             &bintree{dataWebStaticWebpMusicalNote2xWebp, map[string]*bintree{}},
					"musical-note-3x.webp":             &bintree{dataWebStaticWebpMusicalNote3xWebp, map[string]*bintree{}},
					"musical-note-4x.webp":             &bintree{dataWebStaticWebpMusicalNote4xWebp, map[string]*bintree{}},
					"musical-note-6x.webp":             &bintree{dataWebStaticWebpMusicalNote6xWebp, map[string]*bintree{}},
					"musical-note-8x.webp":             &bintree{dataWebStaticWebpMusicalNote8xWebp, map[string]*bintree{}},
					"musical-note.webp":                &bintree{dataWebStaticWebpMusicalNoteWebp, map[string]*bintree{}},
					"paperclip-2x.webp":                &bintree{dataWebStaticWebpPaperclip2xWebp, map[string]*bintree{}},
					"paperclip-3x.webp":                &bintree{dataWebStaticWebpPaperclip3xWebp, map[string]*bintree{}},
					"paperclip-4x.webp":                &bintree{dataWebStaticWebpPaperclip4xWebp, map[string]*bintree{}},
					"paperclip-6x.webp":                &bintree{dataWebStaticWebpPaperclip6xWebp, map[string]*bintree{}},
					"paperclip-8x.webp":                &bintree{dataWebStaticWebpPaperclip8xWebp, map[string]*bintree{}},
					"paperclip.webp":                   &bintree{dataWebStaticWebpPaperclipWebp, map[string]*bintree{}},
					"pencil-2x.webp":                   &bintree{dataWebStaticWebpPencil2xWebp, map[string]*bintree{}},
					"pencil-3x.webp":                   &bintree{dataWebStaticWebpPencil3xWebp, map[string]*bintree{}},
					"pencil-4x.webp":                   &bintree{dataWebStaticWebpPencil4xWebp, map[string]*bintree{}},
					"pencil-6x.webp":                   &bintree{dataWebStaticWebpPencil6xWebp, map[string]*bintree{}},
					"pencil-8x.webp":                   &bintree{dataWebStaticWebpPencil8xWebp, map[string]*bintree{}},
					"pencil.webp":                      &bintree{dataWebStaticWebpPencilWebp, map[string]*bintree{}},
					"people-2x.webp":                   &bintree{dataWebStaticWebpPeople2xWebp, map[string]*bintree{}},
					"people-3x.webp":                   &bintree{dataWebStaticWebpPeople3xWebp, map[string]*bintree{}},
					"people-4x.webp":                   &bintree{dataWebStaticWebpPeople4xWebp, map[string]*bintree{}},
					"people-6x.webp":                   &bintree{dataWebStaticWebpPeople6xWebp, map[string]*bintree{}},
					"people-8x.webp":                   &bintree{dataWebStaticWebpPeople8xWebp, map[string]*bintree{}},
					"people.webp":                      &bintree{dataWebStaticWebpPeopleWebp, map[string]*bintree{}},
					"person-2x.webp":                   &bintree{dataWebStaticWebpPerson2xWebp, map[string]*bintree{}},
					"person-3x.webp":                   &bintree{dataWebStaticWebpPerson3xWebp, map[string]*bintree{}},
					"person-4x.webp":                   &bintree{dataWebStaticWebpPerson4xWebp, map[string]*bintree{}},
					"person-6x.webp":                   &bintree{dataWebStaticWebpPerson6xWebp, map[string]*bintree{}},
					"person-8x.webp":                   &bintree{dataWebStaticWebpPerson8xWebp, map[string]*bintree{}},
					"person.webp":                      &bintree{dataWebStaticWebpPersonWebp, map[string]*bintree{}},
					"phone-2x.webp":                    &bintree{dataWebStaticWebpPhone2xWebp, map[string]*bintree{}},
					"phone-3x.webp":                    &bintree{dataWebStaticWebpPhone3xWebp, map[string]*bintree{}},
					"phone-4x.webp":                    &bintree{dataWebStaticWebpPhone4xWebp, map[string]*bintree{}},
					"phone-6x.webp":                    &bintree{dataWebStaticWebpPhone6xWebp, map[string]*bintree{}},
					"phone-8x.webp":                    &bintree{dataWebStaticWebpPhone8xWebp, map[string]*bintree{}},
					"phone.webp":                       &bintree{dataWebStaticWebpPhoneWebp, map[string]*bintree{}},
					"pie-chart-2x.webp":                &bintree{dataWebStaticWebpPieChart2xWebp, map[string]*bintree{}},
					"pie-chart-3x.webp":                &bintree{dataWebStaticWebpPieChart3xWebp, map[string]*bintree{}},
					"pie-chart-4x.webp":                &bintree{dataWebStaticWebpPieChart4xWebp, map[string]*bintree{}},
					"pie-chart-6x.webp":                &bintree{dataWebStaticWebpPieChart6xWebp, map[string]*bintree{}},
					"pie-chart-8x.webp":                &bintree{dataWebStaticWebpPieChart8xWebp, map[string]*bintree{}},
					"pie-chart.webp":                   &bintree{dataWebStaticWebpPieChartWebp, map[string]*bintree{}},
					"pin-2x.webp":                      &bintree{dataWebStaticWebpPin2xWebp, map[string]*bintree{}},
					"pin-3x.webp":                      &bintree{dataWebStaticWebpPin3xWebp, map[string]*bintree{}},
					"pin-4x.webp":                      &bintree{dataWebStaticWebpPin4xWebp, map[string]*bintree{}},
					"pin-6x.webp":                      &bintree{dataWebStaticWebpPin6xWebp, map[string]*bintree{}},
					"pin-8x.webp":                      &bintree{dataWebStaticWebpPin8xWebp, map[string]*bintree{}},
					"pin.webp":                         &bintree{dataWebStaticWebpPinWebp, map[string]*bintree{}},
					"play-circle-2x.webp":              &bintree{dataWebStaticWebpPlayCircle2xWebp, map[string]*bintree{}},
					"play-circle-3x.webp":              &bintree{dataWebStaticWebpPlayCircle3xWebp, map[string]*bintree{}},
					"play-circle-4x.webp":              &bintree{dataWebStaticWebpPlayCircle4xWebp, map[string]*bintree{}},
					"play-circle-6x.webp":              &bintree{dataWebStaticWebpPlayCircle6xWebp, map[string]*bintree{}},
					"play-circle-8x.webp":              &bintree{dataWebStaticWebpPlayCircle8xWebp, map[string]*bintree{}},
					"play-circle.webp":                 &bintree{dataWebStaticWebpPlayCircleWebp, map[string]*bintree{}},
					"plus-2x.webp":                     &bintree{dataWebStaticWebpPlus2xWebp, map[string]*bintree{}},
					"plus-3x.webp":                     &bintree{dataWebStaticWebpPlus3xWebp, map[string]*bintree{}},
					"plus-4x.webp":                     &bintree{dataWebStaticWebpPlus4xWebp, map[string]*bintree{}},
					"plus-6x.webp":                     &bintree{dataWebStaticWebpPlus6xWebp, map[string]*bintree{}},
					"plus-8x.webp":                     &bintree{dataWebStaticWebpPlus8xWebp, map[string]*bintree{}},
					"plus.webp":                        &bintree{dataWebStaticWebpPlusWebp, map[string]*bintree{}},
					"power-standby-2x.webp":            &bintree{dataWebStaticWebpPowerStandby2xWebp, map[string]*bintree{}},
					"power-standby-3x.webp":            &bintree{dataWebStaticWebpPowerStandby3xWebp, map[string]*bintree{}},
					"power-standby-4x.webp":            &bintree{dataWebStaticWebpPowerStandby4xWebp, map[string]*bintree{}},
					"power-standby-6x.webp":            &bintree{dataWebStaticWebpPowerStandby6xWebp, map[string]*bintree{}},
					"power-standby-8x.webp":            &bintree{dataWebStaticWebpPowerStandby8xWebp, map[string]*bintree{}},
					"power-standby.webp":               &bintree{dataWebStaticWebpPowerStandbyWebp, map[string]*bintree{}},
					"print-2x.webp":                    &bintree{dataWebStaticWebpPrint2xWebp, map[string]*bintree{}},
					"print-3x.webp":                    &bintree{dataWebStaticWebpPrint3xWebp, map[string]*bintree{}},
					"print-4x.webp":                    &bintree{dataWebStaticWebpPrint4xWebp, map[string]*bintree{}},
					"print-6x.webp":                    &bintree{dataWebStaticWebpPrint6xWebp, map[string]*bintree{}},
					"print-8x.webp":                    &bintree{dataWebStaticWebpPrint8xWebp, map[string]*bintree{}},
					"print.webp":                       &bintree{dataWebStaticWebpPrintWebp, map[string]*bintree{}},
					"project-2x.webp":                  &bintree{dataWebStaticWebpProject2xWebp, map[string]*bintree{}},
					"project-3x.webp":                  &bintree{dataWebStaticWebpProject3xWebp, map[string]*bintree{}},
					"project-4x.webp":                  &bintree{dataWebStaticWebpProject4xWebp, map[string]*bintree{}},
					"project-6x.webp":                  &bintree{dataWebStaticWebpProject6xWebp, map[string]*bintree{}},
					"project-8x.webp":                  &bintree{dataWebStaticWebpProject8xWebp, map[string]*bintree{}},
					"project.webp":                     &bintree{dataWebStaticWebpProjectWebp, map[string]*bintree{}},
					"pulse-2x.webp":                    &bintree{dataWebStaticWebpPulse2xWebp, map[string]*bintree{}},
					"pulse-3x.webp":                    &bintree{dataWebStaticWebpPulse3xWebp, map[string]*bintree{}},
					"pulse-4x.webp":                    &bintree{dataWebStaticWebpPulse4xWebp, map[string]*bintree{}},
					"pulse-6x.webp":                    &bintree{dataWebStaticWebpPulse6xWebp, map[string]*bintree{}},
					"pulse-8x.webp":                    &bintree{dataWebStaticWebpPulse8xWebp, map[string]*bintree{}},
					"pulse.webp":                       &bintree{dataWebStaticWebpPulseWebp, map[string]*bintree{}},
					"puzzle-piece-2x.webp":             &bintree{dataWebStaticWebpPuzzlePiece2xWebp, map[string]*bintree{}},
					"puzzle-piece-3x.webp":             &bintree{dataWebStaticWebpPuzzlePiece3xWebp, map[string]*bintree{}},
					"puzzle-piece-4x.webp":             &bintree{dataWebStaticWebpPuzzlePiece4xWebp, map[string]*bintree{}},
					"puzzle-piece-6x.webp":             &bintree{dataWebStaticWebpPuzzlePiece6xWebp, map[string]*bintree{}},
					"puzzle-piece-8x.webp":             &bintree{dataWebStaticWebpPuzzlePiece8xWebp, map[string]*bintree{}},
					"puzzle-piece.webp":                &bintree{dataWebStaticWebpPuzzlePieceWebp, map[string]*bintree{}},
					"question-mark-2x.webp":            &bintree{dataWebStaticWebpQuestionMark2xWebp, map[string]*bintree{}},
					"question-mark-3x.webp":            &bintree{dataWebStaticWebpQuestionMark3xWebp, map[string]*bintree{}},
					"question-mark-4x.webp":            &bintree{dataWebStaticWebpQuestionMark4xWebp, map[string]*bintree{}},
					"question-mark-6x.webp":            &bintree{dataWebStaticWebpQuestionMark6xWebp, map[string]*bintree{}},
					"question-mark-8x.webp":            &bintree{dataWebStaticWebpQuestionMark8xWebp, map[string]*bintree{}},
					"question-mark.webp":               &bintree{dataWebStaticWebpQuestionMarkWebp, map[string]*bintree{}},
					"rain-2x.webp":                     &bintree{dataWebStaticWebpRain2xWebp, map[string]*bintree{}},
					"rain-3x.webp":                     &bintree{dataWebStaticWebpRain3xWebp, map[string]*bintree{}},
					"rain-4x.webp":                     &bintree{dataWebStaticWebpRain4xWebp, map[string]*bintree{}},
					"rain-6x.webp":                     &bintree{dataWebStaticWebpRain6xWebp, map[string]*bintree{}},
					"rain-8x.webp":                     &bintree{dataWebStaticWebpRain8xWebp, map[string]*bintree{}},
					"rain.webp":                        &bintree{dataWebStaticWebpRainWebp, map[string]*bintree{}},
					"random-2x.webp":                   &bintree{dataWebStaticWebpRandom2xWebp, map[string]*bintree{}},
					"random-3x.webp":                   &bintree{dataWebStaticWebpRandom3xWebp, map[string]*bintree{}},
					"random-4x.webp":                   &bintree{dataWebStaticWebpRandom4xWebp, map[string]*bintree{}},
					"random-6x.webp":                   &bintree{dataWebStaticWebpRandom6xWebp, map[string]*bintree{}},
					"random-8x.webp":                   &bintree{dataWebStaticWebpRandom8xWebp, map[string]*bintree{}},
					"random.webp":                      &bintree{dataWebStaticWebpRandomWebp, map[string]*bintree{}},
					"reload-2x.webp":                   &bintree{dataWebStaticWebpReload2xWebp, map[string]*bintree{}},
					"reload-3x.webp":                   &bintree{dataWebStaticWebpReload3xWebp, map[string]*bintree{}},
					"reload-4x.webp":                   &bintree{dataWebStaticWebpReload4xWebp, map[string]*bintree{}},
					"reload-6x.webp":                   &bintree{dataWebStaticWebpReload6xWebp, map[string]*bintree{}},
					"reload-8x.webp":                   &bintree{dataWebStaticWebpReload8xWebp, map[string]*bintree{}},
					"reload.webp":                      &bintree{dataWebStaticWebpReloadWebp, map[string]*bintree{}},
					"resize-both-2x.webp":              &bintree{dataWebStaticWebpResizeBoth2xWebp, map[string]*bintree{}},
					"resize-both-3x.webp":              &bintree{dataWebStaticWebpResizeBoth3xWebp, map[string]*bintree{}},
					"resize-both-4x.webp":              &bintree{dataWebStaticWebpResizeBoth4xWebp, map[string]*bintree{}},
					"resize-both-6x.webp":              &bintree{dataWebStaticWebpResizeBoth6xWebp, map[string]*bintree{}},
					"resize-both-8x.webp":              &bintree{dataWebStaticWebpResizeBoth8xWebp, map[string]*bintree{}},
					"resize-both.webp":                 &bintree{dataWebStaticWebpResizeBothWebp, map[string]*bintree{}},
					"resize-height-2x.webp":            &bintree{dataWebStaticWebpResizeHeight2xWebp, map[string]*bintree{}},
					"resize-height-3x.webp":            &bintree{dataWebStaticWebpResizeHeight3xWebp, map[string]*bintree{}},
					"resize-height-4x.webp":            &bintree{dataWebStaticWebpResizeHeight4xWebp, map[string]*bintree{}},
					"resize-height-6x.webp":            &bintree{dataWebStaticWebpResizeHeight6xWebp, map[string]*bintree{}},
					"resize-height-8x.webp":            &bintree{dataWebStaticWebpResizeHeight8xWebp, map[string]*bintree{}},
					"resize-height.webp":               &bintree{dataWebStaticWebpResizeHeightWebp, map[string]*bintree{}},
					"resize-width-2x.webp":             &bintree{dataWebStaticWebpResizeWidth2xWebp, map[string]*bintree{}},
					"resize-width-3x.webp":             &bintree{dataWebStaticWebpResizeWidth3xWebp, map[string]*bintree{}},
					"resize-width-4x.webp":             &bintree{dataWebStaticWebpResizeWidth4xWebp, map[string]*bintree{}},
					"resize-width-6x.webp":             &bintree{dataWebStaticWebpResizeWidth6xWebp, map[string]*bintree{}},
					"resize-width-8x.webp":             &bintree{dataWebStaticWebpResizeWidth8xWebp, map[string]*bintree{}},
					"resize-width.webp":                &bintree{dataWebStaticWebpResizeWidthWebp, map[string]*bintree{}},
					"rss-2x.webp":                      &bintree{dataWebStaticWebpRss2xWebp, map[string]*bintree{}},
					"rss-3x.webp":                      &bintree{dataWebStaticWebpRss3xWebp, map[string]*bintree{}},
					"rss-4x.webp":                      &bintree{dataWebStaticWebpRss4xWebp, map[string]*bintree{}},
					"rss-6x.webp":                      &bintree{dataWebStaticWebpRss6xWebp, map[string]*bintree{}},
					"rss-8x.webp":                      &bintree{dataWebStaticWebpRss8xWebp, map[string]*bintree{}},
					"rss-alt-2x.webp":                  &bintree{dataWebStaticWebpRssAlt2xWebp, map[string]*bintree{}},
					"rss-alt-3x.webp":                  &bintree{dataWebStaticWebpRssAlt3xWebp, map[string]*bintree{}},
					"rss-alt-4x.webp":                  &bintree{dataWebStaticWebpRssAlt4xWebp, map[string]*bintree{}},
					"rss-alt-6x.webp":                  &bintree{dataWebStaticWebpRssAlt6xWebp, map[string]*bintree{}},
					"rss-alt-8x.webp":                  &bintree{dataWebStaticWebpRssAlt8xWebp, map[string]*bintree{}},
					"rss-alt.webp":                     &bintree{dataWebStaticWebpRssAltWebp, map[string]*bintree{}},
					"rss.webp":                         &bintree{dataWebStaticWebpRssWebp, map[string]*bintree{}},
					"script-2x.webp":                   &bintree{dataWebStaticWebpScript2xWebp, map[string]*bintree{}},
					"script-3x.webp":                   &bintree{dataWebStaticWebpScript3xWebp, map[string]*bintree{}},
					"script-4x.webp":                   &bintree{dataWebStaticWebpScript4xWebp, map[string]*bintree{}},
					"script-6x.webp":                   &bintree{dataWebStaticWebpScript6xWebp, map[string]*bintree{}},
					"script-8x.webp":                   &bintree{dataWebStaticWebpScript8xWebp, map[string]*bintree{}},
					"script.webp":                      &bintree{dataWebStaticWebpScriptWebp, map[string]*bintree{}},
					"share-2x.webp":                    &bintree{dataWebStaticWebpShare2xWebp, map[string]*bintree{}},
					"share-3x.webp":                    &bintree{dataWebStaticWebpShare3xWebp, map[string]*bintree{}},
					"share-4x.webp":                    &bintree{dataWebStaticWebpShare4xWebp, map[string]*bintree{}},
					"share-6x.webp":                    &bintree{dataWebStaticWebpShare6xWebp, map[string]*bintree{}},
					"share-8x.webp":                    &bintree{dataWebStaticWebpShare8xWebp, map[string]*bintree{}},
					"share-boxed-2x.webp":              &bintree{dataWebStaticWebpShareBoxed2xWebp, map[string]*bintree{}},
					"share-boxed-3x.webp":              &bintree{dataWebStaticWebpShareBoxed3xWebp, map[string]*bintree{}},
					"share-boxed-4x.webp":              &bintree{dataWebStaticWebpShareBoxed4xWebp, map[string]*bintree{}},
					"share-boxed-6x.webp":              &bintree{dataWebStaticWebpShareBoxed6xWebp, map[string]*bintree{}},
					"share-boxed-8x.webp":              &bintree{dataWebStaticWebpShareBoxed8xWebp, map[string]*bintree{}},
					"share-boxed.webp":                 &bintree{dataWebStaticWebpShareBoxedWebp, map[string]*bintree{}},
					"share.webp":                       &bintree{dataWebStaticWebpShareWebp, map[string]*bintree{}},
					"shield-2x.webp":                   &bintree{dataWebStaticWebpShield2xWebp, map[string]*bintree{}},
					"shield-3x.webp":                   &bintree{dataWebStaticWebpShield3xWebp, map[string]*bintree{}},
					"shield-4x.webp":                   &bintree{dataWebStaticWebpShield4xWebp, map[string]*bintree{}},
					"shield-6x.webp":                   &bintree{dataWebStaticWebpShield6xWebp, map[string]*bintree{}},
					"shield-8x.webp":                   &bintree{dataWebStaticWebpShield8xWebp, map[string]*bintree{}},
					"shield.webp":                      &bintree{dataWebStaticWebpShieldWebp, map[string]*bintree{}},
					"signal-2x.webp":                   &bintree{dataWebStaticWebpSignal2xWebp, map[string]*bintree{}},
					"signal-3x.webp":                   &bintree{dataWebStaticWebpSignal3xWebp, map[string]*bintree{}},
					"signal-4x.webp":                   &bintree{dataWebStaticWebpSignal4xWebp, map[string]*bintree{}},
					"signal-6x.webp":                   &bintree{dataWebStaticWebpSignal6xWebp, map[string]*bintree{}},
					"signal-8x.webp":                   &bintree{dataWebStaticWebpSignal8xWebp, map[string]*bintree{}},
					"signal.webp":                      &bintree{dataWebStaticWebpSignalWebp, map[string]*bintree{}},
					"signpost-2x.webp":                 &bintree{dataWebStaticWebpSignpost2xWebp, map[string]*bintree{}},
					"signpost-3x.webp":                 &bintree{dataWebStaticWebpSignpost3xWebp, map[string]*bintree{}},
					"signpost-4x.webp":                 &bintree{dataWebStaticWebpSignpost4xWebp, map[string]*bintree{}},
					"signpost-6x.webp":                 &bintree{dataWebStaticWebpSignpost6xWebp, map[string]*bintree{}},
					"signpost-8x.webp":                 &bintree{dataWebStaticWebpSignpost8xWebp, map[string]*bintree{}},
					"signpost.webp":                    &bintree{dataWebStaticWebpSignpostWebp, map[string]*bintree{}},
					"sort-ascending-2x.webp":           &bintree{dataWebStaticWebpSortAscending2xWebp, map[string]*bintree{}},
					"sort-ascending-3x.webp":           &bintree{dataWebStaticWebpSortAscending3xWebp, map[string]*bintree{}},
					"sort-ascending-4x.webp":           &bintree{dataWebStaticWebpSortAscending4xWebp, map[string]*bintree{}},
					"sort-ascending-6x.webp":           &bintree{dataWebStaticWebpSortAscending6xWebp, map[string]*bintree{}},
					"sort-ascending-8x.webp":           &bintree{dataWebStaticWebpSortAscending8xWebp, map[string]*bintree{}},
					"sort-ascending.webp":              &bintree{dataWebStaticWebpSortAscendingWebp, map[string]*bintree{}},
					"sort-descending-2x.webp":          &bintree{dataWebStaticWebpSortDescending2xWebp, map[string]*bintree{}},
					"sort-descending-3x.webp":          &bintree{dataWebStaticWebpSortDescending3xWebp, map[string]*bintree{}},
					"sort-descending-4x.webp":          &bintree{dataWebStaticWebpSortDescending4xWebp, map[string]*bintree{}},
					"sort-descending-6x.webp":          &bintree{dataWebStaticWebpSortDescending6xWebp, map[string]*bintree{}},
					"sort-descending-8x.webp":          &bintree{dataWebStaticWebpSortDescending8xWebp, map[string]*bintree{}},
					"sort-descending.webp":             &bintree{dataWebStaticWebpSortDescendingWebp, map[string]*bintree{}},
					"spreadsheet-2x.webp":              &bintree{dataWebStaticWebpSpreadsheet2xWebp, map[string]*bintree{}},
					"spreadsheet-3x.webp":              &bintree{dataWebStaticWebpSpreadsheet3xWebp, map[string]*bintree{}},
					"spreadsheet-4x.webp":              &bintree{dataWebStaticWebpSpreadsheet4xWebp, map[string]*bintree{}},
					"spreadsheet-6x.webp":              &bintree{dataWebStaticWebpSpreadsheet6xWebp, map[string]*bintree{}},
					"spreadsheet-8x.webp":              &bintree{dataWebStaticWebpSpreadsheet8xWebp, map[string]*bintree{}},
					"spreadsheet.webp":                 &bintree{dataWebStaticWebpSpreadsheetWebp, map[string]*bintree{}},
					"star-2x.webp":                     &bintree{dataWebStaticWebpStar2xWebp, map[string]*bintree{}},
					"star-3x.webp":                     &bintree{dataWebStaticWebpStar3xWebp, map[string]*bintree{}},
					"star-4x.webp":                     &bintree{dataWebStaticWebpStar4xWebp, map[string]*bintree{}},
					"star-6x.webp":                     &bintree{dataWebStaticWebpStar6xWebp, map[string]*bintree{}},
					"star-8x.webp":                     &bintree{dataWebStaticWebpStar8xWebp, map[string]*bintree{}},
					"star.webp":                        &bintree{dataWebStaticWebpStarWebp, map[string]*bintree{}},
					"sun-2x.webp":                      &bintree{dataWebStaticWebpSun2xWebp, map[string]*bintree{}},
					"sun-3x.webp":                      &bintree{dataWebStaticWebpSun3xWebp, map[string]*bintree{}},
					"sun-4x.webp":                      &bintree{dataWebStaticWebpSun4xWebp, map[string]*bintree{}},
					"sun-6x.webp":                      &bintree{dataWebStaticWebpSun6xWebp, map[string]*bintree{}},
					"sun-8x.webp":                      &bintree{dataWebStaticWebpSun8xWebp, map[string]*bintree{}},
					"sun.webp":                         &bintree{dataWebStaticWebpSunWebp, map[string]*bintree{}},
					"tablet-2x.webp":                   &bintree{dataWebStaticWebpTablet2xWebp, map[string]*bintree{}},
					"tablet-3x.webp":                   &bintree{dataWebStaticWebpTablet3xWebp, map[string]*bintree{}},
					"tablet-4x.webp":                   &bintree{dataWebStaticWebpTablet4xWebp, map[string]*bintree{}},
					"tablet-6x.webp":                   &bintree{dataWebStaticWebpTablet6xWebp, map[string]*bintree{}},
					"tablet-8x.webp":                   &bintree{dataWebStaticWebpTablet8xWebp, map[string]*bintree{}},
					"tablet.webp":                      &bintree{dataWebStaticWebpTabletWebp, map[string]*bintree{}},
					"tag-2x.webp":                      &bintree{dataWebStaticWebpTag2xWebp, map[string]*bintree{}},
					"tag-3x.webp":                      &bintree{dataWebStaticWebpTag3xWebp, map[string]*bintree{}},
					"tag-4x.webp":                      &bintree{dataWebStaticWebpTag4xWebp, map[string]*bintree{}},
					"tag-6x.webp":                      &bintree{dataWebStaticWebpTag6xWebp, map[string]*bintree{}},
					"tag-8x.webp":                      &bintree{dataWebStaticWebpTag8xWebp, map[string]*bintree{}},
					"tag.webp":                         &bintree{dataWebStaticWebpTagWebp, map[string]*bintree{}},
					"tags-2x.webp":                     &bintree{dataWebStaticWebpTags2xWebp, map[string]*bintree{}},
					"tags-3x.webp":                     &bintree{dataWebStaticWebpTags3xWebp, map[string]*bintree{}},
					"tags-4x.webp":                     &bintree{dataWebStaticWebpTags4xWebp, map[string]*bintree{}},
					"tags-6x.webp":                     &bintree{dataWebStaticWebpTags6xWebp, map[string]*bintree{}},
					"tags-8x.webp":                     &bintree{dataWebStaticWebpTags8xWebp, map[string]*bintree{}},
					"tags.webp":                        &bintree{dataWebStaticWebpTagsWebp, map[string]*bintree{}},
					"target-2x.webp":                   &bintree{dataWebStaticWebpTarget2xWebp, map[string]*bintree{}},
					"target-3x.webp":                   &bintree{dataWebStaticWebpTarget3xWebp, map[string]*bintree{}},
					"target-4x.webp":                   &bintree{dataWebStaticWebpTarget4xWebp, map[string]*bintree{}},
					"target-6x.webp":                   &bintree{dataWebStaticWebpTarget6xWebp, map[string]*bintree{}},
					"target-8x.webp":                   &bintree{dataWebStaticWebpTarget8xWebp, map[string]*bintree{}},
					"target.webp":                      &bintree{dataWebStaticWebpTargetWebp, map[string]*bintree{}},
					"task-2x.webp":                     &bintree{dataWebStaticWebpTask2xWebp, map[string]*bintree{}},
					"task-3x.webp":                     &bintree{dataWebStaticWebpTask3xWebp, map[string]*bintree{}},
					"task-4x.webp":                     &bintree{dataWebStaticWebpTask4xWebp, map[string]*bintree{}},
					"task-6x.webp":                     &bintree{dataWebStaticWebpTask6xWebp, map[string]*bintree{}},
					"task-8x.webp":                     &bintree{dataWebStaticWebpTask8xWebp, map[string]*bintree{}},
					"task.webp":                        &bintree{dataWebStaticWebpTaskWebp, map[string]*bintree{}},
					"terminal-2x.webp":                 &bintree{dataWebStaticWebpTerminal2xWebp, map[string]*bintree{}},
					"terminal-3x.webp":                 &bintree{dataWebStaticWebpTerminal3xWebp, map[string]*bintree{}},
					"terminal-4x.webp":                 &bintree{dataWebStaticWebpTerminal4xWebp, map[string]*bintree{}},
					"terminal-6x.webp":                 &bintree{dataWebStaticWebpTerminal6xWebp, map[string]*bintree{}},
					"terminal-8x.webp":                 &bintree{dataWebStaticWebpTerminal8xWebp, map[string]*bintree{}},
					"terminal.webp":                    &bintree{dataWebStaticWebpTerminalWebp, map[string]*bintree{}},
					"text-2x.webp":                     &bintree{dataWebStaticWebpText2xWebp, map[string]*bintree{}},
					"text-3x.webp":                     &bintree{dataWebStaticWebpText3xWebp, map[string]*bintree{}},
					"text-4x.webp":                     &bintree{dataWebStaticWebpText4xWebp, map[string]*bintree{}},
					"text-6x.webp":                     &bintree{dataWebStaticWebpText6xWebp, map[string]*bintree{}},
					"text-8x.webp":                     &bintree{dataWebStaticWebpText8xWebp, map[string]*bintree{}},
					"text.webp":                        &bintree{dataWebStaticWebpTextWebp, map[string]*bintree{}},
					"thumb-down-2x.webp":               &bintree{dataWebStaticWebpThumbDown2xWebp, map[string]*bintree{}},
					"thumb-down-3x.webp":               &bintree{dataWebStaticWebpThumbDown3xWebp, map[string]*bintree{}},
					"thumb-down-4x.webp":               &bintree{dataWebStaticWebpThumbDown4xWebp, map[string]*bintree{}},
					"thumb-down-6x.webp":               &bintree{dataWebStaticWebpThumbDown6xWebp, map[string]*bintree{}},
					"thumb-down-8x.webp":               &bintree{dataWebStaticWebpThumbDown8xWebp, map[string]*bintree{}},
					"thumb-down.webp":                  &bintree{dataWebStaticWebpThumbDownWebp, map[string]*bintree{}},
					"thumb-up-2x.webp":                 &bintree{dataWebStaticWebpThumbUp2xWebp, map[string]*bintree{}},
					"thumb-up-3x.webp":                 &bintree{dataWebStaticWebpThumbUp3xWebp, map[string]*bintree{}},
					"thumb-up-4x.webp":                 &bintree{dataWebStaticWebpThumbUp4xWebp, map[string]*bintree{}},
					"thumb-up-6x.webp":                 &bintree{dataWebStaticWebpThumbUp6xWebp, map[string]*bintree{}},
					"thumb-up-8x.webp":                 &bintree{dataWebStaticWebpThumbUp8xWebp, map[string]*bintree{}},
					"thumb-up.webp":                    &bintree{dataWebStaticWebpThumbUpWebp, map[string]*bintree{}},
					"timer-2x.webp":                    &bintree{dataWebStaticWebpTimer2xWebp, map[string]*bintree{}},
					"timer-3x.webp":                    &bintree{dataWebStaticWebpTimer3xWebp, map[string]*bintree{}},
					"timer-4x.webp":                    &bintree{dataWebStaticWebpTimer4xWebp, map[string]*bintree{}},
					"timer-6x.webp":                    &bintree{dataWebStaticWebpTimer6xWebp, map[string]*bintree{}},
					"timer-8x.webp":                    &bintree{dataWebStaticWebpTimer8xWebp, map[string]*bintree{}},
					"timer.webp":                       &bintree{dataWebStaticWebpTimerWebp, map[string]*bintree{}},
					"transfer-2x.webp":                 &bintree{dataWebStaticWebpTransfer2xWebp, map[string]*bintree{}},
					"transfer-3x.webp":                 &bintree{dataWebStaticWebpTransfer3xWebp, map[string]*bintree{}},
					"transfer-4x.webp":                 &bintree{dataWebStaticWebpTransfer4xWebp, map[string]*bintree{}},
					"transfer-6x.webp":                 &bintree{dataWebStaticWebpTransfer6xWebp, map[string]*bintree{}},
					"transfer-8x.webp":                 &bintree{dataWebStaticWebpTransfer8xWebp, map[string]*bintree{}},
					"transfer.webp":                    &bintree{dataWebStaticWebpTransferWebp, map[string]*bintree{}},
					"trash-2x.webp":                    &bintree{dataWebStaticWebpTrash2xWebp, map[string]*bintree{}},
					"trash-3x.webp":                    &bintree{dataWebStaticWebpTrash3xWebp, map[string]*bintree{}},
					"trash-4x.webp":                    &bintree{dataWebStaticWebpTrash4xWebp, map[string]*bintree{}},
					"trash-6x.webp":                    &bintree{dataWebStaticWebpTrash6xWebp, map[string]*bintree{}},
					"trash-8x.webp":                    &bintree{dataWebStaticWebpTrash8xWebp, map[string]*bintree{}},
					"trash.webp":                       &bintree{dataWebStaticWebpTrashWebp, map[string]*bintree{}},
					"underline-2x.webp":                &bintree{dataWebStaticWebpUnderline2xWebp, map[string]*bintree{}},
					"underline-3x.webp":                &bintree{dataWebStaticWebpUnderline3xWebp, map[string]*bintree{}},
					"underline-4x.webp":                &bintree{dataWebStaticWebpUnderline4xWebp, map[string]*bintree{}},
					"underline-6x.webp":                &bintree{dataWebStaticWebpUnderline6xWebp, map[string]*bintree{}},
					"underline-8x.webp":                &bintree{dataWebStaticWebpUnderline8xWebp, map[string]*bintree{}},
					"underline.webp":                   &bintree{dataWebStaticWebpUnderlineWebp, map[string]*bintree{}},
					"vertical-align-bottom-2x.webp":    &bintree{dataWebStaticWebpVerticalAlignBottom2xWebp, map[string]*bintree{}},
					"vertical-align-bottom-3x.webp":    &bintree{dataWebStaticWebpVerticalAlignBottom3xWebp, map[string]*bintree{}},
					"vertical-align-bottom-4x.webp":    &bintree{dataWebStaticWebpVerticalAlignBottom4xWebp, map[string]*bintree{}},
					"vertical-align-bottom-6x.webp":    &bintree{dataWebStaticWebpVerticalAlignBottom6xWebp, map[string]*bintree{}},
					"vertical-align-bottom-8x.webp":    &bintree{dataWebStaticWebpVerticalAlignBottom8xWebp, map[string]*bintree{}},
					"vertical-align-bottom.webp":       &bintree{dataWebStaticWebpVerticalAlignBottomWebp, map[string]*bintree{}},
					"vertical-align-center-2x.webp":    &bintree{dataWebStaticWebpVerticalAlignCenter2xWebp, map[string]*bintree{}},
					"vertical-align-center-3x.webp":    &bintree{dataWebStaticWebpVerticalAlignCenter3xWebp, map[string]*bintree{}},
					"vertical-align-center-4x.webp":    &bintree{dataWebStaticWebpVerticalAlignCenter4xWebp, map[string]*bintree{}},
					"vertical-align-center-6x.webp":    &bintree{dataWebStaticWebpVerticalAlignCenter6xWebp, map[string]*bintree{}},
					"vertical-align-center-8x.webp":    &bintree{dataWebStaticWebpVerticalAlignCenter8xWebp, map[string]*bintree{}},
					"vertical-align-center.webp":       &bintree{dataWebStaticWebpVerticalAlignCenterWebp, map[string]*bintree{}},
					"vertical-align-top-2x.webp":       &bintree{dataWebStaticWebpVerticalAlignTop2xWebp, map[string]*bintree{}},
					"vertical-align-top-3x.webp":       &bintree{dataWebStaticWebpVerticalAlignTop3xWebp, map[string]*bintree{}},
					"vertical-align-top-4x.webp":       &bintree{dataWebStaticWebpVerticalAlignTop4xWebp, map[string]*bintree{}},
					"vertical-align-top-6x.webp":       &bintree{dataWebStaticWebpVerticalAlignTop6xWebp, map[string]*bintree{}},
					"vertical-align-top-8x.webp":       &bintree{dataWebStaticWebpVerticalAlignTop8xWebp, map[string]*bintree{}},
					"vertical-align-top.webp":          &bintree{dataWebStaticWebpVerticalAlignTopWebp, map[string]*bintree{}},
					"video-2x.webp":                    &bintree{dataWebStaticWebpVideo2xWebp, map[string]*bintree{}},
					"video-3x.webp":                    &bintree{dataWebStaticWebpVideo3xWebp, map[string]*bintree{}},
					"video-4x.webp":                    &bintree{dataWebStaticWebpVideo4xWebp, map[string]*bintree{}},
					"video-6x.webp":                    &bintree{dataWebStaticWebpVideo6xWebp, map[string]*bintree{}},
					"video-8x.webp":                    &bintree{dataWebStaticWebpVideo8xWebp, map[string]*bintree{}},
					"video.webp":                       &bintree{dataWebStaticWebpVideoWebp, map[string]*bintree{}},
					"volume-high-2x.webp":              &bintree{dataWebStaticWebpVolumeHigh2xWebp, map[string]*bintree{}},
					"volume-high-3x.webp":              &bintree{dataWebStaticWebpVolumeHigh3xWebp, map[string]*bintree{}},
					"volume-high-4x.webp":              &bintree{dataWebStaticWebpVolumeHigh4xWebp, map[string]*bintree{}},
					"volume-high-6x.webp":              &bintree{dataWebStaticWebpVolumeHigh6xWebp, map[string]*bintree{}},
					"volume-high-8x.webp":              &bintree{dataWebStaticWebpVolumeHigh8xWebp, map[string]*bintree{}},
					"volume-high.webp":                 &bintree{dataWebStaticWebpVolumeHighWebp, map[string]*bintree{}},
					"volume-low-2x.webp":               &bintree{dataWebStaticWebpVolumeLow2xWebp, map[string]*bintree{}},
					"volume-low-3x.webp":               &bintree{dataWebStaticWebpVolumeLow3xWebp, map[string]*bintree{}},
					"volume-low-4x.webp":               &bintree{dataWebStaticWebpVolumeLow4xWebp, map[string]*bintree{}},
					"volume-low-6x.webp":               &bintree{dataWebStaticWebpVolumeLow6xWebp, map[string]*bintree{}},
					"volume-low-8x.webp":               &bintree{dataWebStaticWebpVolumeLow8xWebp, map[string]*bintree{}},
					"volume-low.webp":                  &bintree{dataWebStaticWebpVolumeLowWebp, map[string]*bintree{}},
					"volume-off-2x.webp":               &bintree{dataWebStaticWebpVolumeOff2xWebp, map[string]*bintree{}},
					"volume-off-3x.webp":               &bintree{dataWebStaticWebpVolumeOff3xWebp, map[string]*bintree{}},
					"volume-off-4x.webp":               &bintree{dataWebStaticWebpVolumeOff4xWebp, map[string]*bintree{}},
					"volume-off-6x.webp":               &bintree{dataWebStaticWebpVolumeOff6xWebp, map[string]*bintree{}},
					"volume-off-8x.webp":               &bintree{dataWebStaticWebpVolumeOff8xWebp, map[string]*bintree{}},
					"volume-off.webp":                  &bintree{dataWebStaticWebpVolumeOffWebp, map[string]*bintree{}},
					"warning-2x.webp":                  &bintree{dataWebStaticWebpWarning2xWebp, map[string]*bintree{}},
					"warning-3x.webp":                  &bintree{dataWebStaticWebpWarning3xWebp, map[string]*bintree{}},
					"warning-4x.webp":                  &bintree{dataWebStaticWebpWarning4xWebp, map[string]*bintree{}},
					"warning-6x.webp":                  &bintree{dataWebStaticWebpWarning6xWebp, map[string]*bintree{}},
					"warning-8x.webp":                  &bintree{dataWebStaticWebpWarning8xWebp, map[string]*bintree{}},
					"warning.webp":                     &bintree{dataWebStaticWebpWarningWebp, map[string]*bintree{}},
					"wifi-2x.webp":                     &bintree{dataWebStaticWebpWifi2xWebp, map[string]*bintree{}},
					"wifi-3x.webp":                     &bintree{dataWebStaticWebpWifi3xWebp, map[string]*bintree{}},
					"wifi-4x.webp":                     &bintree{dataWebStaticWebpWifi4xWebp, map[string]*bintree{}},
					"wifi-6x.webp":                     &bintree{dataWebStaticWebpWifi6xWebp, map[string]*bintree{}},
					"wifi-8x.webp":                     &bintree{dataWebStaticWebpWifi8xWebp, map[string]*bintree{}},
					"wifi.webp":                        &bintree{dataWebStaticWebpWifiWebp, map[string]*bintree{}},
					"wrench-2x.webp":                   &bintree{dataWebStaticWebpWrench2xWebp, map[string]*bintree{}},
					"wrench-3x.webp":                   &bintree{dataWebStaticWebpWrench3xWebp, map[string]*bintree{}},
					"wrench-4x.webp":                   &bintree{dataWebStaticWebpWrench4xWebp, map[string]*bintree{}},
					"wrench-6x.webp":                   &bintree{dataWebStaticWebpWrench6xWebp, map[string]*bintree{}},
					"wrench-8x.webp":                   &bintree{dataWebStaticWebpWrench8xWebp, map[string]*bintree{}},
					"wrench.webp":                      &bintree{dataWebStaticWebpWrenchWebp, map[string]*bintree{}},
					"x-2x.webp":                        &bintree{dataWebStaticWebpX2xWebp, map[string]*bintree{}},
					"x-3x.webp":                        &bintree{dataWebStaticWebpX3xWebp, map[string]*bintree{}},
					"x-4x.webp":                        &bintree{dataWebStaticWebpX4xWebp, map[string]*bintree{}},
					"x-6x.webp":                        &bintree{dataWebStaticWebpX6xWebp, map[string]*bintree{}},
					"x-8x.webp":                        &bintree{dataWebStaticWebpX8xWebp, map[string]*bintree{}},
					"x.webp":                           &bintree{dataWebStaticWebpXWebp, map[string]*bintree{}},
					"yen-2x.webp":                      &bintree{dataWebStaticWebpYen2xWebp, map[string]*bintree{}},
					"yen-3x.webp":                      &bintree{dataWebStaticWebpYen3xWebp, map[string]*bintree{}},
					"yen-4x.webp":                      &bintree{dataWebStaticWebpYen4xWebp, map[string]*bintree{}},
					"yen-6x.webp":                      &bintree{dataWebStaticWebpYen6xWebp, map[string]*bintree{}},
					"yen-8x.webp":                      &bintree{dataWebStaticWebpYen8xWebp, map[string]*bintree{}},
					"yen.webp":                         &bintree{dataWebStaticWebpYenWebp, map[string]*bintree{}},
					"zoom-in-2x.webp":                  &bintree{dataWebStaticWebpZoomIn2xWebp, map[string]*bintree{}},
					"zoom-in-3x.webp":                  &bintree{dataWebStaticWebpZoomIn3xWebp, map[string]*bintree{}},
					"zoom-in-4x.webp":                  &bintree{dataWebStaticWebpZoomIn4xWebp, map[string]*bintree{}},
					"zoom-in-6x.webp":                  &bintree{dataWebStaticWebpZoomIn6xWebp, map[string]*bintree{}},
					"zoom-in-8x.webp":                  &bintree{dataWebStaticWebpZoomIn8xWebp, map[string]*bintree{}},
					"zoom-in.webp":                     &bintree{dataWebStaticWebpZoomInWebp, map[string]*bintree{}},
					"zoom-out-2x.webp":                 &bintree{dataWebStaticWebpZoomOut2xWebp, map[string]*bintree{}},
					"zoom-out-3x.webp":                 &bintree{dataWebStaticWebpZoomOut3xWebp, map[string]*bintree{}},
					"zoom-out-4x.webp":                 &bintree{dataWebStaticWebpZoomOut4xWebp, map[string]*bintree{}},
					"zoom-out-6x.webp":                 &bintree{dataWebStaticWebpZoomOut6xWebp, map[string]*bintree{}},
					"zoom-out-8x.webp":                 &bintree{dataWebStaticWebpZoomOut8xWebp, map[string]*bintree{}},
					"zoom-out.webp":                    &bintree{dataWebStaticWebpZoomOutWebp, map[string]*bintree{}},
				}},
			}},
			"templates": &bintree{nil, map[string]*bintree{
				"403.tpl":           &bintree{dataWebTemplates403Tpl, map[string]*bintree{}},
				"layout.tpl":        &bintree{dataWebTemplatesLayoutTpl, map[string]*bintree{}},
				"node-children.tpl": &bintree{dataWebTemplatesNodeChildrenTpl, map[string]*bintree{}},
				"node-content.tpl":  &bintree{dataWebTemplatesNodeContentTpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
